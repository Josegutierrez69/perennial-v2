{
  "address": "0x93cE20Db473DD918D662F098819f63Bc91cf9041",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOracleProvider",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "maintenance_",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "fundingFee_",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "makerFee_",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "takerFee_",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "makerLimit_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "PackedFixed18",
              "name": "minRate",
              "type": "int128"
            },
            {
              "internalType": "PackedFixed18",
              "name": "maxRate",
              "type": "int128"
            },
            {
              "internalType": "PackedFixed18",
              "name": "targetRate",
              "type": "int128"
            },
            {
              "internalType": "PackedUFixed18",
              "name": "targetUtilization",
              "type": "uint128"
            }
          ],
          "internalType": "struct JumpRateUtilizationCurve",
          "name": "utilizationCurve_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CurveMathOutOfBoundsError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed18OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleVersion",
          "type": "uint256"
        }
      ],
      "name": "atVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "Fixed18",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "Fixed18",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingFee",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenance",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerFee",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerLimit",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracleProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "name": "rate",
      "outputs": [
        {
          "internalType": "Fixed18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "Fixed18",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takerFee",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilizationCurve",
      "outputs": [
        {
          "components": [
            {
              "internalType": "PackedFixed18",
              "name": "minRate",
              "type": "int128"
            },
            {
              "internalType": "PackedFixed18",
              "name": "maxRate",
              "type": "int128"
            },
            {
              "internalType": "PackedFixed18",
              "name": "targetRate",
              "type": "int128"
            },
            {
              "internalType": "PackedUFixed18",
              "name": "targetUtilization",
              "type": "uint128"
            }
          ],
          "internalType": "struct JumpRateUtilizationCurve",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x794330e107f529d9a5e22c361411bfc328b9a256ac14c8e6b782114dd4d63942",
  "receipt": {
    "to": null,
    "from": "0xb779541EcE2bFFF7CB803cfcddfA220A753879b6",
    "contractAddress": "0x93cE20Db473DD918D662F098819f63Bc91cf9041",
    "transactionIndex": 1,
    "gasUsed": "1267866",
    "logsBloom": "0x
    "blockHash": "0x04f59ba7222d1420bf42846fb3fc94b5b4e86bee00d7149d29cc606479e73c15",
    "transactionHash": "0x794330e107f529d9a5e22c361411bfc328b9a256ac14c8e6b782114dd4d63942",
    "logs": [],
    "blockNumber": 32236565,
    "cumulativeGasUsed": "1409241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x841d7C994aC0Bb17CcD65a021E686e3cFafE2118",
    "300000000000000000",
    "100000000000000000",
    0,
    0,
    "2500000000000000000000",
    {
      "minRate": "40000000000000000",
      "maxRate": "16250000000000000000",
      "targetRate": "1560000000000000000",
      "targetUtilization": "800000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "0334c7e1f902ac6804eb90efb3472ddf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOracleProvider\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance_\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"fundingFee_\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerFee_\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"takerFee_\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerLimit_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"PackedFixed18\",\"name\":\"minRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"maxRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"targetRate\",\"type\":\"int128\"},{\"internalType\":\"PackedUFixed18\",\"name\":\"targetUtilization\",\"type\":\"uint128\"}],\"internalType\":\"struct JumpRateUtilizationCurve\",\"name\":\"utilizationCurve_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CurveMathOutOfBoundsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed18OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"}],\"name\":\"atVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingFee\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenance\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerFee\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerLimit\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracleProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"Fixed18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takerFee\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationCurve\",\"outputs\":[{\"components\":[{\"internalType\":\"PackedFixed18\",\"name\":\"minRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"maxRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"targetRate\",\"type\":\"int128\"},{\"internalType\":\"PackedUFixed18\",\"name\":\"targetUtilization\",\"type\":\"uint128\"}],\"internalType\":\"struct JumpRateUtilizationCurve\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"atVersion(uint256)\":{\"params\":{\"oracleVersion\":\"Oracle version to return for\"},\"returns\":{\"_0\":\"Oracle version at `oracleVersion` with price transformed by payoff function\"}},\"currentVersion()\":{\"returns\":{\"_0\":\"Current oracle version\"}},\"oracle()\":{\"returns\":{\"_0\":\"Oracle contract address\"}},\"rate((uint256,uint256))\":{\"details\":\"Handles 0-maker/taker edge cases\",\"params\":{\"position\":\"Position to base utilization on\"},\"returns\":{\"_0\":\"The per-second rate\"}},\"utilizationCurve()\":{\"returns\":{\"_0\":\"Current utilization curve parameter set\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"atVersion(uint256)\":{\"notice\":\"Returns the oracle version at `oracleVersion`\"},\"currentVersion()\":{\"notice\":\"Returns the current oracle version\"},\"oracle()\":{\"notice\":\"Returns the oracle contract address\"},\"rate((uint256,uint256))\":{\"notice\":\"Returns The per-second rate based on the provided `position`\"},\"sync()\":{\"notice\":\"Pass-through hook to call sync() on the oracle provider\"},\"utilizationCurve()\":{\"notice\":\"Returns the utilization curve parameter set\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/FloorBAYC.sol\":\"FloorBAYC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@equilibria/perennial/contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface ICollateral {\\n    event Deposit(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event Withdrawal(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event AccountSettle(IProduct indexed product, address indexed account, Fixed18 amount, UFixed18 newShortfall);\\n    event ProductSettle(IProduct indexed product, UFixed18 protocolFee, UFixed18 productFee);\\n    event Liquidation(address indexed user, IProduct indexed product, address liquidator, UFixed18 fee);\\n    event ShortfallResolution(IProduct indexed product, UFixed18 amount);\\n    event FeeClaim(address indexed account, UFixed18 amount);\\n\\n    error CollateralCantLiquidate(UFixed18 totalMaintenance, UFixed18 totalCollateral);\\n    error CollateralInsufficientCollateralError();\\n    error CollateralUnderLimitError();\\n    error CollateralZeroAddressError();\\n\\n    function token() external view returns (Token18);\\n    function fees(address account) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function depositTo(address account, IProduct product, UFixed18 amount) external;\\n    function withdrawTo(address account, IProduct product, UFixed18 amount) external;\\n    function liquidate(address account, IProduct product) external;\\n    function settleAccount(address account, Fixed18 amount) external;\\n    function settleProduct(UFixed18 amount) external;\\n    function collateral(address account, IProduct product) external view returns (UFixed18);\\n    function collateral(IProduct product) external view returns (UFixed18);\\n    function shortfall(IProduct product) external view returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external view returns (bool);\\n    function liquidatableNext(address account, IProduct product) external view returns (bool);\\n    function resolveShortfall(IProduct product, UFixed18 amount) external;\\n    function claimFee() external;\\n}\\n\",\"keccak256\":\"0xa5e7fdda92702f748e6eb8701e522450035a98a05e5fc1cf66d51c52e397d914\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IIncentivizer.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IController {\\n    /// @dev Coordinator of a one or many products\\n    struct Coordinator {\\n        /// @dev Pending owner of the product, can accept ownership\\n        address pendingOwner;\\n\\n        /// @dev Owner of the product, allowed to update select parameters\\n        address owner;\\n\\n        /// @dev Treasury of the product, collects fees\\n        address treasury;\\n\\n        /// @dev the address that is allowed to pause the coordinated products (0-address defaults to owner)\\n        address pauser;\\n\\n        /// @dev Whether the coordinated products are paused\\n        bool paused;\\n    }\\n\\n    event CollateralUpdated(ICollateral newCollateral);\\n    event IncentivizerUpdated(IIncentivizer newIncentivizer);\\n    event ProductBeaconUpdated(IBeacon newProductBeacon);\\n    event ProtocolFeeUpdated(UFixed18 newProtocolFee);\\n    event MinFundingFeeUpdated(UFixed18 newMinFundingFee);\\n    event LiquidationFeeUpdated(UFixed18 newLiquidationFee);\\n    event IncentivizationFeeUpdated(UFixed18 newIncentivizationFee);\\n    event MinCollateralUpdated(UFixed18 newMinCollateral);\\n    event ProgramsPerProductUpdated(uint256 newProgramsPerProduct);\\n    event CoordinatorPendingOwnerUpdated(uint256 indexed coordinatorId, address newPendingOwner);\\n    event CoordinatorOwnerUpdated(uint256 indexed coordinatorId, address newOwner);\\n    event CoordinatorTreasuryUpdated(uint256 indexed coordinatorId, address newTreasury);\\n    event CoordinatorPauserUpdated(uint256 indexed coordinatorId, address pauser);\\n    event CoordinatorPausedUpdated(uint256 indexed coordinatorId, bool paused);\\n    event CoordinatorCreated(uint256 indexed coordinatorId, address owner);\\n    event ProductCreated(IProduct indexed product, IProductProvider provider);\\n\\n    error ControllerAlreadyInitializedError();\\n    error ControllerNoZeroCoordinatorError();\\n    error ControllerNotPauserError(uint256 coordinatorId);\\n    error ControllerNotOwnerError(uint256 controllerId);\\n    error ControllerNotPendingOwnerError(uint256 controllerId);\\n    error ControllerInvalidProtocolFeeError();\\n    error ControllerInvalidMinFundingFeeError();\\n    error ControllerInvalidLiquidationFeeError();\\n    error ControllerInvalidIncentivizationFeeError();\\n\\n    function collateral() external view returns (ICollateral);\\n    function incentivizer() external view returns (IIncentivizer);\\n    function productBeacon() external view returns (IBeacon);\\n    function coordinators(uint256 collateralId) external view returns (Coordinator memory);\\n    function coordinatorFor(IProduct product) external view returns (uint256);\\n    function protocolFee() external view returns (UFixed18);\\n    function minFundingFee() external view returns (UFixed18);\\n    function liquidationFee() external view returns (UFixed18);\\n    function incentivizationFee() external view returns (UFixed18);\\n    function minCollateral() external view returns (UFixed18);\\n    function programsPerProduct() external view returns (uint256);\\n    function initialize(ICollateral collateral_, IIncentivizer incentivizer_, IBeacon productBeacon_) external;\\n    function createCoordinator(address coordinatorOwner) external returns (uint256);\\n    function updateCoordinatorPendingOwner(uint256 coordinatorId, address newPendingOwner) external;\\n    function acceptCoordinatorOwner(uint256 coordinatorId) external;\\n    function updateCoordinatorTreasury(uint256 coordinatorId, address newTreasury) external;\\n    function updateCoordinatorPauser(uint256 coordinatorId, address newPauser) external;\\n    function updateCoordinatorPaused(uint256 coordinatorId, bool newPaused) external;\\n    function createProduct(uint256 coordinatorId, IProductProvider provider) external returns (IProduct);\\n    function updateCollateral(ICollateral newCollateral) external;\\n    function updateIncentivizer(IIncentivizer newIncentivizer) external;\\n    function updateProductBeacon(IBeacon newProductBeacon) external;\\n    function updateProtocolFee(UFixed18 newProtocolFee) external;\\n    function updateMinFundingFee(UFixed18 newMinFundingFee) external;\\n    function updateLiquidationFee(UFixed18 newLiquidationFee) external;\\n    function updateIncentivizationFee(UFixed18 newIncentivizationFee) external;\\n    function updateMinCollateral(UFixed18 newMinCollateral) external;\\n    function updateProgramsPerProduct(uint256 newProductsPerProduct) external;\\n    function isProduct(IProduct product) external view returns (bool);\\n    function owner() external view returns (address);\\n    function owner(uint256 coordinatorId) external view returns (address);\\n    function owner(IProduct product) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasury(uint256 coordinatorId) external view returns (address);\\n    function treasury(IProduct product) external view returns (address);\\n    function pauser() external view returns (address);\\n    function pauser(uint256 coordinatorId) external view returns (address);\\n    function pauser(IProduct product) external view returns (address);\\n    function paused() external view returns (bool);\\n    function paused(uint256 coordinatorId) external view returns (bool);\\n    function paused(IProduct product) external view returns (bool);\\n}\",\"keccak256\":\"0xe3e848c947097c36ac1ac1ee408c035aa5888a30112e99394a863a28fcfaf146\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IIncentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/ProgramInfo.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IIncentivizer {\\n    event ProgramCreated(IProduct indexed product, uint256 indexed programId, uint256 coordinatorId, Token18 token, UFixed18 amountMaker, UFixed18 amountTaker, uint256 start, uint256 duration, UFixed18 programFeeAmount);\\n    event ProgramStarted(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event ProgramComplete(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event Claim(IProduct indexed product, address indexed account, uint256 indexed programId, UFixed18 amount);\\n    event FeeClaim(Token18 indexed token, UFixed18 amount);\\n\\n    error IncentivizerNotAllowedError(IProduct product);\\n    error IncentivizerTooManyProgramsError();\\n    error IncentivizerNotProgramOwnerError(IProduct product, uint256 programId);\\n    error IncentivizerInvalidProgramError(IProduct product, uint256 programId);\\n\\n    function programInfos(IProduct product, uint256 programId) external view returns (ProgramInfo memory);\\n    function fees(Token18 token) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function create(IProduct product, ProgramInfo calldata info) external returns (uint256);\\n    function complete(IProduct product, uint256 programId) external;\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function syncAccount(address account, IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function claim(IProduct product, uint256[] calldata programIds) external;\\n    function claim(IProduct[] calldata products, uint256[][] calldata programIds) external;\\n    function claimFee(Token18[] calldata tokens) external;\\n    function active(IProduct product) external view returns (uint256);\\n    function count(IProduct product) external view returns (uint256);\\n    function unclaimed(IProduct product, address account, uint256 programId) external view returns (UFixed18);\\n    function available(IProduct product, uint256 programId) external view returns (UFixed18);\\n    function versionStarted(IProduct product, uint256 programId) external view returns (uint256);\\n    function versionComplete(IProduct product, uint256 programId) external view returns (uint256);\\n    function owner(IProduct product, uint256 programId) external view returns (address);\\n    function treasury(IProduct product, uint256 programId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x46f3cbdb6ff3214609d88069a18dae1d607833bcc92d67304955017cbd9f3f67\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    function sync() external returns (OracleVersion memory);\\n    function currentVersion() external view returns (OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0xde0f20d468ba8b91addfc356e13f2c74a4dc8abe68be323942217c723775d9c1\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./types/PrePosition.sol\\\";\\nimport \\\"./types/Accumulator.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IProduct {\\n    event Settle(uint256 preVersion, uint256 toVersion);\\n    event AccountSettle(address indexed account, uint256 preVersion, uint256 toVersion);\\n    event MakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event MakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n\\n    error ProductInsufficientLiquidityError(UFixed18 socializationFactor);\\n    error ProductDoubleSidedError();\\n    error ProductOverClosedError();\\n    error ProductInsufficientCollateralError();\\n    error ProductInLiquidationError();\\n    error ProductMakerOverLimitError();\\n    error ProductOracleBootstrappingError();\\n\\n    function productProvider() external view returns (IProductProvider);\\n    function initialize(IProductProvider productProvider_) external;\\n    function settle() external;\\n    function settleAccount(address account) external;\\n    function openTake(UFixed18 amount) external;\\n    function closeTake(UFixed18 amount) external;\\n    function openMake(UFixed18 amount) external;\\n    function closeMake(UFixed18 amount) external;\\n    function closeAll(address account) external;\\n    function maintenance(address account) external view returns (UFixed18);\\n    function maintenanceNext(address account) external view returns (UFixed18);\\n    function isClosed(address account) external view returns (bool);\\n    function isLiquidating(address account) external view returns (bool);\\n    function position(address account) external view returns (Position memory);\\n    function pre(address account) external view returns (PrePosition memory);\\n    function latestVersion() external view returns (uint256);\\n    function positionAtVersion(uint256 oracleVersion) external view returns (Position memory);\\n    function pre() external view returns (PrePosition memory);\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function latestVersion(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6daf998516f069ace15047ba59f3a3fe00394e82e01638a937e1bcaff16cd63e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\n\\ninterface IProductProvider is IOracleProvider {\\n    function oracle() external view returns (IOracleProvider);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function rate(Position memory position) external view returns (Fixed18);\\n    function maintenance() external view returns (UFixed18);\\n    function fundingFee() external view returns (UFixed18);\\n    function makerFee() external view returns (UFixed18);\\n    function takerFee() external view returns (UFixed18);\\n    function makerLimit() external view returns (UFixed18);\\n}\\n\",\"keccak256\":\"0xeed08e4335ca553a639e6a77274df69c01413dd652e4d764f36ad7ae50016a8b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/Accumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./PackedAccumulator.sol\\\";\\n\\n/// @dev Accumulator type\\nstruct Accumulator {\\n    /// @dev maker accumulator per share\\n    Fixed18 maker;\\n    /// @dev taker accumulator per share\\n    Fixed18 taker;\\n}\\nusing AccumulatorLib for Accumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that surfaces math operations for the Accumulator type.\\n * @dev Accumulators track the cumulative change in position value over time for the maker and taker positions\\n *      respectively. Account-level accumulators can then use two of these values `a` and `a'` to compute the\\n *      change in position value since last sync. This change in value is then used to compute P&L and fees.\\n */\\nlibrary AccumulatorLib {\\n    /**\\n     * @notice Creates a packed accumulator from an accumulator\\n     * @param self an accumulator\\n     * @return New packed accumulator\\n     */\\n    function pack(Accumulator memory self) internal pure returns (PackedAccumulator memory) {\\n        return PackedAccumulator({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Adds two accumulators together\\n     * @param a The first accumulator to sum\\n     * @param b The second accumulator to sum\\n     * @return The resulting summed accumulator\\n     */\\n    function add(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts accumulator `b` from `a`\\n     * @param a The accumulator to subtract from\\n     * @param b The accumulator to subtract\\n     * @return The resulting subtracted accumulator\\n     */\\n    function sub(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies two accumulators together\\n     * @param a The first accumulator to multiply\\n     * @param b The second accumulator to multiply\\n     * @return The resulting multiplied accumulator\\n     */\\n    function mul(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.mul(b.maker), taker: a.taker.mul(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single accumulator\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Accumulator memory self) internal pure returns (Fixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n}\\n\",\"keccak256\":\"0x7ccd0a72aa593cefb9f4337cf312799f357b82fcb3f0379de0dc503d1cb7e387\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PackedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev PackedAccumulator type\\nstruct PackedAccumulator {\\n    /// @dev maker accumulator per share\\n    PackedFixed18 maker;\\n    /// @dev taker accumulator per share\\n    PackedFixed18 taker;\\n}\\nusing PackedAccumulatorLib for PackedAccumulator global;\\n\\n/**\\n * @title PackedAccumulatorLib\\n * @dev A packed version of the Accumulator which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Accumulator type.\\n */\\nlibrary PackedAccumulatorLib {\\n    /**\\n     * @notice Creates an accumulator from a packed accumulator\\n     * @param self packed accumulator\\n     * @return New accumulator\\n     */\\n    function unpack(PackedAccumulator memory self) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0xd83f2822d4f6c818087a232b54007730992c34ff77377fc307a282f886e7cf65\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PackedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedUFixed18.sol\\\";\\nimport \\\"./Position.sol\\\";\\n\\n/// @dev PackedPosition type\\nstruct PackedPosition {\\n    /// @dev Quantity of the maker position\\n    PackedUFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    PackedUFixed18 taker;\\n}\\nusing PackedPositionLib for PackedPosition global;\\n\\n/**\\n * @title PackedPositionLib\\n * @dev A packed version of the Position which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Position type.\\n */\\nlibrary PackedPositionLib {\\n    /**\\n     * @notice Creates an position from a packed position\\n     * @param self packed position\\n     * @return New position\\n     */\\n    function unpack(PackedPosition memory self) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0x04968e6794f6244cb3415cea111d640273a81faea957872988d0cb580f45df1e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\nimport \\\"./PrePosition.sol\\\";\\nimport \\\"./PackedPosition.sol\\\";\\n\\n/// @dev Position type\\nstruct Position {\\n    /// @dev Quantity of the maker position\\n    UFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    UFixed18 taker;\\n}\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Library that surfaces math and settlement computations for the Position type.\\n * @dev Positions track the current quantity of the account's maker and taker positions respectively\\n *      denominated as a unit of the product's payoff function.\\n */\\nlibrary PositionLib {\\n    /**\\n     * @notice Creates a packed position from an position\\n     * @param self A position\\n     * @return New packed position\\n     */\\n    function pack(Position memory self) internal pure returns (PackedPosition memory) {\\n        return PackedPosition({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Returns whether the position is fully empty\\n     * @param self A position\\n     * @return Whether the position is empty\\n     */\\n    function isEmpty(Position memory self) internal pure returns (bool) {\\n        return self.maker.isZero() && self.taker.isZero();\\n    }\\n\\n    /**\\n     * @notice Adds position `a` and `b` together, returning the result\\n     * @param a The first position to sum\\n     * @param b The second position to sum\\n     * @return Resulting summed position\\n     */\\n    function add(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts position `b` from `a`, returning the result\\n     * @param a The position to subtract from\\n     * @param b The position to subtract\\n     * @return Resulting subtracted position\\n     */\\n    function sub(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies position `self` by accumulator `accumulator` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param accumulator The accumulator to multiply by\\n     * @return Resulting multiplied accumulator\\n     */\\n    function mul(Position memory self, Accumulator memory accumulator) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).mul(accumulator.maker),\\n            taker: Fixed18Lib.from(self.taker).mul(accumulator.taker)\\n        });\\n    }\\n\\n    /**\\n     * @notice Scales position `self` by fixed-decimal `scale` and returns the resulting position\\n     * @param self The Position to operate on\\n     * @param scale The Fixed-decimal to scale by\\n     * @return Resulting scaled position\\n     */\\n    function mul(Position memory self, UFixed18 scale) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.mul(scale), taker: self.taker.mul(scale)});\\n    }\\n\\n    /**\\n     * @notice Divides position `self` by `b` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param b The number to divide by\\n     * @return Resulting divided accumulator\\n     */\\n    function div(Position memory self, uint256 b) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).div(Fixed18Lib.from(UFixed18Lib.from(b))),\\n            taker: Fixed18Lib.from(self.taker).div(Fixed18Lib.from(UFixed18Lib.from(b)))\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of `self`'s maker and taker values\\n     * @param self The struct to operate on\\n     * @return Resulting maximum value\\n     */\\n    function max(Position memory self) internal pure returns (UFixed18) {\\n        return UFixed18Lib.max(self.maker, self.taker);\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single position\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Position memory self) internal pure returns (UFixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n\\n    /**\\n     * @notice Computes the next position after the pending-settlement position delta is included\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @return Next Position\\n     */\\n    function next(Position memory self, PrePosition memory pre) internal pure returns (Position memory) {\\n        return sub(add(self, pre.openPosition), pre.closePosition);\\n    }\\n\\n    /**\\n     * @notice Returns the settled position at oracle version `toOracleVersion`\\n     * @dev Checks if a new position is ready to be settled based on the provided `toOracleVersion`\\n     *      and `pre` and returns accordingly\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return Settled position at oracle version\\n     * @return Fee accrued from opening or closing the position\\n     * @return Whether a new position was settled\\n     */\\n    function settled(\\n        Position memory self,\\n        PrePosition memory pre,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (Position memory, UFixed18, bool) {\\n        return pre.canSettle(toOracleVersion) ? (next(self, pre), pre.computeFee(provider, toOracleVersion), true) : (self, UFixed18Lib.ZERO, false);\\n    }\\n\\n    /**\\n     * @notice Returns the socialization factor for the current position\\n     * @dev Socialization account for the case where `taker` > `maker` temporarily due to a liquidation\\n     *      on the maker side. This dampens the taker's exposure pro-rata to ensure that the maker side\\n     *      is never exposed over 1 x short.\\n     * @param self The Position to operate on\\n     * @return Socialization factor\\n     */\\n    function socializationFactor(Position memory self) internal pure returns (UFixed18) {\\n        return self.taker.isZero() ? UFixed18Lib.ONE : UFixed18Lib.min(UFixed18Lib.ONE, self.maker.div(self.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x238013d5792bcca49c815845fbd815ccd4ae97f8994ab33359827bdcc769c16b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PrePosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"./ProductProvider.sol\\\";\\n\\n/// @dev PrePosition type\\nstruct PrePosition {\\n    /// @dev Oracle version at which the new position delta was recorded\\n    uint256 oracleVersion;\\n\\n    /// @dev Size of position to open at oracle version\\n    Position openPosition;\\n\\n    /// @dev Size of position to close at oracle version\\n    Position closePosition;\\n}\\nusing PrePositionLib for PrePosition global;\\n\\n/**\\n * @title PrePositionLib\\n * @notice Library that manages a pre-settlement position delta.\\n * @dev PrePositions track the currently awaiting-settlement deltas to a settled Position. These are\\n *      Primarily necessary to introduce lag into the settlement system such that oracle lag cannot be\\n *      gamed to a user's advantage. When a user opens or closes a new position, it sits as a PrePosition\\n *      for one oracle version until it's settle into the Position, making it then effective. PrePositions\\n *      are automatically settled at the correct oracle version even if a flywheel call doesn't happen until\\n *      several version into the future by using the historical version lookups in the corresponding \\\"Versioned\\\"\\n *      global state types.\\n */\\nlibrary PrePositionLib {\\n    using ProductProviderLib for IProductProvider;\\n\\n    /**\\n     * @notice Returns whether there is no pending-settlement position delta\\n     * @dev Can be \\\"empty\\\" even with a non-zero oracleVersion if a position is opened and\\n     *      closed in the same version netting out to a zero position delta\\n     * @param self The struct to operate on\\n     * @return Whether the pending-settlement position delta is empty\\n     */\\n    function isEmpty(PrePosition memory self) internal pure returns (bool) {\\n        return self.openPosition.isEmpty() && self.closePosition.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The position amount to open\\n     */\\n    function openMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.maker = self.openPosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The maker position amount to close\\n     */\\n    function closeMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.maker = self.closePosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to open\\n     */\\n    function openTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.taker = self.openPosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netTake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to close\\n     */\\n    function closeTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.taker = self.closePosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netTake(self);\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the maker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function _netMake(PrePosition storage self) private {\\n        if (self.openPosition.maker.gt(self.closePosition.maker)) {\\n            self.openPosition.maker = self.openPosition.maker.sub(self.closePosition.maker);\\n            self.closePosition.maker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.maker = self.closePosition.maker.sub(self.openPosition.maker);\\n            self.openPosition.maker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the taker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function _netTake(PrePosition storage self) private {\\n        if (self.openPosition.taker.gt(self.closePosition.taker)) {\\n            self.openPosition.taker = self.openPosition.taker.sub(self.closePosition.taker);\\n            self.closePosition.taker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.taker = self.closePosition.taker.sub(self.openPosition.taker);\\n            self.openPosition.taker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the the pending position delta can be settled at version `toOracleVersion`\\n     * @dev Pending-settlement positions deltas can be settled (1) oracle version after they are recorded\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The potential oracle version to settle\\n     * @return Whether the position delta can be settled\\n     */\\n    function canSettle(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (bool) {\\n        return !isEmpty(self) && toOracleVersion.version > self.oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Computes the fee incurred for opening or closing the pending-settlement position\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version at which settlement takes place\\n     * @return positionFee The maker / taker fee incurred\\n     */\\n    function computeFee(\\n        PrePosition memory self,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (UFixed18) {\\n        Position memory positionDelta = self.openPosition.add(self.closePosition);\\n\\n        (UFixed18 makerNotional, UFixed18 takerNotional) = (\\n            Fixed18Lib.from(positionDelta.maker).mul(toOracleVersion.price).abs(),\\n            Fixed18Lib.from(positionDelta.taker).mul(toOracleVersion.price).abs()\\n        );\\n\\n        return makerNotional.mul(provider.safeMakerFee()).add(takerNotional.mul(provider.safeTakerFee()));\\n    }\\n\\n    /**\\n     * @notice Computes the next oracle version to settle\\n     * @dev - If there is no pending-settlement position delta, returns the current oracle version\\n     *      - Otherwise returns the oracle version at which the pending-settlement position delta can be first settled\\n     *\\n     *      Corresponds to point (b) in the Position settlement flow\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @return Next oracle version to settle\\n     */\\n    function settleVersion(PrePosition storage self, uint256 currentVersion) internal view returns (uint256) {\\n        uint256 _oracleVersion = self.oracleVersion;\\n        return _oracleVersion == 0 ? currentVersion : _oracleVersion + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xdf84172a254686f8cd721cd0c25f56e24a6f423f7ab780e7aa19bbf27352b392\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/ProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"../IProductProvider.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title ProductProviderLib\\n * @notice Library that adds a safeguard wrapper to certain product parameters.\\n * @dev Product providers are semi-untrusted as they contain custom code from the product owners. Owners\\n *      have full control over this parameter-setting code, however there are some \\\"known ranges\\\" that\\n *      a parameter cannot be outside of (i.e. a fee being over 100%).\\n */\\nlibrary ProductProviderLib {\\n    /**\\n     * @notice Returns the minimum funding fee parameter with a capped range for safety\\n     * @dev Caps controller.minFundingFee() <= self.minFundingFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @param controller The protocol Factory contract\\n     * @return Safe minimum funding fee parameter\\n     */\\n    function safeFundingFee(IProductProvider self, IController controller) internal view returns (UFixed18) {\\n        return self.fundingFee().max(controller.minFundingFee()).min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the maker fee parameter with a capped range for safety\\n     * @dev Caps self.makerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe maker fee parameter\\n     */\\n    function safeMakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.makerFee().min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the taker fee parameter with a capped range for safety\\n     * @dev Caps self.takerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe taker fee parameter\\n     */\\n    function safeTakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.takerFee().min(UFixed18Lib.ONE);\\n    }\\n}\\n\",\"keccak256\":\"0x70f535ebe9b53f5ad94761e6e3da2b96ec261dce1c6c318e1f70b4e9e12b92b7\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/ProgramInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev ProgramInfo type\\nstruct ProgramInfo {\\n    /// @dev Coordinator for this program\\n    uint256 coordinatorId;\\n\\n    /// @dev Amount of total maker and taker rewards\\n    Position amount;\\n\\n    /// @dev start timestamp of the program\\n    uint256 start;\\n\\n    /// @dev duration of the program (in seconds)\\n    uint256 duration;\\n\\n    /// @dev Reward ERC20 token contract\\n    Token18 token;\\n}\\nusing ProgramInfoLib for ProgramInfo global;\\n\\n/**\\n * @title ProgramInfoLib\\n * @notice Library that snapshots the static information for a single program.\\n * @dev This information does not change during the operation of a program.\\n */\\nlibrary ProgramInfoLib {\\n    uint256 private constant MIN_DURATION = 1 days;\\n    uint256 private constant MAX_DURATION = 2 * 365 days;\\n\\n    error ProgramInvalidStartError();\\n    error ProgramInvalidDurationError();\\n\\n    /**\\n     * @notice Validates and creates a new Program\\n     * @dev Reverts for invalid programInfos\\n     * @param programInfo Un-sanitized static program information\\n     */\\n    function validate(ProgramInfo memory programInfo) internal view {\\n        if (isStarted(programInfo, block.timestamp)) revert ProgramInvalidStartError();\\n        if (programInfo.duration < MIN_DURATION || programInfo.duration > MAX_DURATION) revert ProgramInvalidDurationError();\\n    }\\n\\n    /**\\n     * @notice Computes a new program info with the fee taken out of the amount\\n     * @param programInfo Original program info\\n     * @param incentivizationFee The incentivization fee\\n     * @return New program info\\n     * @return Fee amount\\n     */\\n    function deductFee(ProgramInfo memory programInfo, UFixed18 incentivizationFee)\\n    internal pure returns (ProgramInfo memory, UFixed18) {\\n        Position memory newProgramAmount = programInfo.amount.mul(UFixed18Lib.ONE.sub(incentivizationFee));\\n        UFixed18 programFeeAmount = programInfo.amount.sub(newProgramAmount).sum();\\n        programInfo.amount = newProgramAmount;\\n        return (programInfo, programFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the maker and taker amounts per position share\\n     * @param self The ProgramInfo to operate on\\n     * @return programFee Amounts per share\\n     */\\n    function amountPerShare(ProgramInfo memory self) internal pure returns (Accumulator memory) {\\n        return self.amount.div(self.duration);\\n    }\\n\\n    /**\\n     * @notice Returns whether the program has started by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program has started\\n     */\\n    function isStarted(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= self.start;\\n    }\\n\\n    /**\\n     * @notice Returns whether the program is completed by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program is completed\\n     */\\n    function isComplete(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= (self.start + self.duration);\\n    }\\n}\\n\",\"keccak256\":\"0x33b20b5688a58a81dad95dedd1743ff346c5724abd711150c9b33ab9addafb3c\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/CurveMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\nimport \\\"../number/types/Fixed18.sol\\\";\\n\\n/**\\n * @title CurveMath\\n * @notice Library for managing math operations for utilization curves.\\n */\\nlibrary CurveMath {\\n    error CurveMathOutOfBoundsError();\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed18 startX,\\n        Fixed18 startY,\\n        UFixed18 endX,\\n        Fixed18 endY,\\n        UFixed18 targetX\\n    ) internal pure returns (Fixed18) {\\n        if (targetX.lt(startX) || targetX.gt(endX)) revert CurveMathOutOfBoundsError();\\n\\n        UFixed18 xRange = endX.sub(startX);\\n        Fixed18 yRange = endY.sub(startY);\\n        UFixed18 xRatio = targetX.sub(startX).div(xRange);\\n        return yRange.mul(Fixed18Lib.from(xRatio)).add(startY);\\n    }\\n}\\n\",\"keccak256\":\"0x60d159f9ddf0dbe81124ecad58bba734b4cf82877637ff8d9d7f3e92f2da4ded\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/UtilizationCurveProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\nimport \\\"../number/types/Fixed18.sol\\\";\\n\\n/**\\n * @title UtilizationCurveProvider\\n * @notice Abstract contract defining the internal interface for utilization curve providers.\\n */\\nabstract contract UtilizationCurveProvider {\\n    /**\\n     * @notice Returns the computed rate based on the supplied `utilization`\\n     * @param utilization Utilization ratio\\n     * @return Corresponding rate\\n     */\\n    function _computeRate(UFixed18 utilization) internal virtual view returns (Fixed18);\\n}\\n\",\"keccak256\":\"0x270054ba8868828ba448f6d07d67cc9c1318c27a0b93be6c55d6f892bf5346ad\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/immutable/XJumpRateUtilizationCurveProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../types/JumpRateUtilizationCurve.sol\\\";\\nimport \\\"../UtilizationCurveProvider.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\nimport \\\"../../number/types/Fixed18.sol\\\";\\n\\n/**\\n * @title XJumpRateUtilizationCurveProvider\\n * @notice Library for manage storing and surfacing a Jump Rate utilization curve model.\\n * @dev Uses an immutable storage pattern to store the utilization curve parameters which is more gas efficient,\\n *      but does not allow parameters to be updated over time.\\n */\\nabstract contract XJumpRateUtilizationCurveProvider is UtilizationCurveProvider {\\n    PackedFixed18 private immutable _minRate;\\n    PackedFixed18 private immutable _maxRate;\\n    PackedFixed18 private immutable _targetRate;\\n    PackedUFixed18 private immutable _targetUtilization;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param initialUtilizationCurve Initial parameter set for the utilization curve\\n     */\\n    constructor(JumpRateUtilizationCurve memory initialUtilizationCurve) {\\n        _minRate = initialUtilizationCurve.minRate;\\n        _maxRate = initialUtilizationCurve.maxRate;\\n        _targetRate = initialUtilizationCurve.targetRate;\\n        _targetUtilization = initialUtilizationCurve.targetUtilization;\\n    }\\n\\n    /**\\n     * @notice Returns the utilization curve parameter set\\n     * @return Current utilization curve parameter set\\n     */\\n    function utilizationCurve() public view returns (JumpRateUtilizationCurve memory) {\\n        return JumpRateUtilizationCurve({\\n            minRate: _minRate,\\n            maxRate: _maxRate,\\n            targetRate: _targetRate,\\n            targetUtilization: _targetUtilization\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the computed rate based on the supplied `utilization`\\n     * @param utilization Utilization ratio\\n     * @return Corresponding rate\\n     */\\n    function _computeRate(UFixed18 utilization) internal override view returns (Fixed18) {\\n        return utilizationCurve().compute(utilization);\\n    }\\n}\\n\",\"keccak256\":\"0x1cb1e96cc1891d4561cc9b7f4a5dddc60629a53ae201f043efe8772750f10c7b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../CurveMath.sol\\\";\\nimport \\\"../../number/types/PackedUFixed18.sol\\\";\\nimport \\\"../../number/types/PackedFixed18.sol\\\";\\n\\n/// @dev JumpRateUtilizationCurve type\\nstruct JumpRateUtilizationCurve {\\n    PackedFixed18 minRate;\\n    PackedFixed18 maxRate;\\n    PackedFixed18 targetRate;\\n    PackedUFixed18 targetUtilization;\\n}\\nusing JumpRateUtilizationCurveLib for JumpRateUtilizationCurve global;\\ntype JumpRateUtilizationCurveStorage is bytes32;\\nusing JumpRateUtilizationCurveStorageLib for JumpRateUtilizationCurveStorage global;\\n\\n/**\\n * @title JumpRateUtilizationCurveLib\\n * @notice Library for the Jump Rate utilization curve type\\n */\\nlibrary JumpRateUtilizationCurveLib {\\n    /**\\n     * @notice Computes the corresponding rate for a utilization ratio\\n     * @param utilization The utilization ratio\\n     * @return The corresponding rate\\n     */\\n    function compute(JumpRateUtilizationCurve memory self, UFixed18 utilization) internal pure returns (Fixed18) {\\n        UFixed18 targetUtilization = self.targetUtilization.unpack();\\n        if (utilization.lt(targetUtilization)) {\\n            return CurveMath.linearInterpolation(\\n                UFixed18Lib.ZERO,\\n                self.minRate.unpack(),\\n                targetUtilization,\\n                self.targetRate.unpack(),\\n                utilization\\n            );\\n        }\\n        if (utilization.lt(UFixed18Lib.ONE)) {\\n            return CurveMath.linearInterpolation(\\n                targetUtilization,\\n                self.targetRate.unpack(),\\n                UFixed18Lib.ONE,\\n                self.maxRate.unpack(),\\n                utilization\\n            );\\n        }\\n        return self.maxRate.unpack();\\n    }\\n}\\n\\nlibrary JumpRateUtilizationCurveStorageLib {\\n    function read(JumpRateUtilizationCurveStorage self) internal view returns (JumpRateUtilizationCurve memory) {\\n        return _storagePointer(self);\\n    }\\n\\n    function store(JumpRateUtilizationCurveStorage self, JumpRateUtilizationCurve memory value) internal {\\n        JumpRateUtilizationCurve storage storagePointer = _storagePointer(self);\\n\\n        storagePointer.minRate = value.minRate;\\n        storagePointer.maxRate = value.maxRate;\\n        storagePointer.targetRate = value.targetRate;\\n        storagePointer.targetUtilization = value.targetUtilization;\\n    }\\n\\n    function _storagePointer(JumpRateUtilizationCurveStorage self)\\n    private pure returns (JumpRateUtilizationCurve storage pointer) {\\n        assembly { pointer.slot := self }\\n    }\\n}\",\"keccak256\":\"0xae202813874bc306d51b3dab8194c86f6483bb20bf1f673ddaee16aa8de567ff\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) return Fixed18.wrap(-1 * Fixed18.unwrap(from(m)));\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x613587461ef3437ef33229cdda7d34ea746278721baf06e20b2e43977f43174d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0x860a1c54ea451289abde9ad678d5dc2e92432b17df648f0421bc6ffbf48b00b2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xa12f541b8e2a2a3d5efeebdb3f39caec1db69cb7ce9ad5c6de12235a55a47a2d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ebef1e6c717f565b9ed545a876b5692b4007e6485c99f39d363f7405e591792\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token18 public constant ZERO = Token18.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token18 self) internal pure returns (bool) {\\n        return Token18.unwrap(self) == Token18.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token18 a, Token18 b) internal pure returns (bool) {\\n        return Token18.unwrap(a) ==  Token18.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318b6f49c3225000baeeaeb6a7dde25799d7b5d966fcff2a87b52ddcfc3ae381\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/examples/FloorBAYC.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"@equilibria/root/curve/immutable/XJumpRateUtilizationCurveProvider.sol\\\";\\nimport \\\"../oracle/XOracleProvider.sol\\\";\\nimport \\\"../product/XProductProvider.sol\\\";\\n\\ncontract FloorBAYC is XJumpRateUtilizationCurveProvider, XOracleProvider, XProductProvider {\\n    string public constant name = \\\"Floor BAYC\\\";\\n    string public constant symbol = \\\"fBAYC\\\";\\n\\n    constructor(\\n        IOracleProvider oracle_,\\n        UFixed18 maintenance_,\\n        UFixed18 fundingFee_,\\n        UFixed18 makerFee_,\\n        UFixed18 takerFee_,\\n        UFixed18 makerLimit_,\\n        JumpRateUtilizationCurve memory utilizationCurve_\\n    )\\n    XProductProvider(maintenance_, fundingFee_, makerFee_, takerFee_, makerLimit_)\\n    XOracleProvider(oracle_)\\n    XJumpRateUtilizationCurveProvider(utilizationCurve_)\\n    { } // solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x8cdd2eb85cf67061ff69e3278540a2873523b84640f33fec8583fe20b4e86652\",\"license\":\"Apache-2.0\"},\"contracts/oracle/OracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/perennial/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"@equilibria/root/curve/UtilizationCurveProvider.sol\\\";\\n\\n/**\\n * @title OracleProvider\\n * @notice Abstract contract defining the internal interface for oracle providers.\\n */\\nabstract contract OracleProvider is IOracleProvider, UtilizationCurveProvider {\\n    /**\\n     * @notice Returns the oracle contract address from storage implementation\\n     * @return Oracle contract address\\n     */\\n    function _readOracle() internal virtual view returns (IOracleProvider);\\n\\n    /**\\n     * @notice Returns the transformed oracle version\\n     * @param oracleVersion Oracle version to transform\\n     * @return Transformed oracle version\\n     */\\n    function _transform(OracleVersion memory oracleVersion) internal view virtual returns (OracleVersion memory) {\\n        return OracleVersion({\\n            version: oracleVersion.version,\\n            timestamp: oracleVersion.timestamp,\\n            price: _payoff(oracleVersion.price)\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the transformed oracle price\\n     * @param price Oracle price to transform\\n     * @return Transformed oracle price\\n     */\\n    function _payoff(Fixed18 price) internal view virtual returns (Fixed18) {\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Pass-through hook to call sync() on the oracle provider\\n     */\\n    function sync() external override returns (OracleVersion memory) {\\n        return _transform(_readOracle().sync());\\n    }\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return Current oracle version\\n     */\\n    function currentVersion() external override view returns (OracleVersion memory) {\\n        return _transform(_readOracle().currentVersion());\\n    }\\n\\n    /**\\n     * @notice Returns the oracle version at `oracleVersion`\\n     * @param oracleVersion Oracle version to return for\\n     * @return Oracle version at `oracleVersion` with price transformed by payoff function\\n     */\\n    function atVersion(uint256 oracleVersion) external override view returns (OracleVersion memory) {\\n        return _transform(_readOracle().atVersion(oracleVersion));\\n    }\\n}\\n\",\"keccak256\":\"0x2e49a143df44f7f3ff6ebbea61bd9c3b8425d2912af7f89eb7c6087ac12414e6\",\"license\":\"Apache-2.0\"},\"contracts/oracle/XOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./OracleProvider.sol\\\";\\n\\n/**\\n * @title XOracleProvider\\n * @notice Library for manage storing and surfacing an oracle provider.\\n * @dev Uses an immutable storage pattern to store the oracle address which is more gas efficient,\\n *      but does not allow parameters to be updated over time.\\n */\\nabstract contract XOracleProvider is OracleProvider {\\n    /// @dev The address of the oracle feed for this product\\n    IOracleProvider private immutable _oracle;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param oracle_ Oracle for the product\\n     */\\n    constructor(IOracleProvider oracle_) {\\n        _oracle = oracle_;\\n    }\\n\\n    /**\\n     * @notice Returns the oracle contract address\\n     * @return Oracle contract address\\n     */\\n    function _readOracle() internal override view returns (IOracleProvider) {\\n        return _oracle;\\n    }\\n}\\n\",\"keccak256\":\"0x14b67e6f70c3edcafb58ee2bb9248ed801879c58594af9a84b7f156a06f4c71a\",\"license\":\"Apache-2.0\"},\"contracts/product/ProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/perennial/contracts/interfaces/IProductProvider.sol\\\";\\nimport \\\"@equilibria/root/curve/UtilizationCurveProvider.sol\\\";\\nimport \\\"../oracle/OracleProvider.sol\\\";\\n\\n/**\\n * @title ProductProvider\\n * @notice Abstract contract defining the internal interface for product providers.\\n */\\nabstract contract ProductProvider is IProductProvider, UtilizationCurveProvider, OracleProvider {\\n    /**\\n     * @notice Returns the oracle contract address\\n     * @return Oracle contract address\\n     */\\n    function oracle() external view returns (IOracleProvider) {\\n        return _readOracle();\\n    }\\n\\n    /**\\n     * @notice Returns The per-second rate based on the provided `position`\\n     * @dev Handles 0-maker/taker edge cases\\n     * @param position Position to base utilization on\\n     * @return The per-second rate\\n     */\\n    function rate(Position memory position) external view returns (Fixed18) {\\n        UFixed18 utilization = position.taker.unsafeDiv(position.maker);\\n        Fixed18 annualizedRate = _computeRate(utilization);\\n        return annualizedRate.div(Fixed18Lib.from(365 days));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7c13e9e1ffd8d9469f40862a46c7c96e48baa90579ea1a54b20443f8b5ed09\",\"license\":\"Apache-2.0\"},\"contracts/product/XProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ProductProvider.sol\\\";\\n\\n/**\\n * @title XProductProvider\\n * @notice Library for manage storing and surfacing an product provider.\\n * @dev Uses an immutable storage pattern to store the product provider parameters which is more gas efficient,\\n *      but does not allow parameters to be updated over time.\\n */\\nabstract contract XProductProvider is ProductProvider {\\n    /// @dev The maintenance value\\n    UFixed18 public immutable maintenance;\\n\\n    /// @dev The funding fee value\\n    UFixed18 public immutable fundingFee;\\n\\n    /// @dev The maker fee value\\n    UFixed18 public immutable makerFee;\\n\\n    /// @dev The taker fee value\\n    UFixed18 public immutable takerFee;\\n\\n    /// @dev The maker limit value\\n    UFixed18 public immutable makerLimit;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param maintenance_ Maintenance value\\n     * @param fundingFee_ Funding fee value\\n     * @param makerFee_ Maker fee value\\n     * @param takerFee_ Taker fee value\\n     * @param makerLimit_ Maker limit value\\n     */\\n    constructor(\\n        UFixed18 maintenance_,\\n        UFixed18 fundingFee_,\\n        UFixed18 makerFee_,\\n        UFixed18 takerFee_,\\n        UFixed18 makerLimit_\\n    ) {\\n        maintenance = maintenance_;\\n        fundingFee = fundingFee_;\\n        makerFee = makerFee_;\\n        takerFee = takerFee_;\\n        makerLimit = makerLimit_;\\n    }\\n}\\n\",\"keccak256\":\"0xda44ca560032f90d01470f47829d27e28d63937380c5e69fc6cac90a83b7ce52\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b5060405162001a7138038062001a71833981810160405281019062000038919062000388565b85858585858b868060000151600f0b608081600f0b815250508060200151600f0b60a081600f0b815250508060400151600f0b60c081600f0b8152505080606001516fffffffffffffffffffffffffffffffff1660e0816fffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff168152505050846101208181525050836101408181525050826101608181525050816101808181525050806101a081815250505050505050505050505050506200043c565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000157826200012a565b9050919050565b60006200016b826200014a565b9050919050565b6200017d816200015e565b81146200018957600080fd5b50565b6000815190506200019d8162000172565b92915050565b6000819050919050565b620001b881620001a3565b8114620001c457600080fd5b50565b600081519050620001d881620001ad565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022e82620001e3565b810181811067ffffffffffffffff8211171562000250576200024f620001f4565b5b80604052505050565b6000620002656200011b565b905062000273828262000223565b919050565b600081600f0b9050919050565b620002908162000278565b81146200029c57600080fd5b50565b600081519050620002b08162000285565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b620002dd81620002b6565b8114620002e957600080fd5b50565b600081519050620002fd81620002d2565b92915050565b6000608082840312156200031c576200031b620001de565b5b62000328608062000259565b905060006200033a848285016200029f565b600083015250602062000350848285016200029f565b602083015250604062000366848285016200029f565b60408301525060606200037c84828501620002ec565b60608301525092915050565b6000806000806000806000610140888a031215620003ab57620003aa62000125565b5b6000620003bb8a828b016200018c565b9750506020620003ce8a828b01620001c7565b9650506040620003e18a828b01620001c7565b9550506060620003f48a828b01620001c7565b9450506080620004078a828b01620001c7565b93505060a06200041a8a828b01620001c7565b92505060c06200042d8a828b0162000303565b91505092959891949750929550565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516115b9620004b860003960006102c9015260006102ed015260006105e2015260006103110152600061038a01526000610765015260006105a70152600061057e015260006105550152600061052c01526115b96000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637dc0d1d01161008c5780639d888e86116100665780639d888e8614610216578063a12e1b3314610234578063fc741c7c14610252578063fff6cae914610270576100df565b80637dc0d1d0146101aa5780637ece075d146101c857806395d89b41146101f8576100df565b80635d16e120116100bd5780635d16e1201461013e57806360ec91d61461015c5780636c376cc51461018c576100df565b806306fdde03146100e4578063193775671461010257806343f0179b14610120575b600080fd5b6100ec61028e565b6040516100f99190610c52565b60405180910390f35b61010a6102c7565b6040516101179190610cb9565b60405180910390f35b6101286102eb565b6040516101359190610cb9565b60405180910390f35b61014661030f565b6040516101539190610cb9565b60405180910390f35b61017660048036038101906101719190610ddf565b610333565b6040516101839190610e47565b60405180910390f35b610194610388565b6040516101a19190610cb9565b60405180910390f35b6101b26103ac565b6040516101bf9190610ed7565b60405180910390f35b6101e260048036038101906101dd9190610f1e565b6103bb565b6040516101ef9190610fab565b60405180910390f35b610200610453565b60405161020d9190610c52565b60405180910390f35b61021e61048c565b60405161022b9190610fab565b60405180910390f35b61023c610517565b60405161024991906110a6565b60405180910390f35b61025a6105e0565b6040516102679190610cb9565b60405180910390f35b610278610604565b6040516102859190610fab565b60405180910390f35b6040518060400160405280600a81526020017f466c6f6f7220424159430000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806103518360000151846020015161069190919063ffffffff16565b9050600061035e826106f8565b905061037f6103706301e1338061071b565b8261073890919063ffffffff16565b92505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103b6610761565b905090565b6103c3610b55565b61044c6103ce610761565b73ffffffffffffffffffffffffffffffffffffffff16637ece075d846040518263ffffffff1660e01b815260040161040691906110d0565b606060405180830381865afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190611190565b610789565b9050919050565b6040518060400160405280600581526020017f664241594300000000000000000000000000000000000000000000000000000081525081565b610494610b55565b61051261049f610761565b73ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190611190565b610789565b905090565b61051f610b76565b60405180608001604052807f0000000000000000000000000000000000000000000000000000000000000000600f0b81526020017f0000000000000000000000000000000000000000000000000000000000000000600f0b81526020017f0000000000000000000000000000000000000000000000000000000000000000600f0b81526020017f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16815250905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b61060c610b55565b61068c610617610761565b73ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af1158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190611190565b610789565b905090565b600061069c826107c7565b156106e5576106aa836107c7565b6106d4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106de565b670de0b6b3a76400005b90506106f2565b6106ef83836107d3565b90505b92915050565b600061071482610706610517565b6107fc90919063ffffffff16565b9050919050565b6000670de0b6b3a76400008261073191906111ec565b9050919050565b600081670de0b6b3a76400008461074f91906111ec565b6107599190611332565b905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610791610b55565b604051806060016040528083600001518152602001836020015181526020016107bd84604001516108e1565b8152509050919050565b60008082149050919050565b600081670de0b6b3a7640000846107ea919061139c565b6107f491906113f6565b905092915050565b60008061081e84606001516fffffffffffffffffffffffffffffffff166108eb565b9050610833818461090790919063ffffffff16565b1561086c57610864600061084d8660000151600f0b61091d565b8361085e8860400151600f0b61091d565b8761092a565b9150506108db565b610887670de0b6b3a76400008461090790919063ffffffff16565b156108c7576108bf816108a08660400151600f0b61091d565b670de0b6b3a76400006108b98860200151600f0b61091d565b8761092a565b9150506108db565b6108d78460200151600f0b61091d565b9150505b92915050565b6000819050919050565b6000816fffffffffffffffffffffffffffffffff169050919050565b6000806109148484610a22565b14905092915050565b600081600f0b9050919050565b600061093f868361090790919063ffffffff16565b8061095957506109588483610a6090919063ffffffff16565b5b15610990576040517f0db0f7cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109a58786610a7790919063ffffffff16565b905060006109bc8786610a8d90919063ffffffff16565b905060006109e5836109d78b88610a7790919063ffffffff16565b6107d390919063ffffffff16565b9050610a1488610a066109f784610aa3565b85610b1690919063ffffffff16565b610b3f90919063ffffffff16565b935050505095945050505050565b600080600084849150915080821115610a4057600292505050610a5a565b80821015610a5357600092505050610a5a565b6001925050505b92915050565b60006002610a6e8484610a22565b14905092915050565b60008183610a859190611427565b905092915050565b60008183610a9b919061145b565b905092915050565b6000808290507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610b0d57806040517ea07eb5000000000000000000000000000000000000000000000000000000008152600401610b0491906110d0565b60405180910390fd5b80915050919050565b6000670de0b6b3a76400008284610b2d91906111ec565b610b379190611332565b905092915050565b60008183610b4d91906114ef565b905092915050565b60405180606001604052806000815260200160008152602001600081525090565b60405180608001604052806000600f0b81526020016000600f0b81526020016000600f0b815260200160006fffffffffffffffffffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bf3578082015181840152602081019050610bd8565b83811115610c02576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c2482610bb9565b610c2e8185610bc4565b9350610c3e818560208601610bd5565b610c4781610c08565b840191505092915050565b60006020820190508181036000830152610c6c8184610c19565b905092915050565b6000819050919050565b6000819050919050565b6000610ca3610c9e610c9984610c74565b610c7e565b610c74565b9050919050565b610cb381610c88565b82525050565b6000602082019050610cce6000830184610caa565b92915050565b6000604051905090565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d2082610c08565b810181811067ffffffffffffffff82111715610d3f57610d3e610ce8565b5b80604052505050565b6000610d52610cd4565b9050610d5e8282610d17565b919050565b610d6c81610c74565b8114610d7757600080fd5b50565b600081359050610d8981610d63565b92915050565b600060408284031215610da557610da4610ce3565b5b610daf6040610d48565b90506000610dbf84828501610d7a565b6000830152506020610dd384828501610d7a565b60208301525092915050565b600060408284031215610df557610df4610cde565b5b6000610e0384828501610d8f565b91505092915050565b6000819050919050565b6000610e31610e2c610e2784610e0c565b610c7e565b610e0c565b9050919050565b610e4181610e16565b82525050565b6000602082019050610e5c6000830184610e38565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9d610e98610e9384610e62565b610c7e565b610e62565b9050919050565b6000610eaf82610e82565b9050919050565b6000610ec182610ea4565b9050919050565b610ed181610eb6565b82525050565b6000602082019050610eec6000830184610ec8565b92915050565b610efb81610c74565b8114610f0657600080fd5b50565b600081359050610f1881610ef2565b92915050565b600060208284031215610f3457610f33610cde565b5b6000610f4284828501610f09565b91505092915050565b610f5481610c74565b82525050565b610f6381610e16565b82525050565b606082016000820151610f7f6000850182610f4b565b506020820151610f926020850182610f4b565b506040820151610fa56040850182610f5a565b50505050565b6000606082019050610fc06000830184610f69565b92915050565b600081600f0b9050919050565b6000610fee610fe9610fe484610fc6565b610c7e565b610fc6565b9050919050565b610ffe81610fd3565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061103b61103661103184611004565b610c7e565b611004565b9050919050565b61104b81611020565b82525050565b6080820160008201516110676000850182610ff5565b50602082015161107a6020850182610ff5565b50604082015161108d6040850182610ff5565b5060608201516110a06060850182611042565b50505050565b60006080820190506110bb6000830184611051565b92915050565b6110ca81610c74565b82525050565b60006020820190506110e560008301846110c1565b92915050565b6000815190506110fa81610ef2565b92915050565b61110981610e0c565b811461111457600080fd5b50565b60008151905061112681611100565b92915050565b60006060828403121561114257611141610ce3565b5b61114c6060610d48565b9050600061115c848285016110eb565b6000830152506020611170848285016110eb565b602083015250604061118484828501611117565b60408301525092915050565b6000606082840312156111a6576111a5610cde565b5b60006111b48482850161112c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111f782610e0c565b915061120283610e0c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611241576112406111bd565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561127e5761127d6111bd565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112bb576112ba6111bd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112f8576112f76111bd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061133d82610e0c565b915061134883610e0c565b92508261135857611357611303565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611391576113906111bd565b5b828205905092915050565b60006113a782610c74565b91506113b283610c74565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113eb576113ea6111bd565b5b828202905092915050565b600061140182610c74565b915061140c83610c74565b92508261141c5761141b611303565b5b828204905092915050565b600061143282610c74565b915061143d83610c74565b9250828210156114505761144f6111bd565b5b828203905092915050565b600061146682610e0c565b915061147183610e0c565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156114ac576114ab6111bd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156114e4576114e36111bd565b5b828203905092915050565b60006114fa82610e0c565b915061150583610e0c565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156115405761153f6111bd565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615611578576115776111bd565b5b82820190509291505056fea2646970667358221220625a4868d42cc65a7a710c5488975f9a22eeaf1db1396c0b617c4478a657da2464736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80637dc0d1d01161008c5780639d888e86116100665780639d888e8614610216578063a12e1b3314610234578063fc741c7c14610252578063fff6cae914610270576100df565b80637dc0d1d0146101aa5780637ece075d146101c857806395d89b41146101f8576100df565b80635d16e120116100bd5780635d16e1201461013e57806360ec91d61461015c5780636c376cc51461018c576100df565b806306fdde03146100e4578063193775671461010257806343f0179b14610120575b600080fd5b6100ec61028e565b6040516100f99190610c52565b60405180910390f35b61010a6102c7565b6040516101179190610cb9565b60405180910390f35b6101286102eb565b6040516101359190610cb9565b60405180910390f35b61014661030f565b6040516101539190610cb9565b60405180910390f35b61017660048036038101906101719190610ddf565b610333565b6040516101839190610e47565b60405180910390f35b610194610388565b6040516101a19190610cb9565b60405180910390f35b6101b26103ac565b6040516101bf9190610ed7565b60405180910390f35b6101e260048036038101906101dd9190610f1e565b6103bb565b6040516101ef9190610fab565b60405180910390f35b610200610453565b60405161020d9190610c52565b60405180910390f35b61021e61048c565b60405161022b9190610fab565b60405180910390f35b61023c610517565b60405161024991906110a6565b60405180910390f35b61025a6105e0565b6040516102679190610cb9565b60405180910390f35b610278610604565b6040516102859190610fab565b60405180910390f35b6040518060400160405280600a81526020017f466c6f6f7220424159430000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806103518360000151846020015161069190919063ffffffff16565b9050600061035e826106f8565b905061037f6103706301e1338061071b565b8261073890919063ffffffff16565b92505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103b6610761565b905090565b6103c3610b55565b61044c6103ce610761565b73ffffffffffffffffffffffffffffffffffffffff16637ece075d846040518263ffffffff1660e01b815260040161040691906110d0565b606060405180830381865afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190611190565b610789565b9050919050565b6040518060400160405280600581526020017f664241594300000000000000000000000000000000000000000000000000000081525081565b610494610b55565b61051261049f610761565b73ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190611190565b610789565b905090565b61051f610b76565b60405180608001604052807f0000000000000000000000000000000000000000000000000000000000000000600f0b81526020017f0000000000000000000000000000000000000000000000000000000000000000600f0b81526020017f0000000000000000000000000000000000000000000000000000000000000000600f0b81526020017f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16815250905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b61060c610b55565b61068c610617610761565b73ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af1158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190611190565b610789565b905090565b600061069c826107c7565b156106e5576106aa836107c7565b6106d4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106de565b670de0b6b3a76400005b90506106f2565b6106ef83836107d3565b90505b92915050565b600061071482610706610517565b6107fc90919063ffffffff16565b9050919050565b6000670de0b6b3a76400008261073191906111ec565b9050919050565b600081670de0b6b3a76400008461074f91906111ec565b6107599190611332565b905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610791610b55565b604051806060016040528083600001518152602001836020015181526020016107bd84604001516108e1565b8152509050919050565b60008082149050919050565b600081670de0b6b3a7640000846107ea919061139c565b6107f491906113f6565b905092915050565b60008061081e84606001516fffffffffffffffffffffffffffffffff166108eb565b9050610833818461090790919063ffffffff16565b1561086c57610864600061084d8660000151600f0b61091d565b8361085e8860400151600f0b61091d565b8761092a565b9150506108db565b610887670de0b6b3a76400008461090790919063ffffffff16565b156108c7576108bf816108a08660400151600f0b61091d565b670de0b6b3a76400006108b98860200151600f0b61091d565b8761092a565b9150506108db565b6108d78460200151600f0b61091d565b9150505b92915050565b6000819050919050565b6000816fffffffffffffffffffffffffffffffff169050919050565b6000806109148484610a22565b14905092915050565b600081600f0b9050919050565b600061093f868361090790919063ffffffff16565b8061095957506109588483610a6090919063ffffffff16565b5b15610990576040517f0db0f7cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109a58786610a7790919063ffffffff16565b905060006109bc8786610a8d90919063ffffffff16565b905060006109e5836109d78b88610a7790919063ffffffff16565b6107d390919063ffffffff16565b9050610a1488610a066109f784610aa3565b85610b1690919063ffffffff16565b610b3f90919063ffffffff16565b935050505095945050505050565b600080600084849150915080821115610a4057600292505050610a5a565b80821015610a5357600092505050610a5a565b6001925050505b92915050565b60006002610a6e8484610a22565b14905092915050565b60008183610a859190611427565b905092915050565b60008183610a9b919061145b565b905092915050565b6000808290507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610b0d57806040517ea07eb5000000000000000000000000000000000000000000000000000000008152600401610b0491906110d0565b60405180910390fd5b80915050919050565b6000670de0b6b3a76400008284610b2d91906111ec565b610b379190611332565b905092915050565b60008183610b4d91906114ef565b905092915050565b60405180606001604052806000815260200160008152602001600081525090565b60405180608001604052806000600f0b81526020016000600f0b81526020016000600f0b815260200160006fffffffffffffffffffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bf3578082015181840152602081019050610bd8565b83811115610c02576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c2482610bb9565b610c2e8185610bc4565b9350610c3e818560208601610bd5565b610c4781610c08565b840191505092915050565b60006020820190508181036000830152610c6c8184610c19565b905092915050565b6000819050919050565b6000819050919050565b6000610ca3610c9e610c9984610c74565b610c7e565b610c74565b9050919050565b610cb381610c88565b82525050565b6000602082019050610cce6000830184610caa565b92915050565b6000604051905090565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d2082610c08565b810181811067ffffffffffffffff82111715610d3f57610d3e610ce8565b5b80604052505050565b6000610d52610cd4565b9050610d5e8282610d17565b919050565b610d6c81610c74565b8114610d7757600080fd5b50565b600081359050610d8981610d63565b92915050565b600060408284031215610da557610da4610ce3565b5b610daf6040610d48565b90506000610dbf84828501610d7a565b6000830152506020610dd384828501610d7a565b60208301525092915050565b600060408284031215610df557610df4610cde565b5b6000610e0384828501610d8f565b91505092915050565b6000819050919050565b6000610e31610e2c610e2784610e0c565b610c7e565b610e0c565b9050919050565b610e4181610e16565b82525050565b6000602082019050610e5c6000830184610e38565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9d610e98610e9384610e62565b610c7e565b610e62565b9050919050565b6000610eaf82610e82565b9050919050565b6000610ec182610ea4565b9050919050565b610ed181610eb6565b82525050565b6000602082019050610eec6000830184610ec8565b92915050565b610efb81610c74565b8114610f0657600080fd5b50565b600081359050610f1881610ef2565b92915050565b600060208284031215610f3457610f33610cde565b5b6000610f4284828501610f09565b91505092915050565b610f5481610c74565b82525050565b610f6381610e16565b82525050565b606082016000820151610f7f6000850182610f4b565b506020820151610f926020850182610f4b565b506040820151610fa56040850182610f5a565b50505050565b6000606082019050610fc06000830184610f69565b92915050565b600081600f0b9050919050565b6000610fee610fe9610fe484610fc6565b610c7e565b610fc6565b9050919050565b610ffe81610fd3565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061103b61103661103184611004565b610c7e565b611004565b9050919050565b61104b81611020565b82525050565b6080820160008201516110676000850182610ff5565b50602082015161107a6020850182610ff5565b50604082015161108d6040850182610ff5565b5060608201516110a06060850182611042565b50505050565b60006080820190506110bb6000830184611051565b92915050565b6110ca81610c74565b82525050565b60006020820190506110e560008301846110c1565b92915050565b6000815190506110fa81610ef2565b92915050565b61110981610e0c565b811461111457600080fd5b50565b60008151905061112681611100565b92915050565b60006060828403121561114257611141610ce3565b5b61114c6060610d48565b9050600061115c848285016110eb565b6000830152506020611170848285016110eb565b602083015250604061118484828501611117565b60408301525092915050565b6000606082840312156111a6576111a5610cde565b5b60006111b48482850161112c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111f782610e0c565b915061120283610e0c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611241576112406111bd565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561127e5761127d6111bd565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112bb576112ba6111bd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112f8576112f76111bd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061133d82610e0c565b915061134883610e0c565b92508261135857611357611303565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611391576113906111bd565b5b828205905092915050565b60006113a782610c74565b91506113b283610c74565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113eb576113ea6111bd565b5b828202905092915050565b600061140182610c74565b915061140c83610c74565b92508261141c5761141b611303565b5b828204905092915050565b600061143282610c74565b915061143d83610c74565b9250828210156114505761144f6111bd565b5b828203905092915050565b600061146682610e0c565b915061147183610e0c565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156114ac576114ab6111bd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156114e4576114e36111bd565b5b828203905092915050565b60006114fa82610e0c565b915061150583610e0c565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156115405761153f6111bd565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615611578576115776111bd565b5b82820190509291505056fea2646970667358221220625a4868d42cc65a7a710c5488975f9a22eeaf1db1396c0b617c4478a657da2464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "atVersion(uint256)": {
        "params": {
          "oracleVersion": "Oracle version to return for"
        },
        "returns": {
          "_0": "Oracle version at `oracleVersion` with price transformed by payoff function"
        }
      },
      "currentVersion()": {
        "returns": {
          "_0": "Current oracle version"
        }
      },
      "oracle()": {
        "returns": {
          "_0": "Oracle contract address"
        }
      },
      "rate((uint256,uint256))": {
        "details": "Handles 0-maker/taker edge cases",
        "params": {
          "position": "Position to base utilization on"
        },
        "returns": {
          "_0": "The per-second rate"
        }
      },
      "utilizationCurve()": {
        "returns": {
          "_0": "Current utilization curve parameter set"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "atVersion(uint256)": {
        "notice": "Returns the oracle version at `oracleVersion`"
      },
      "currentVersion()": {
        "notice": "Returns the current oracle version"
      },
      "oracle()": {
        "notice": "Returns the oracle contract address"
      },
      "rate((uint256,uint256))": {
        "notice": "Returns The per-second rate based on the provided `position`"
      },
      "sync()": {
        "notice": "Pass-through hook to call sync() on the oracle provider"
      },
      "utilizationCurve()": {
        "notice": "Returns the utilization curve parameter set"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
