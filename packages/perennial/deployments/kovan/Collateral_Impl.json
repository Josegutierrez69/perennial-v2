{
  "address": "0xb47cD3a89773354ea27dC073D9636a849DAD4B03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "Token18",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "totalMaintenance",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "totalCollateral",
          "type": "uint256"
        }
      ],
      "name": "CollateralCantLiquidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralInsufficientCollateralError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralUnderLimitError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralZeroAddressError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed18OverflowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidControllerError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotCollateralError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotOwnerError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotProductError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "NotProductOwnerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausedError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "UInitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableZeroVersionError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UReentrancyGuardReentrantCallError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "Fixed18",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "newShortfall",
          "type": "uint256"
        }
      ],
      "name": "AccountSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "productFee",
          "type": "uint256"
        }
      ],
      "name": "ProductSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ShortfallResolution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "liquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "liquidatableNext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "resolveShortfall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "Fixed18",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "settleAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "settleProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "shortfall",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "Token18",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c830bc8801a8ca3dbb796daaf7fedce4eee0c2fae4ad25985f7c56b392fd820",
  "receipt": {
    "to": null,
    "from": "0xb779541EcE2bFFF7CB803cfcddfA220A753879b6",
    "contractAddress": "0xb47cD3a89773354ea27dC073D9636a849DAD4B03",
    "transactionIndex": 2,
    "gasUsed": "1999858",
    "logsBloom": "0x
    "blockHash": "0x26d7b587a098b93471b86de134848df35241e31e288150e5cbade0a76bb204c8",
    "transactionHash": "0x3c830bc8801a8ca3dbb796daaf7fedce4eee0c2fae4ad25985f7c56b392fd820",
    "logs": [],
    "blockNumber": 31412997,
    "cumulativeGasUsed": "2554823",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x1e7d42D73291A9580F1f9b6483928319CE1c3d75"],
  "numDeployments": 1,
  "solcInputHash": "669da26b2049a035994bb66b35ec132a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"Token18\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"totalMaintenance\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"name\":\"CollateralCantLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralInsufficientCollateralError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralUnderLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralZeroAddressError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed18OverflowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidControllerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotCollateralError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotOwnerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotProductError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"NotProductOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"UInitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableZeroVersionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UReentrancyGuardReentrantCallError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"Fixed18\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"newShortfall\",\"type\":\"uint256\"}],\"name\":\"AccountSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"productFee\",\"type\":\"uint256\"}],\"name\":\"ProductSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShortfallResolution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"liquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"liquidatableNext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"resolveShortfall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"Fixed18\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"settleAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"settleProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"shortfall\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"Token18\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collateral(address)\":{\"params\":{\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"The total balance of collateral in the product\"}},\"collateral(address,address)\":{\"params\":{\"account\":\"Account to return for\",\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"The balance of the collateral account\"}},\"constructor\":{\"details\":\"Called at implementation instantiate and constant for that implementation.\",\"params\":{\"token_\":\"Collateral ERC20 stablecoin address\"}},\"depositTo(address,address,uint256)\":{\"params\":{\"account\":\"Account to deposit the collateral for\",\"amount\":\"Amount of collateral to deposit\",\"product\":\"Product to credit the collateral to\"}},\"initialize(address)\":{\"details\":\"Must be called atomically as part of the upgradeable proxy deployment to      avoid front-running\",\"params\":{\"controller_\":\"Factory contract address\"}},\"liquidatable(address,address)\":{\"params\":{\"account\":\"Account to return for\",\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"Whether the account can be liquidated\"}},\"liquidatableNext(address,address)\":{\"details\":\"Takes into account the current pre-position on the account\",\"params\":{\"account\":\"Account to return for\",\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"Whether the account can be liquidated\"}},\"liquidate(address,address)\":{\"details\":\"Account must be under-collateralized, fee returned immediately to `msg.sender`\",\"params\":{\"account\":\"Account to liquidate\",\"product\":\"Product to liquidate for\"}},\"resolveShortfall(address,uint256)\":{\"details\":\"Shortfall is a measure of settled insolvency in the market      This hook can be used by the product owner or an insurance fund to re-capitalize an insolvent market\",\"params\":{\"amount\":\"Amount of shortfall to resolve\",\"product\":\"Product to resolve shortfall for\"}},\"settleAccount(address,int256)\":{\"details\":\"Callable only by the corresponding product as part of the settlement flywheel.      Moves collateral within a product, any collateral leaving the product due to      fees has already been accounted for in the settleProduct flywheel.      Debits in excess of the account balance get recorded as shortfall, and can be      resolved by the product owner as needed.\",\"params\":{\"account\":\"Account to credit\",\"amount\":\"Amount to credit the account (can be negative)\"}},\"settleProduct(uint256)\":{\"details\":\"Callable only by the corresponding product as part of the settlement flywheel      Removes collateral from the product as fees.\",\"params\":{\"amount\":\"Amount to debit from the account\"}},\"shortfall(address)\":{\"params\":{\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"The current shortfall of the product\"}},\"withdrawTo(address,address,uint256)\":{\"params\":{\"account\":\"Account to withdraw the collateral to\",\"amount\":\"Amount of collateral to withdraw\",\"product\":\"Product to withdraw the collateral from\"}}},\"stateVariables\":{\"_products\":{\"details\":\"Per product collateral state\"},\"fees\":{\"details\":\"Protocol and product fees collected, but not yet claimed\"},\"token\":{\"details\":\"ERC20 stablecoin for collateral\"}},\"title\":\"Collateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimFee()\":{\"notice\":\"Claims all of `msg.sender`'s fees\"},\"collateral(address)\":{\"notice\":\"Returns the total balance of `product`'s collateral\"},\"collateral(address,address)\":{\"notice\":\"Returns the balance of `account`'s `product` collateral account\"},\"constructor\":{\"notice\":\"Initializes the immutable contract state\"},\"depositTo(address,address,uint256)\":{\"notice\":\"Deposits `amount` collateral from `msg.sender` to `account`'s `product`         account\"},\"initialize(address)\":{\"notice\":\"Initializes the contract state\"},\"liquidatable(address,address)\":{\"notice\":\"Returns whether `account`'s `product` collateral account can be liquidated\"},\"liquidatableNext(address,address)\":{\"notice\":\"Returns whether `account`'s `product` collateral account can be liquidated         after the next oracle version settlement\"},\"liquidate(address,address)\":{\"notice\":\"Liquidates `account`'s `product` collateral account\"},\"resolveShortfall(address,uint256)\":{\"notice\":\"Injects additional collateral into a product to resolve shortfall\"},\"settleAccount(address,int256)\":{\"notice\":\"Credits `amount` to `account`'s collateral account\"},\"settleProduct(uint256)\":{\"notice\":\"Debits `amount` from product's total collateral account\"},\"shortfall(address)\":{\"notice\":\"Returns the current shortfall of `product`'s collateral\"},\"withdrawTo(address,address,uint256)\":{\"notice\":\"Withdraws `amount` collateral from `msg.sender`'s `product` account         and sends it to `account`\"}},\"notice\":\"Manages logic and state for all collateral accounts in the protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collateral/Collateral.sol\":\"Collateral\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@equilibria/root/control/unstructured/UInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @title UInitializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `UInitializable` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract UInitializable {\\n    error UInitializableZeroVersionError();\\n    error UInitializableAlreadyInitializedError(uint256 version);\\n    error UInitializableNotInitializingError();\\n\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UInitializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.UInitializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert UInitializableZeroVersionError();\\n        if (_version.read() >= version) revert UInitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert UInitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf88a17a4d1c8126df114a8e3ca095702699d1c270bf75eb49f595a681cf4b9c2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/control/unstructured/UReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UInitializable.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * NOTE: This contract has been extended from the Open Zeppelin library to include an\\n *       unstructured storage pattern, so that it can be safely mixed in with upgradeable\\n *       contracts without affecting their storage patterns through inheritance.\\n */\\nabstract contract UReentrancyGuard is UInitializable {\\n    error UReentrancyGuardReentrantCallError();\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    /**\\n     * @dev unstructured storage slot for the reentrancy status\\n     */\\n    Uint256Storage private constant _status = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UReentrancyGuard.status\\\"));\\n\\n    /**\\n     * @dev Initializes the contract setting the status to _NOT_ENTERED.\\n     */\\n    function __UReentrancyGuard__initialize() internal onlyInitializer {\\n        _status.store(_NOT_ENTERED);\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        if (_status.read() == _ENTERED) revert UReentrancyGuardReentrantCallError();\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status.store(_ENTERED);\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status.store(_NOT_ENTERED);\\n    }\\n}\\n\",\"keccak256\":\"0x4962245ca8fdda3dc40c0f942a3568d90fb69428a6927b058018b01c90eb9fc9\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) return Fixed18.wrap(-1 * Fixed18.unwrap(from(m)));\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc92cd7d606135a23077ed1921eb565bc06857e5fdeaa755b7e71586dd8565c2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0x860a1c54ea451289abde9ad678d5dc2e92432b17df648f0421bc6ffbf48b00b2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xa12f541b8e2a2a3d5efeebdb3f39caec1db69cb7ce9ad5c6de12235a55a47a2d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f0058ff9e2a9f585346ca060b6dc511062284b4e67ac6f69e5aea6e71205b00\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/UStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\nlibrary BoolStorageLib {\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(BoolStorage self, bool value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Uint256StorageLib {\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Int256StorageLib {\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary AddressStorageLib {\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(AddressStorage self, address value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Bytes32StorageLib {\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5013ded297cc72266fa648a83658cf5a508cd537d78a0260cd31d18e9e523017\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token\\ntype Token is address;\\nusing TokenLib for Token global;\\ntype TokenStorage is bytes32;\\nusing TokenStorageLib for TokenStorage global;\\n\\n/**\\n * @title TokenLib\\n * @notice Library to manage Ether and ERC20s that is compliant with the fixed-decimal types.\\n * @dev Normalizes token operations with Ether operations (using a magic Ether address)\\n *      Automatically converts from token decimal-Base amounts to Base-18 UFixed18 amounts, with optional rounding\\n */\\nlibrary TokenLib {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    error TokenPullEtherError();\\n    error TokenApproveEtherError();\\n\\n    uint256 private constant BASE = 1e18;\\n    Token public constant ETHER = Token.wrap(address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\\n\\n    /**\\n     * @notice Returns whether a token is the Ether address\\n     * @param self Token to check for\\n     * @return Whether the token is Ether\\n     */\\n    function isEther(Token self) internal pure returns (bool) {\\n        return Token.unwrap(self) == Token.unwrap(ETHER);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token self, address grantee) internal {\\n        if (isEther(self)) revert TokenApproveEtherError();\\n        IERC20(Token.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token self, address grantee, UFixed18 amount) internal {\\n        if (isEther(self)) revert TokenApproveEtherError();\\n        IERC20(Token.unwrap(self)).safeApprove(grantee, toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function approve(Token self, address grantee, UFixed18 amount, bool roundUp) internal {\\n        if (isEther(self)) revert TokenApproveEtherError();\\n        IERC20(Token.unwrap(self)).safeApprove(grantee, toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token self, address recipient, UFixed18 amount) internal {\\n        isEther(self)\\n            ? Address.sendValue(payable(recipient), UFixed18.unwrap(amount))\\n            : IERC20(Token.unwrap(self)).safeTransfer(recipient, toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function push(Token self, address recipient, UFixed18 amount, bool roundUp) internal {\\n        isEther(self)\\n            ? Address.sendValue(payable(recipient), UFixed18.unwrap(amount))\\n            : IERC20(Token.unwrap(self)).safeTransfer(recipient, toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token self, address benefactor, UFixed18 amount) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, address(this), toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function pull(Token self, address benefactor, UFixed18 amount, bool roundUp) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, address(this), toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token self, address benefactor, address recipient, UFixed18 amount) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, recipient, toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function pullTo(Token self, address benefactor, address recipient, UFixed18 amount, bool roundUp) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, recipient, toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token self) internal view returns (string memory) {\\n        return isEther(self) ? \\\"Ether\\\" : IERC20Metadata(Token.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token self) internal view returns (string memory) {\\n        return isEther(self) ? \\\"ETH\\\" : IERC20Metadata(Token.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the decimals of the token\\n     * @param self Token to check for\\n     * @return Token decimals\\n     */\\n    function decimals(Token self) internal view returns (uint256) {\\n        return isEther(self) ? 18 : uint256(IERC20Metadata(Token.unwrap(self)).decimals());\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token self, address account) internal view returns (UFixed18) {\\n        return isEther(self) ?\\n            UFixed18.wrap(account.balance) :\\n            fromTokenAmount(self, IERC20(Token.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal amount into the token amount according to\\n     *         it's defined decimals\\n     * @param self Token to check for\\n     * @param amount Amount to convert\\n     * @return Normalized token amount\\n     */\\n    function toTokenAmount(Token self, UFixed18 amount, bool roundUp) private view returns (uint256) {\\n        uint256 tokenDecimals = decimals(self);\\n\\n        if (tokenDecimals < 18) {\\n            uint256 offset = 10 ** (18 - tokenDecimals);\\n            return roundUp ? Math.ceilDiv(UFixed18.unwrap(amount), offset) : UFixed18.unwrap(amount) / offset;\\n        } else {\\n            uint256 offset = 10 ** (tokenDecimals - 18);\\n            return UFixed18.unwrap(amount) * offset;\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts the token amount into the unsigned fixed-decimal amount according to\\n     *         it's defined decimals\\n     * @param self Token to check for\\n     * @param amount Token amount to convert\\n     * @return Normalized unsigned fixed-decimal amount\\n     */\\n    function fromTokenAmount(Token self, uint256 amount) private view returns (UFixed18) {\\n        UFixed18 conversion = UFixed18Lib.ratio(BASE, 10 ** uint256(decimals(self)));\\n        return UFixed18.wrap(amount).mul(conversion);\\n    }\\n}\\n\\nlibrary TokenStorageLib {\\n    function read(TokenStorage self) internal view returns (Token value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(TokenStorage self, Token value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\",\"keccak256\":\"0x537a15969c9c094fdda69c6c9405e68403c4a12dc94c25196c7222fca563fe2a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant DECIMALS = 18;\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the decimals of the token\\n     * @return Token decimals\\n     */\\n    function decimals(Token18) internal pure returns (uint256) {\\n        return DECIMALS;\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2803297fd08ae91f94b928bcaa34273d792891a2d4c8ed43b01be580669e8ee3\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/collateral/Collateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@equilibria/root/control/unstructured/UReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/ICollateral.sol\\\";\\nimport \\\"./types/OptimisticLedger.sol\\\";\\nimport \\\"../controller/UControllerProvider.sol\\\";\\n\\n/**\\n * @title Collateral\\n * @notice Manages logic and state for all collateral accounts in the protocol.\\n */\\ncontract Collateral is ICollateral, UInitializable, UControllerProvider, UReentrancyGuard {\\n    /// @dev ERC20 stablecoin for collateral\\n    Token18 public immutable token;\\n\\n    /// @dev Per product collateral state\\n    mapping(IProduct => OptimisticLedger) private _products;\\n\\n    /// @dev Protocol and product fees collected, but not yet claimed\\n    mapping(address => UFixed18) public fees;\\n\\n    /**\\n     * @notice Initializes the immutable contract state\\n     * @dev Called at implementation instantiate and constant for that implementation.\\n     * @param token_ Collateral ERC20 stablecoin address\\n     */\\n    constructor(Token18 token_) {\\n        token = token_;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @dev Must be called atomically as part of the upgradeable proxy deployment to\\n     *      avoid front-running\\n     * @param controller_ Factory contract address\\n     */\\n    function initialize(IController controller_) external initializer(1) {\\n        __UControllerProvider__initialize(controller_);\\n        __UReentrancyGuard__initialize();\\n    }\\n\\n    /**\\n     * @notice Deposits `amount` collateral from `msg.sender` to `account`'s `product`\\n     *         account\\n     * @param account Account to deposit the collateral for\\n     * @param product Product to credit the collateral to\\n     * @param amount Amount of collateral to deposit\\n     */\\n    function depositTo(address account, IProduct product, UFixed18 amount)\\n    external\\n    nonReentrant\\n    notPausedProduct(product)\\n    notZeroAddress(account)\\n    isProduct(product)\\n    collateralInvariant(account, product)\\n    {\\n        _products[product].creditAccount(account, amount);\\n        token.pull(msg.sender, amount);\\n\\n        emit Deposit(account, product, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws `amount` collateral from `msg.sender`'s `product` account\\n     *         and sends it to `account`\\n     * @param account Account to withdraw the collateral to\\n     * @param product Product to withdraw the collateral from\\n     * @param amount Amount of collateral to withdraw\\n     */\\n    function withdrawTo(address account, IProduct product, UFixed18 amount)\\n    external\\n    nonReentrant\\n    notPausedProduct(product)\\n    notZeroAddress(account)\\n    isProduct(product)\\n    settleForAccount(msg.sender, product)\\n    collateralInvariant(msg.sender, product)\\n    maintenanceInvariant(msg.sender, product)\\n    {\\n        _products[product].debitAccount(msg.sender, amount);\\n        token.push(account, amount);\\n\\n        emit Withdrawal(msg.sender, product, amount);\\n    }\\n\\n    /**\\n     * @notice Liquidates `account`'s `product` collateral account\\n     * @dev Account must be under-collateralized, fee returned immediately to `msg.sender`\\n     * @param account Account to liquidate\\n     * @param product Product to liquidate for\\n     */\\n    function liquidate(address account, IProduct product)\\n    external\\n    nonReentrant\\n    notPausedProduct(product)\\n    isProduct(product)\\n    settleForAccount(account, product)\\n    {\\n        UFixed18 totalMaintenance = product.maintenance(account);\\n        UFixed18 totalCollateral = collateral(account, product);\\n\\n        if (!totalMaintenance.gt(totalCollateral))\\n            revert CollateralCantLiquidate(totalMaintenance, totalCollateral);\\n\\n        product.closeAll(account);\\n\\n        // claim fee\\n        UFixed18 liquidationFee = controller().liquidationFee();\\n        UFixed18 fee = UFixed18Lib.min(totalCollateral, totalMaintenance.mul(liquidationFee));\\n\\n        _products[product].debitAccount(account, fee);\\n        token.push(msg.sender, fee);\\n\\n        emit Liquidation(account, product, msg.sender, fee);\\n    }\\n\\n    /**\\n     * @notice Credits `amount` to `account`'s collateral account\\n     * @dev Callable only by the corresponding product as part of the settlement flywheel.\\n     *      Moves collateral within a product, any collateral leaving the product due to\\n     *      fees has already been accounted for in the settleProduct flywheel.\\n     *      Debits in excess of the account balance get recorded as shortfall, and can be\\n     *      resolved by the product owner as needed.\\n     * @param account Account to credit\\n     * @param amount Amount to credit the account (can be negative)\\n     */\\n    function settleAccount(address account, Fixed18 amount) external onlyProduct {\\n        IProduct product = IProduct(msg.sender);\\n\\n        UFixed18 newShortfall = _products[product].settleAccount(account, amount);\\n\\n        emit AccountSettle(product, account, amount, newShortfall);\\n    }\\n\\n    /**\\n     * @notice Debits `amount` from product's total collateral account\\n     * @dev Callable only by the corresponding product as part of the settlement flywheel\\n     *      Removes collateral from the product as fees.\\n     * @param amount Amount to debit from the account\\n     */\\n    function settleProduct(UFixed18 amount) external onlyProduct {\\n        (IProduct product, IController controller) = (IProduct(msg.sender), controller());\\n\\n        address protocolTreasury = controller.treasury();\\n        address productTreasury = controller.treasury(product);\\n\\n        UFixed18 protocolFee = amount.mul(controller.protocolFee());\\n        UFixed18 productFee = amount.sub(protocolFee);\\n\\n        _products[product].debit(amount);\\n        fees[protocolTreasury] = fees[protocolTreasury].add(protocolFee);\\n        fees[productTreasury] = fees[productTreasury].add(productFee);\\n\\n        emit ProductSettle(product, protocolFee, productFee);\\n    }\\n\\n    /**\\n     * @notice Returns the balance of `account`'s `product` collateral account\\n     * @param account Account to return for\\n     * @param product Product to return for\\n     * @return The balance of the collateral account\\n     */\\n    function collateral(address account, IProduct product) public view returns (UFixed18) {\\n        return _products[product].balances[account];\\n    }\\n\\n    /**\\n     * @notice Returns the total balance of `product`'s collateral\\n     * @param product Product to return for\\n     * @return The total balance of collateral in the product\\n     */\\n    function collateral(IProduct product) external view returns (UFixed18) {\\n        return _products[product].total;\\n    }\\n\\n    /**\\n     * @notice Returns the current shortfall of `product`'s collateral\\n     * @param product Product to return for\\n     * @return The current shortfall of the product\\n     */\\n    function shortfall(IProduct product) external view returns (UFixed18) {\\n        return _products[product].shortfall;\\n    }\\n\\n    /**\\n     * @notice Returns whether `account`'s `product` collateral account can be liquidated\\n     * @param account Account to return for\\n     * @param product Product to return for\\n     * @return Whether the account can be liquidated\\n     */\\n    function liquidatable(address account, IProduct product) external view returns (bool) {\\n        return product.maintenance(account).gt(collateral(account, product));\\n    }\\n\\n    /**\\n     * @notice Returns whether `account`'s `product` collateral account can be liquidated\\n     *         after the next oracle version settlement\\n     * @dev Takes into account the current pre-position on the account\\n     * @param account Account to return for\\n     * @param product Product to return for\\n     * @return Whether the account can be liquidated\\n     */\\n    function liquidatableNext(address account, IProduct product) external view returns (bool) {\\n        return product.maintenanceNext(account).gt(collateral(account, product));\\n    }\\n\\n    /**\\n     * @notice Injects additional collateral into a product to resolve shortfall\\n     * @dev Shortfall is a measure of settled insolvency in the market\\n     *      This hook can be used by the product owner or an insurance fund to re-capitalize an insolvent market\\n     * @param product Product to resolve shortfall for\\n     * @param amount Amount of shortfall to resolve\\n     */\\n    function resolveShortfall(IProduct product, UFixed18 amount) external notPausedProduct(product) {\\n        _products[product].resolve(amount);\\n        token.pull(msg.sender, amount);\\n\\n        emit ShortfallResolution(product, amount);\\n    }\\n\\n    /**\\n     * @notice Claims all of `msg.sender`'s fees\\n     */\\n    function claimFee() external notPaused {\\n        UFixed18 amount = fees[msg.sender];\\n\\n        fees[msg.sender] = UFixed18Lib.ZERO;\\n        token.push(msg.sender, amount);\\n\\n        emit FeeClaim(msg.sender, amount);\\n    }\\n\\n    /// @dev Ensure that the address is non-zero\\n    modifier notZeroAddress(address account) {\\n        if (account == address(0)) revert CollateralZeroAddressError();\\n\\n        _;\\n    }\\n\\n    /// @dev Ensure that the user has sufficient margin for both current and next maintenance\\n    modifier maintenanceInvariant(address account, IProduct product) {\\n        _;\\n\\n        UFixed18 maintenance = product.maintenance(account);\\n        UFixed18 maintenanceNext = product.maintenanceNext(account);\\n\\n        if (UFixed18Lib.max(maintenance, maintenanceNext).gt(collateral(account, product)))\\n            revert CollateralInsufficientCollateralError();\\n    }\\n\\n    /// @dev Ensure that the account is either empty or above the collateral minimum\\n    modifier collateralInvariant(address account, IProduct product) {\\n        _;\\n\\n        UFixed18 accountCollateral = collateral(account, product);\\n        if (!accountCollateral.isZero() && accountCollateral.lt(controller().minCollateral()))\\n            revert CollateralUnderLimitError();\\n    }\\n\\n    /// @dev Helper to fully settle an account's state\\n    modifier settleForAccount(address account, IProduct product) {\\n        product.settle();\\n        product.settleAccount(account);\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x65a1b6bc0782543e4c9e441d1c37ad8c2b0be6e86ad95f8039c82360e1cf4853\",\"license\":\"Apache-2.0\"},\"contracts/collateral/types/OptimisticLedger.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\n\\n/// @dev OptimisticLedger type\\nstruct OptimisticLedger {\\n    /// @dev Individual account collateral balances\\n    mapping(address => UFixed18) balances;\\n\\n    /// @dev Total ledger collateral balance\\n    UFixed18 total;\\n\\n    /// @dev Total ledger collateral shortfall\\n    UFixed18 shortfall;\\n}\\nusing OptimisticLedgerLib for OptimisticLedger global;\\n\\n/**\\n * @title OptimisticLedgerLib\\n * @notice Library that manages a global vs account ledger where the global ledger is settled separately,\\n *         and ahead of, the user-level accounts.\\n * @dev    Ensures that no more collateral leaves the ledger than goes it, while allowing user-level accounts\\n *         to settle as a follow up step. Overdrafts on the user-level are accounted as \\\"shortall\\\". Shortfall\\n *         in the system is the quantity of insolvency that can be optionally resolved by the ledger owner.\\n *         Until the shortfall is resolved, collateral may be withdrawn from the ledger on a FCFS basis. However\\n *         once the ledger total has been depleted, users will not be able to withdraw even if they have non-zero\\n *         user level balances until the shortfall is resolved, recapitalizing the ledger.\\n */\\nlibrary OptimisticLedgerLib {\\n    /**\\n     * @notice Credits `account` with `amount` collateral\\n     * @param self The struct to operate on\\n     * @param account Account to credit collateral to\\n     * @param amount Amount of collateral to credit\\n     */\\n    function creditAccount(OptimisticLedger storage self, address account, UFixed18 amount) internal {\\n        self.balances[account] = self.balances[account].add(amount);\\n        self.total = self.total.add(amount);\\n    }\\n\\n    /**\\n     * @notice Debits `account` `amount` collateral\\n     * @param self The struct to operate on\\n     * @param account Account to debit collateral from\\n     * @param amount Amount of collateral to debit\\n     */\\n    function debitAccount(OptimisticLedger storage self, address account, UFixed18 amount) internal {\\n        self.balances[account] = self.balances[account].sub(amount);\\n        self.total = self.total.sub(amount);\\n    }\\n\\n    /**\\n     * @notice Credits `account` with `amount` collateral\\n     * @dev Funds come from inside the product, not totals are updated\\n     *      Shortfall is created if more funds are debited from an account than exist\\n     * @param self The struct to operate on\\n     * @param account Account to credit collateral to\\n     * @param amount Amount of collateral to credit\\n     * @return newShortfall Any new shortfall incurred during this settlement\\n     */\\n    function settleAccount(OptimisticLedger storage self, address account, Fixed18 amount)\\n    internal returns (UFixed18 newShortfall) {\\n        Fixed18 newBalance = Fixed18Lib.from(self.balances[account]).add(amount);\\n\\n        if (newBalance.sign() == -1) {\\n            newShortfall = newBalance.abs();\\n            newBalance = Fixed18Lib.ZERO;\\n        }\\n\\n        self.balances[account] = newBalance.abs();\\n        self.shortfall = self.shortfall.add(newShortfall);\\n    }\\n\\n    /**\\n     * @notice Debits ledger globally `amount` collateral\\n     * @dev Removes balance from total that is accounted for elsewhere (e.g. product-level accumulators)\\n     * @param self The struct to operate on\\n     * @param amount Amount of collateral to debit\\n     */\\n    function debit(OptimisticLedger storage self, UFixed18 amount) internal {\\n        self.total = self.total.sub(amount);\\n    }\\n\\n    /**\\n     * @notice Reduces the amount of collateral shortfall in the ledger\\n     * @param self The struct to operate on\\n     * @param amount Amount of shortfall to resolve\\n     */\\n    function resolve(OptimisticLedger storage self, UFixed18 amount) internal {\\n        self.shortfall = self.shortfall.sub(amount);\\n        self.total = self.total.add(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x003ba154ceab23449b3f182e8b5e2e1a8f2bcc7d7868d59ced8e15a862f32919\",\"license\":\"Apache-2.0\"},\"contracts/controller/UControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@equilibria/root/storage/UStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IProduct.sol\\\";\\n\\n/**\\n * @title UControllerProvider\\n * @notice Mix-in that manages a controller pointer and associated permissioning modifiers.\\n * @dev Uses unstructured storage so that it is safe to mix-in to upgreadable contracts without modifying\\n *      their storage layout.\\n */\\nabstract contract UControllerProvider is UInitializable {\\n    error AlreadyInitializedError();\\n    error NotOwnerError(address sender);\\n    error NotProductError(address sender);\\n    error NotCollateralError(address sender);\\n    error NotProductOwnerError(address sender, IProduct product);\\n    error PausedError();\\n    error InvalidControllerError();\\n\\n    /// @dev The controller contract address\\n    AddressStorage private constant _controller = AddressStorage.wrap(keccak256(\\\"equilibria.perennial.UControllerProvider.controller\\\"));\\n    function controller() public view returns (IController) { return IController(_controller.read()); }\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param controller_ Protocol Controller contract address\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UControllerProvider__initialize(IController controller_) internal onlyInitializer {\\n        if (!Address.isContract(address(controller_))) revert InvalidControllerError();\\n        _controller.store(address(controller_));\\n    }\\n\\n    /// @dev Only allow a valid product contract to call\\n    modifier onlyProduct {\\n        if (!controller().isProduct(IProduct(msg.sender))) revert NotProductError(msg.sender);\\n\\n        _;\\n    }\\n\\n    /// @dev Verify that `product` is a valid product contract\\n    modifier isProduct(IProduct product) {\\n        if (!controller().isProduct(product)) revert NotProductError(address(product));\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow the Collateral contract to call\\n    modifier onlyCollateral {\\n        if (msg.sender != address(controller().collateral())) revert NotCollateralError(msg.sender);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow the protocol owner contract to call\\n    modifier onlyOwner() {\\n        if (msg.sender != controller().owner()) revert NotOwnerError(msg.sender);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow if the protocol is currently unpaused\\n    modifier notPaused() {\\n        if (controller().paused()) revert PausedError();\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow if both the protocol and the product are currently unpaused\\n    modifier notPausedProduct(IProduct product) {\\n        if (controller().paused(product)) revert PausedError();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3b9057d2c808e7bf7b438794409063af1e1dbce4694eb28a70f22cc82743de1f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface ICollateral {\\n    event Deposit(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event Withdrawal(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event AccountSettle(IProduct indexed product, address indexed account, Fixed18 amount, UFixed18 newShortfall);\\n    event ProductSettle(IProduct indexed product, UFixed18 protocolFee, UFixed18 productFee);\\n    event Liquidation(address indexed user, IProduct indexed product, address liquidator, UFixed18 fee);\\n    event ShortfallResolution(IProduct indexed product, UFixed18 amount);\\n    event FeeClaim(address indexed account, UFixed18 amount);\\n\\n    error CollateralCantLiquidate(UFixed18 totalMaintenance, UFixed18 totalCollateral);\\n    error CollateralInsufficientCollateralError();\\n    error CollateralUnderLimitError();\\n    error CollateralZeroAddressError();\\n\\n    function token() external view returns (Token18);\\n    function fees(address account) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function depositTo(address account, IProduct product, UFixed18 amount) external;\\n    function withdrawTo(address account, IProduct product, UFixed18 amount) external;\\n    function liquidate(address account, IProduct product) external;\\n    function settleAccount(address account, Fixed18 amount) external;\\n    function settleProduct(UFixed18 amount) external;\\n    function collateral(address account, IProduct product) external view returns (UFixed18);\\n    function collateral(IProduct product) external view returns (UFixed18);\\n    function shortfall(IProduct product) external view returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external view returns (bool);\\n    function liquidatableNext(address account, IProduct product) external view returns (bool);\\n    function resolveShortfall(IProduct product, UFixed18 amount) external;\\n    function claimFee() external;\\n}\\n\",\"keccak256\":\"0x5411fbe8f10eeb3d1a2fdf3ad4ce16a13d4bd889c737abd40cd3ebc4eb90cfff\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IIncentivizer.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IController {\\n    /// @dev Coordinator of a one or many products\\n    struct Coordinator {\\n        /// @dev Pending owner of the product, can accept ownership\\n        address pendingOwner;\\n\\n        /// @dev Owner of the product, allowed to update select parameters\\n        address owner;\\n\\n        /// @dev Treasury of the product, collects fees\\n        address treasury;\\n\\n        /// @dev the address that is allowed to pause the coordinated products (0-address defaults to owner)\\n        address pauser;\\n\\n        /// @dev Whether the coordinated products are paused\\n        bool paused;\\n    }\\n\\n    event CollateralUpdated(ICollateral newCollateral);\\n    event IncentivizerUpdated(IIncentivizer newIncentivizer);\\n    event ProductBeaconUpdated(IBeacon newProductBeacon);\\n    event ProtocolFeeUpdated(UFixed18 newProtocolFee);\\n    event MinFundingFeeUpdated(UFixed18 newMinFundingFee);\\n    event LiquidationFeeUpdated(UFixed18 newLiquidationFee);\\n    event IncentivizationFeeUpdated(UFixed18 newIncentivizationFee);\\n    event MinCollateralUpdated(UFixed18 newMinCollateral);\\n    event ProgramsPerProductUpdated(uint256 newProgramsPerProduct);\\n    event CoordinatorPendingOwnerUpdated(uint256 indexed coordinatorId, address newPendingOwner);\\n    event CoordinatorOwnerUpdated(uint256 indexed coordinatorId, address newOwner);\\n    event CoordinatorTreasuryUpdated(uint256 indexed coordinatorId, address newTreasury);\\n    event CoordinatorPauserUpdated(uint256 indexed coordinatorId, address pauser);\\n    event CoordinatorPausedUpdated(uint256 indexed coordinatorId, bool paused);\\n    event AllowedUpdated(uint256 indexed coordinatorId, bool allowed);\\n    event CoordinatorCreated(uint256 indexed coordinatorId, address owner);\\n    event ProductCreated(IProduct indexed product, IProductProvider provider);\\n\\n    error ControllerAlreadyInitializedError();\\n    error ControllerNoZeroCoordinatorError();\\n    error ControllerNotAllowedError();\\n    error ControllerNotPauserError(uint256 coordinatorId);\\n    error ControllerNotOwnerError(uint256 controllerId);\\n    error ControllerNotPendingOwnerError(uint256 controllerId);\\n    error ControllerInvalidProtocolFeeError();\\n    error ControllerInvalidMinFundingFeeError();\\n    error ControllerInvalidLiquidationFeeError();\\n    error ControllerInvalidIncentivizationFeeError();\\n\\n    function collateral() external view returns (ICollateral);\\n    function incentivizer() external view returns (IIncentivizer);\\n    function productBeacon() external view returns (IBeacon);\\n    function coordinators(uint256 collateralId) external view returns (Coordinator memory);\\n    function coordinatorFor(IProduct product) external view returns (uint256);\\n    function allowed(uint256 collateralId) external view returns (bool);\\n    function protocolFee() external view returns (UFixed18);\\n    function minFundingFee() external view returns (UFixed18);\\n    function liquidationFee() external view returns (UFixed18);\\n    function incentivizationFee() external view returns (UFixed18);\\n    function minCollateral() external view returns (UFixed18);\\n    function programsPerProduct() external view returns (uint256);\\n    function initialize(ICollateral collateral_, IIncentivizer incentivizer_, IBeacon productBeacon_) external;\\n    function createCoordinator() external returns (uint256);\\n    function updateCoordinatorPendingOwner(uint256 coordinatorId, address newPendingOwner) external;\\n    function acceptCoordinatorOwner(uint256 coordinatorId) external;\\n    function updateCoordinatorTreasury(uint256 coordinatorId, address newTreasury) external;\\n    function updateCoordinatorPauser(uint256 coordinatorId, address newPauser) external;\\n    function updateCoordinatorPaused(uint256 coordinatorId, bool newPaused) external;\\n    function createProduct(uint256 coordinatorId, IProductProvider provider) external returns (IProduct);\\n    function updateCollateral(ICollateral newCollateral) external;\\n    function updateIncentivizer(IIncentivizer newIncentivizer) external;\\n    function updateProductBeacon(IBeacon newProductBeacon) external;\\n    function updateProtocolFee(UFixed18 newProtocolFee) external;\\n    function updateMinFundingFee(UFixed18 newMinFundingFee) external;\\n    function updateLiquidationFee(UFixed18 newLiquidationFee) external;\\n    function updateIncentivizationFee(UFixed18 newIncentivizationFee) external;\\n    function updateMinCollateral(UFixed18 newMinCollateral) external;\\n    function updateProgramsPerProduct(uint256 newProductsPerProduct) external;\\n    function updateAllowed(uint256 coordinatorId, bool newAllowed) external;\\n    function isProduct(IProduct product) external view returns (bool);\\n    function owner() external view returns (address);\\n    function owner(uint256 coordinatorId) external view returns (address);\\n    function owner(IProduct product) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasury(uint256 coordinatorId) external view returns (address);\\n    function treasury(IProduct product) external view returns (address);\\n    function pauser() external view returns (address);\\n    function pauser(uint256 coordinatorId) external view returns (address);\\n    function pauser(IProduct product) external view returns (address);\\n    function paused() external view returns (bool);\\n    function paused(uint256 coordinatorId) external view returns (bool);\\n    function paused(IProduct product) external view returns (bool);\\n}\",\"keccak256\":\"0x79bc31fa1c607fdd8d53e162452b9b9a3ba232834b57a74779d306d496cf8c23\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IIncentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/ProgramInfo.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IIncentivizer {\\n    event ProgramCompleted(uint256 indexed programId, uint256 versionComplete);\\n    event ProgramClosed(uint256 indexed programId, UFixed18 amount);\\n    event ProgramCreated(uint256 indexed programId, IProduct product, Token token, UFixed18 amountMaker, UFixed18 amountTaker, uint256 start, uint256 duration, uint256 grace, UFixed18 fee);\\n    event Claim(address indexed account, uint256 indexed programId, UFixed18 amount);\\n    event FeeClaim(Token indexed token, UFixed18 amount);\\n\\n    error IncentivizerProgramNotClosableError();\\n    error IncentivizerTooManyProgramsError();\\n    error IncentivizerProgramPausedError(address sender, uint256 programId);\\n    error IncentivizerNotProgramOwnerError(address sender, uint256 programId);\\n    error IncentivizerInvalidProgramError(uint256 programId);\\n\\n    function programInfos(uint256 programId) external view returns (ProgramInfo memory);\\n    function fees(Token token) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function create(ProgramInfo calldata info) external returns (uint256);\\n    function end(uint256 programId) external;\\n    function close(uint256 programId) external;\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function syncAccount(address account) external;\\n    function claim(IProduct product) external;\\n    function claim(uint256 programId) external;\\n    function claimFee(Token[] calldata tokens) external;\\n    function unclaimed(address account, uint256 programId) external view returns (UFixed18);\\n    function latestVersion(address account, uint256 programId) external view returns (uint256);\\n    function settled(address account, uint256 programId) external view returns (UFixed18);\\n    function available(uint256 programId) external view returns (UFixed18);\\n    function versionComplete(uint256 programId) external view returns (uint256);\\n    function closed(uint256 programId) external view returns (bool);\\n    function programsForLength(IProduct product) external view returns (uint256);\\n    function programsForAt(IProduct product, uint256 index) external view returns (uint256);\\n    function owner(uint256 programId) external view returns (address);\\n    function treasury(uint256 programId) external view returns (address);\\n}\",\"keccak256\":\"0xa8103111b857f81b34603bf9c59d48c366dcdebffc08610fd25507c6d54e1762\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    function sync() external returns (OracleVersion memory);\\n    function currentVersion() external view returns (OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0x22257e85b93c8224f06c093b195b610cc5da001bb3f8ad97bd0dbf6c0434b7ba\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./types/PrePosition.sol\\\";\\nimport \\\"./types/Accumulator.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IProduct {\\n    event Settle(uint256 preVersion, uint256 toVersion);\\n    event AccountSettle(address indexed account, uint256 preVersion, uint256 toVersion);\\n    event MakeOpened(address indexed account, UFixed18 amount);\\n    event TakeOpened(address indexed account, UFixed18 amount);\\n    event MakeClosed(address indexed account, UFixed18 amount);\\n    event TakeClosed(address indexed account, UFixed18 amount);\\n\\n    error ProductInsufficientLiquidityError(UFixed18 socializationFactor);\\n    error ProductDoubleSidedError();\\n    error ProductOverClosedError();\\n    error ProductInsufficientCollateralError();\\n    error ProductInLiquidationError();\\n    error ProductMakerOverLimitError();\\n    error ProductOracleBootstrappingError();\\n\\n    function productProvider() external view returns (IProductProvider);\\n    function initialize(IProductProvider productProvider_) external;\\n    function settle() external;\\n    function settleAccount(address account) external;\\n    function openTake(UFixed18 amount) external;\\n    function closeTake(UFixed18 amount) external;\\n    function openMake(UFixed18 amount) external;\\n    function closeMake(UFixed18 amount) external;\\n    function closeAll(address account) external;\\n    function maintenance(address account) external view returns (UFixed18);\\n    function maintenanceNext(address account) external view returns (UFixed18);\\n    function isClosed(address account) external view returns (bool);\\n    function isLiquidating(address account) external view returns (bool);\\n    function position(address account) external view returns (Position memory);\\n    function pre(address account) external view returns (PrePosition memory);\\n    function latestVersion() external view returns (uint256);\\n    function positionAtVersion(uint256 oracleVersion) external view returns (Position memory);\\n    function pre() external view returns (PrePosition memory);\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function latestVersion(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc668cdee0ac1e3e818fa0067681b067c11277ad3e729b7a32852c778b87bf0\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\n\\ninterface IProductProvider is IOracleProvider {\\n    function oracle() external view returns (IOracleProvider);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function rate(Position memory position) external view returns (Fixed18);\\n    function maintenance() external view returns (UFixed18);\\n    function fundingFee() external view returns (UFixed18);\\n    function makerFee() external view returns (UFixed18);\\n    function takerFee() external view returns (UFixed18);\\n    function makerLimit() external view returns (UFixed18);\\n}\\n\",\"keccak256\":\"0x67102367daec489222beb994a4c6cf2628352dbfc1ddb742d9d01f930ca09183\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Accumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./PackedAccumulator.sol\\\";\\n\\n/// @dev Accumulator type\\nstruct Accumulator {\\n    /// @dev maker accumulator per share\\n    Fixed18 maker;\\n    /// @dev taker accumulator per share\\n    Fixed18 taker;\\n}\\nusing AccumulatorLib for Accumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that surfaces math operations for the Accumulator type.\\n * @dev Accumulators track the cumulative change in position value over time for the maker and taker positions\\n *      respectively. Account-level accumulators can then use two of these values `a` and `a'` to compute the\\n *      change in position value since last sync. This change in value is then used to compute P&L and fees.\\n */\\nlibrary AccumulatorLib {\\n    /**\\n     * @notice Creates a packed accumulator from an accumulator\\n     * @param self an accumulator\\n     * @return New packed accumulator\\n     */\\n    function pack(Accumulator memory self) internal pure returns (PackedAccumulator memory) {\\n        return PackedAccumulator({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Adds two accumulators together\\n     * @param a The first accumulator to sum\\n     * @param b The second accumulator to sum\\n     * @return The resulting summed accumulator\\n     */\\n    function add(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts accumulator `b` from `a`\\n     * @param a The accumulator to subtract from\\n     * @param b The accumulator to subtract\\n     * @return The resulting subtracted accumulator\\n     */\\n    function sub(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies two accumulators together\\n     * @param a The first accumulator to multiply\\n     * @param b The second accumulator to multiply\\n     * @return The resulting multiplied accumulator\\n     */\\n    function mul(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.mul(b.maker), taker: a.taker.mul(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single accumulator\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Accumulator memory self) internal pure returns (Fixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n}\\n\",\"keccak256\":\"0x419fbe153e5569ce6ed9a4d563e99a99fa7476257f33faddabbe9582efd42d5b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev PackedAccumulator type\\nstruct PackedAccumulator {\\n    /// @dev maker accumulator per share\\n    PackedFixed18 maker;\\n    /// @dev taker accumulator per share\\n    PackedFixed18 taker;\\n}\\nusing PackedAccumulatorLib for PackedAccumulator global;\\n\\n/**\\n * @title PackedAccumulatorLib\\n * @dev A packed version of the Accumulator which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Accumulator type.\\n */\\nlibrary PackedAccumulatorLib {\\n    /**\\n     * @notice Creates an accumulator from a packed accumulator\\n     * @param self packed accumulator\\n     * @return New accumulator\\n     */\\n    function unpack(PackedAccumulator memory self) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0xe104c4b277f0247afbf22dc31278fa4514911e0fbe89beacac9d199c83a44a2f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedUFixed18.sol\\\";\\nimport \\\"./Position.sol\\\";\\n\\n/// @dev PackedPosition type\\nstruct PackedPosition {\\n    /// @dev Quantity of the maker position\\n    PackedUFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    PackedUFixed18 taker;\\n}\\nusing PackedPositionLib for PackedPosition global;\\n\\n/**\\n * @title PackedPositionLib\\n * @dev A packed version of the Position which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Position type.\\n */\\nlibrary PackedPositionLib {\\n    /**\\n     * @notice Creates an position from a packed position\\n     * @param self packed position\\n     * @return New position\\n     */\\n    function unpack(PackedPosition memory self) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0x89b33d7d89e77dd130a744f8b2bb592d001a12c030e09b99b7cb6226d2b1343b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\nimport \\\"./PrePosition.sol\\\";\\nimport \\\"./PackedPosition.sol\\\";\\n\\n/// @dev Position type\\nstruct Position {\\n    /// @dev Quantity of the maker position\\n    UFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    UFixed18 taker;\\n}\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Library that surfaces math and settlement computations for the Position type.\\n * @dev Positions track the current quantity of the account's maker and taker positions respectively\\n *      denominated as a unit of the product's payoff function.\\n */\\nlibrary PositionLib {\\n    /**\\n     * @notice Creates a packed position from an position\\n     * @param self A position\\n     * @return New packed position\\n     */\\n    function pack(Position memory self) internal pure returns (PackedPosition memory) {\\n        return PackedPosition({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Returns whether the position is fully empty\\n     * @param self A position\\n     * @return Whether the position is empty\\n     */\\n    function isEmpty(Position memory self) internal pure returns (bool) {\\n        return self.maker.isZero() && self.taker.isZero();\\n    }\\n\\n    /**\\n     * @notice Adds position `a` and `b` together, returning the result\\n     * @param a The first position to sum\\n     * @param b The second position to sum\\n     * @return Resulting summed position\\n     */\\n    function add(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts position `b` from `a`, returning the result\\n     * @param a The position to subtract from\\n     * @param b The position to subtract\\n     * @return Resulting subtracted position\\n     */\\n    function sub(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies position `self` by accumulator `accumulator` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param accumulator The accumulator to multiply by\\n     * @return Resulting multiplied accumulator\\n     */\\n    function mul(Position memory self, Accumulator memory accumulator) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).mul(accumulator.maker),\\n            taker: Fixed18Lib.from(self.taker).mul(accumulator.taker)\\n        });\\n    }\\n\\n    /**\\n     * @notice Scales position `self` by fixed-decimal `scale` and returns the resulting position\\n     * @param self The Position to operate on\\n     * @param scale The Fixed-decimal to scale by\\n     * @return Resulting scaled position\\n     */\\n    function mul(Position memory self, UFixed18 scale) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.mul(scale), taker: self.taker.mul(scale)});\\n    }\\n\\n    /**\\n     * @notice Divides position `self` by `b` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param b The number to divide by\\n     * @return Resulting divided accumulator\\n     */\\n    function div(Position memory self, uint256 b) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).div(Fixed18Lib.from(UFixed18Lib.from(b))),\\n            taker: Fixed18Lib.from(self.taker).div(Fixed18Lib.from(UFixed18Lib.from(b)))\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of `self`'s maker and taker values\\n     * @param self The struct to operate on\\n     * @return Resulting maximum value\\n     */\\n    function max(Position memory self) internal pure returns (UFixed18) {\\n        return UFixed18Lib.max(self.maker, self.taker);\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single position\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Position memory self) internal pure returns (UFixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n\\n    /**\\n     * @notice Computes the next position after the pending-settlement position delta is included\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @return Next Position\\n     */\\n    function next(Position memory self, PrePosition memory pre) internal pure returns (Position memory) {\\n        return sub(add(self, pre.openPosition), pre.closePosition);\\n    }\\n\\n    /**\\n     * @notice Returns the settled position at oracle version `toOracleVersion`\\n     * @dev Checks if a new position is ready to be settled based on the provided `toOracleVersion`\\n     *      and `pre` and returns accordingly\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return Settled position at oracle version\\n     * @return Fee accrued from opening or closing the position\\n     * @return Whether a new position was settled\\n     */\\n    function settled(\\n        Position memory self,\\n        PrePosition memory pre,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (Position memory, UFixed18, bool) {\\n        return pre.canSettle(toOracleVersion) ? (next(self, pre), pre.computeFee(provider, toOracleVersion), true) : (self, UFixed18Lib.ZERO, false);\\n    }\\n\\n    /**\\n     * @notice Returns the socialization factor for the current position\\n     * @dev Socialization account for the case where `taker` > `maker` temporarily due to a liquidation\\n     *      on the maker side. This dampens the taker's exposure pro-rata to ensure that the maker side\\n     *      is never exposed over 1 x short.\\n     * @param self The Position to operate on\\n     * @return Socialization factor\\n     */\\n    function socializationFactor(Position memory self) internal pure returns (UFixed18) {\\n        return self.taker.isZero() ? UFixed18Lib.ONE : UFixed18Lib.min(UFixed18Lib.ONE, self.maker.div(self.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x3daae0f4184ae21e9883d8a87853ce39b53893ecb37a5bbb32f94b3b9973a347\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PrePosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"./ProductProvider.sol\\\";\\n\\n/// @dev PrePosition type\\nstruct PrePosition {\\n    /// @dev Oracle version at which the new position delta was recorded\\n    uint256 oracleVersion;\\n\\n    /// @dev Size of position to open at oracle version\\n    Position openPosition;\\n\\n    /// @dev Size of position to close at oracle version\\n    Position closePosition;\\n}\\nusing PrePositionLib for PrePosition global;\\n\\n/**\\n * @title PrePositionLib\\n * @notice Library that manages a pre-settlement position delta.\\n * @dev PrePositions track the currently awaiting-settlement deltas to a settled Position. These are\\n *      Primarily necessary to introduce lag into the settlement system such that oracle lag cannot be\\n *      gamed to a user's advantage. When a user opens or closes a new position, it sits as a PrePosition\\n *      for one oracle version until it's settle into the Position, making it then effective. PrePositions\\n *      are automatically settled at the correct oracle version even if a flywheel call doesn't happen until\\n *      several version into the future by using the historical version lookups in the corresponding \\\"Versioned\\\"\\n *      global state types.\\n */\\nlibrary PrePositionLib {\\n    using ProductProviderLib for IProductProvider;\\n\\n    /**\\n     * @notice Returns whether there is no pending-settlement position delta\\n     * @dev Can be \\\"empty\\\" even with a non-zero oracleVersion if a position is opened and\\n     *      closed in the same version netting out to a zero position delta\\n     * @param self The struct to operate on\\n     * @return Whether the pending-settlement position delta is empty\\n     */\\n    function isEmpty(PrePosition memory self) internal pure returns (bool) {\\n        return self.openPosition.isEmpty() && self.closePosition.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The position amount to open\\n     */\\n    function openMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.maker = self.openPosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The maker position amount to close\\n     */\\n    function closeMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.maker = self.closePosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to open\\n     */\\n    function openTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.taker = self.openPosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netTake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to close\\n     */\\n    function closeTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.taker = self.closePosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netTake(self);\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the maker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function netMake(PrePosition storage self) private {\\n        if (self.openPosition.maker.gt(self.closePosition.maker)) {\\n            self.openPosition.maker = self.openPosition.maker.sub(self.closePosition.maker);\\n            self.closePosition.maker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.maker = self.closePosition.maker.sub(self.openPosition.maker);\\n            self.openPosition.maker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the taker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function netTake(PrePosition storage self) private {\\n        if (self.openPosition.taker.gt(self.closePosition.taker)) {\\n            self.openPosition.taker = self.openPosition.taker.sub(self.closePosition.taker);\\n            self.closePosition.taker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.taker = self.closePosition.taker.sub(self.openPosition.taker);\\n            self.openPosition.taker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the the pending position delta can be settled at version `toOracleVersion`\\n     * @dev Pending-settlement positions deltas can be settled (1) oracle version after they are recorded\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The potential oracle version to settle\\n     * @return Whether the position delta can be settled\\n     */\\n    function canSettle(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (bool) {\\n        return !isEmpty(self) && toOracleVersion.version > self.oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Computes the fee incurred for opening or closing the pending-settlement position\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version at which settlement takes place\\n     * @return positionFee The maker / taker fee incurred\\n     */\\n    function computeFee(\\n        PrePosition memory self,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (UFixed18) {\\n        Position memory positionDelta = self.openPosition.add(self.closePosition);\\n\\n        (UFixed18 makerNotional, UFixed18 takerNotional) = (\\n            Fixed18Lib.from(positionDelta.maker).mul(toOracleVersion.price).abs(),\\n            Fixed18Lib.from(positionDelta.taker).mul(toOracleVersion.price).abs()\\n        );\\n\\n        return makerNotional.mul(provider.safeMakerFee()).add(takerNotional.mul(provider.safeTakerFee()));\\n    }\\n\\n    /**\\n     * @notice Computes the next oracle version to settle\\n     * @dev - If there is no pending-settlement position delta, returns the current oracle version\\n     *      - If the pending-settlement position delta is not yet ready to be settled, returns the current oracle version\\n     *      - Otherwise returns the oracle version at which the pending-settlement position delta can be first settled\\n     *\\n     *      Corresponds to point (b) in the Position settlement flow\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @return Next oracle version to settle\\n     */\\n    function oracleVersionToSettle(PrePosition storage self, uint256 currentVersion) internal view returns (uint256) {\\n        uint256 next = self.oracleVersion + 1;\\n\\n        if (next == 1) return currentVersion;             // no pre position\\n        if (next > currentVersion) return currentVersion; // pre in future\\n        return next;                                      // settle pre\\n    }\\n}\\n\",\"keccak256\":\"0x518e0e663046150cca4f0b88fdcf861b1283455d0ce0e7ea908996f476b45fcb\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"../IProductProvider.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title ProductProviderLib\\n * @notice Library that adds a safeguard wrapper to certain product parameters.\\n * @dev Product providers are semi-untrusted as they contain custom code from the product owners. Owners\\n *      have full control over this parameter-setting code, however there are some \\\"known ranges\\\" that\\n *      a parameter cannot be outside of (i.e. a fee being over 100%).\\n */\\nlibrary ProductProviderLib {\\n    /**\\n     * @notice Returns the minimum funding fee parameter with a capped range for safety\\n     * @dev Caps controller.minFundingFee() <= self.minFundingFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @param controller The protocol Factory contract\\n     * @return Safe minimum funding fee parameter\\n     */\\n    function safeFundingFee(IProductProvider self, IController controller) internal view returns (UFixed18) {\\n        return self.fundingFee().max(controller.minFundingFee()).min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the maker fee parameter with a capped range for safety\\n     * @dev Caps self.makerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe maker fee parameter\\n     */\\n    function safeMakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.makerFee().min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the taker fee parameter with a capped range for safety\\n     * @dev Caps self.takerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe taker fee parameter\\n     */\\n    function safeTakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.takerFee().min(UFixed18Lib.ONE);\\n    }\\n}\\n\",\"keccak256\":\"0x614330e1b42b84df30d9a240ce54a692948815d7b13446c86c63361936cedf5d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProgramInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\nstruct ProgramInfo {\\n    /// @dev Amount of total maker and taker rewards\\n    Position amount;\\n\\n    /// @dev start timestamp of the program\\n    uint256 start;\\n\\n    /// @dev duration of the program (in seconds)\\n    uint256 duration;\\n\\n    /// @dev grace period the program where funds can still be claimed (in seconds)\\n    uint256 grace;\\n\\n    /// @dev Product market contract to be incentivized\\n    IProduct product;\\n\\n    /// @dev Reward ERC20 token contract\\n    Token token;\\n}\\nusing ProgramInfoLib for ProgramInfo global;\\n\\nlibrary ProgramInfoLib {\\n    uint256 private constant MIN_DURATION = 1 days;\\n    uint256 private constant MAX_DURATION = 2 * 365 days;\\n    uint256 private constant MIN_GRACE = 7 days;\\n    uint256 private constant MAX_GRACE = 30 days;\\n\\n    error ProgramAlreadyStartedError();\\n    error ProgramInvalidDurationError();\\n    error ProgramInvalidGraceError();\\n\\n    /**\\n     * @notice Validates and creates a new Program\\n     * @param fee Global Incentivizer fee\\n     * @param info Un-sanitized static program information\\n     * @return programInfo Validated static program information with fee excluded\\n     * @return programFee Fee amount for the program\\n     */\\n    function create(UFixed18 fee, ProgramInfo memory info)\\n    internal view returns (ProgramInfo memory programInfo, UFixed18 programFee) {\\n        if (isStarted(info, block.timestamp)) revert ProgramAlreadyStartedError();\\n        if (info.duration < MIN_DURATION || info.duration > MAX_DURATION) revert ProgramInvalidDurationError();\\n        if (info.grace < MIN_GRACE || info.grace > MAX_GRACE) revert ProgramInvalidGraceError();\\n\\n        Position memory amountAfterFee = info.amount.mul(UFixed18Lib.ONE.sub(fee));\\n\\n        programInfo = ProgramInfo({\\n            start: info.start,\\n            duration: info.duration,\\n            grace: info.grace,\\n\\n            product: info.product,\\n            token: info.token,\\n            amount: amountAfterFee\\n        });\\n        programFee = info.amount.sub(amountAfterFee).sum();\\n    }\\n\\n    /**\\n     * @notice Returns the maker and taker amounts per position share\\n     * @param self The ProgramInfo to operate on\\n     * @return programFee Amounts per share\\n     */\\n    function amountPerShare(ProgramInfo memory self) internal pure returns (Accumulator memory) {\\n        return self.amount.div(self.duration);\\n    }\\n\\n    /**\\n     * @notice Returns whether the program has started by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program has started\\n     */\\n    function isStarted(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= self.start;\\n    }\\n\\n    /**\\n     * @notice Returns whether the program is completed by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program is completed\\n     */\\n    function isComplete(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= (self.start + self.duration);\\n    }\\n}\\n\",\"keccak256\":\"0x1cc229d67e81e34a7d50fcaba343aba4dd490cee046ee3ed88a436c69c4f1dc0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620023f7380380620023f783398101604081905261003191610042565b6001600160a01b0316608052610072565b60006020828403121561005457600080fd5b81516001600160a01b038116811461006b57600080fd5b9392505050565b608051612346620000b1600039600081816102b201528181610ab701528181610c0901528181610f1c01528181611487015261174601526123466000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063c9cb48de11610097578063f213159c11610066578063f213159c1461025a578063f77c47911461026d578063faaebd211461028d578063fc0c546a146102ad57600080fd5b8063c9cb48de146101e9578063ca70d300146101fc578063cc218ece1461020f578063e41191801461024757600080fd5b8063a5fdc5de116100d3578063a5fdc5de1461015d578063b4d6f78114610197578063c3b35a7e146101c3578063c4d66de8146101d657600080fd5b80637f3dd53b1461010557806382df39de1461011a57806386b9d81f1461014257806399d32fc414610155575b600080fd5b610118610113366004612052565b6102d4565b005b61012d610128366004612080565b6105c0565b60405190151581526020015b60405180910390f35b610118610150366004612080565b610664565b610118610b67565b61018961016b3660046120b9565b6001600160a01b031660009081526020819052604090206001015490565b604051908152602001610139565b6101896101a53660046120b9565b6001600160a01b031660009081526020819052604090206002015490565b6101186101d13660046120d6565b610c70565b6101186101e43660046120b9565b6111d1565b6101186101f7366004612117565b6112bc565b61011861020a366004612117565b6113c5565b61018961021d366004612080565b6001600160a01b038082166000908152602081815260408083209386168352929052205492915050565b61012d610255366004612080565b6114f6565b6101186102683660046120d6565b61154e565b61027561184b565b6040516001600160a01b039091168152602001610139565b61018961029b3660046120b9565b60016020526000908152604090205481565b6102757f000000000000000000000000000000000000000000000000000000000000000081565b6102dc61184b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103469190612143565b61036a57604051634d53256560e01b81523360048201526024015b60405180910390fd5b6000803361037661184b565b915091506000816001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190612165565b6040517f2d809cb60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919250600091841690632d809cb690602401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190612165565b905060006104d7846001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190612182565b879061187a565b905060006104e58783611899565b6001600160a01b038716600090815260208190526040902090915061050a90886118a5565b6001600160a01b03841660009081526001602052604090205461052d90836118c0565b6001600160a01b03808616600090815260016020526040808220939093559085168152205461055c90826118c0565b6001600160a01b03808516600090815260016020908152604091829020939093558051858152928301849052908816917fbb1fb7280f9f082e1804d5dc09e8cd7c89debd6b303542f604bcdf7696d9579d910160405180910390a250505050505050565b6001600160a01b0380821660009081526020818152604080832093861683529290529081205461065b9060405163245a240960e21b81526001600160a01b0386811660048301528516906391689024906024015b602060405180830381865afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190612182565b906118cc565b90505b92915050565b600261068e7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75490565b036106ac57604051637990191b60e11b815260040160405180910390fd5b60027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d755806106d961184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190612143565b1561076357604051633b3b4caf60e21b815260040160405180910390fd5b8161076c61184b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d89190612143565b61080057604051634d53256560e01b81526001600160a01b0382166004820152602401610361565b8383806001600160a01b03166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505060405163f667f89760e01b81526001600160a01b0385811660048301528416925063f667f8979150602401600060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505060405163245a240960e21b81526001600160a01b0389811660048301526000935088169150639168902490602401602060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190612182565b6001600160a01b03878116600090815260208181526040808320938c168352929052205490915061094e82826118cc565b61098e576040517f8b9b0bf80000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610361565b6040517ff6b320080000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288169063f6b3200890602401600060405180830381600087803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b505050506000610a0c61184b565b6001600160a01b031663a36a36306040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d9190612182565b90506000610a8483610a7f868561187a565b6118e6565b6001600160a01b038a166000908152602081905260409020909150610aaa908b836118f2565b610ade6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338361194a565b60408051338152602081018390526001600160a01b03808c1692908d16917f76f1c54646947e8e8df3eab8141bb3d115d07da2520f8e41b208a17d138a8959910160405180910390a35050505050505050610b6360017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d76118e290919063ffffffff16565b5050565b610b6f61184b565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190612143565b15610bee57604051633b3b4caf60e21b815260040160405180910390fd5b336000818152600160205260408120805491905590610c38907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908361194a565b60405181815233907f10df095d1434aed409b2f33d2a6a8456f8b0824633cc12a1b43032085aadc41d9060200160405180910390a250565b6002610c9a7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75490565b03610cb857604051637990191b60e11b815260040160405180910390fd5b60027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75581610ce561184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190612143565b15610d6f57604051633b3b4caf60e21b815260040160405180910390fd5b836001600160a01b038116610d97576040516394c3555f60e01b815260040160405180910390fd5b83610da061184b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c9190612143565b610e3457604051634d53256560e01b81526001600160a01b0382166004820152602401610361565b3385806001600160a01b03166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505060405163f667f89760e01b81526001600160a01b0385811660048301528416925063f667f8979150602401600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b5050506001600160a01b0388166000908152602081905260409020339150889082908290610f0f90838c6118f2565b610f436001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168d8c61194a565b6040518a81526001600160a01b038c169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200160405180910390a360405163245a240960e21b81526001600160a01b03838116600483015260009190831690639168902490602401602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612182565b60405163ab582f2960e01b81526001600160a01b03858116600483015291925060009184169063ab582f2990602401602060405180830381865afa15801561103d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110619190612182565b6001600160a01b038085166000908152602081815260408083209389168352929052205490915061109690610655848461195e565b156110cd576040517f40e2812c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050506001600160a01b03818116600090815260208181526040808320938616835292905220548015801590611172575061117261110a61184b565b6001600160a01b031663ba2de9bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190612182565b829061196a565b156111905760405163410d976960e01b815260040160405180910390fd5b50505050505050506111cc60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d76118e290919063ffffffff16565b505050565b6001806111fc7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b5490565b10611236576040517f1e7a9d9500000000000000000000000000000000000000000000000000000000815260048101829052602401610361565b61125f7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b829055565b60017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c5561128c8261197e565b611294611a38565b60007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c555050565b6112c461184b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190612143565b61134d57604051634d53256560e01b8152336004820152602401610361565b336000818152602081905260408120611367908585611aab565b9050836001600160a01b0316826001600160a01b03167f40957a7f26dd9f9d628b1aba01d4a3db4c38008974c79a62f6cf0f273a78b3a885846040516113b7929190918252602082015260400190565b60405180910390a350505050565b816113ce61184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190612143565b1561145857604051633b3b4caf60e21b815260040160405180910390fd5b6001600160a01b038316600090815260208190526040902061147a9083611b3c565b6114ae6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611b5f565b826001600160a01b03167f8ae4dab3d718e6b7019e16378795bb41b3046b9117483430a39f7af4ab9bb893836040516114e991815260200190565b60405180910390a2505050565b6001600160a01b0380821660009081526020818152604080832093861683529290529081205461065b9060405163ab582f2960e01b81526001600160a01b03868116600483015285169063ab582f2990602401610614565b60026115787f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75490565b0361159657604051637990191b60e11b815260040160405180910390fd5b60027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d755816115c361184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f9190612143565b1561164d57604051633b3b4caf60e21b815260040160405180910390fd5b836001600160a01b038116611675576040516394c3555f60e01b815260040160405180910390fd5b8361167e61184b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa1580156116c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ea9190612143565b61171257604051634d53256560e01b81526001600160a01b0382166004820152602401610361565b6001600160a01b038516600090815260208190526040902086908690611739908388611b74565b61176d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163388611b5f565b866001600160a01b0316886001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62886040516117b291815260200190565b60405180910390a36001600160a01b038181166000908152602081815260408083209386168352929052205480158015906117f357506117f361110a61184b565b156118115760405163410d976960e01b815260040160405180910390fd5b5050505050506111cc60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d76118e290919063ffffffff16565b60006118757f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea605335490565b905090565b6000670de0b6b3a764000061188f83856121b1565b61065b91906121d0565b600061065b82846121f2565b60018201546118b49082611899565b82600101819055505050565b600061065b8284612209565b60006118d88383611bbf565b6002149392505050565b9055565b600061065b8383611bf4565b6001600160a01b0382166000908152602084905260409020546119159082611899565b6001600160a01b038316600090815260208590526040902055600183015461193d9082611899565b8360010181905550505050565b6111cc6001600160a01b0384168383611c0a565b600061065b8383611cb3565b60006119768383611bbf565b159392505050565b303b151580156119ad57507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b156119cb57604051631a27c4a960e21b815260040160405180910390fd5b6001600160a01b0381163b611a0c576040517f14878b6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a357f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea60533829055565b50565b303b15158015611a6757507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b15611a8557604051631a27c4a960e21b815260040160405180910390fd5b60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d755565b6001600160a01b0382166000908152602084905260408120548190611adb908490611ad590611cc3565b90611d22565b9050611ae681611d2e565b19611afb57611af481611d5a565b9150600090505b611b0481611d5a565b6001600160a01b0385166000908152602087905260409020556002850154611b2c90836118c0565b8560020181905550509392505050565b6002820154611b4b9082611899565b600283015560018201546118b490826118c0565b6111cc6001600160a01b038416833084611d65565b6001600160a01b038216600090815260208490526040902054611b9790826118c0565b6001600160a01b038316600090815260208590526040902055600183015461193d90826118c0565b6000828280821115611bd65760029250505061065e565b80821015611be95760009250505061065e565b506001949350505050565b6000818310611c03578161065b565b5090919050565b6040516001600160a01b0383166024820152604481018290526111cc9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dbc565b600081831015611c03578161065b565b6000817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561065e576040517ea07eb500000000000000000000000000000000000000000000000000000000815260048101829052602401610361565b600061065b8284612221565b600080821315611d4057506001919050565b6000821215611d525750600019919050565b506000919050565b600061065e82611ea1565b6040516001600160a01b0380851660248301528316604482015260648101829052611db69085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611c4f565b50505050565b6000611e11826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611eb89092919063ffffffff16565b8051909150156111cc5780806020019051810190611e2f9190612143565b6111cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610361565b600080821215611eb4578160000361065e565b5090565b6060611ec78484600085611ed1565b90505b9392505050565b606082471015611f495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610361565b6001600160a01b0385163b611fa05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610361565b600080866001600160a01b03168587604051611fbc91906122c1565b60006040518083038185875af1925050503d8060008114611ff9576040519150601f19603f3d011682016040523d82523d6000602084013e611ffe565b606091505b509150915061200e828286612019565b979650505050505050565b60608315612028575081611eca565b8251156120385782518084602001fd5b8160405162461bcd60e51b815260040161036191906122dd565b60006020828403121561206457600080fd5b5035919050565b6001600160a01b0381168114611a3557600080fd5b6000806040838503121561209357600080fd5b823561209e8161206b565b915060208301356120ae8161206b565b809150509250929050565b6000602082840312156120cb57600080fd5b8135611eca8161206b565b6000806000606084860312156120eb57600080fd5b83356120f68161206b565b925060208401356121068161206b565b929592945050506040919091013590565b6000806040838503121561212a57600080fd5b82356121358161206b565b946020939093013593505050565b60006020828403121561215557600080fd5b81518015158114611eca57600080fd5b60006020828403121561217757600080fd5b8151611eca8161206b565b60006020828403121561219457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156121cb576121cb61219b565b500290565b6000826121ed57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156122045761220461219b565b500390565b6000821982111561221c5761221c61219b565b500190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561225b5761225b61219b565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561228f5761228f61219b565b50500190565b60005b838110156122b0578181015183820152602001612298565b83811115611db65750506000910152565b600082516122d3818460208701612295565b9190910192915050565b60208152600082518060208401526122fc816040850160208701612295565b601f01601f1916919091016040019291505056fea26469706673582212201d74ed9e95b47c1f8c7c6a6eb1ff1dbc33d82515910316f33633b35d3fab93e164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063c9cb48de11610097578063f213159c11610066578063f213159c1461025a578063f77c47911461026d578063faaebd211461028d578063fc0c546a146102ad57600080fd5b8063c9cb48de146101e9578063ca70d300146101fc578063cc218ece1461020f578063e41191801461024757600080fd5b8063a5fdc5de116100d3578063a5fdc5de1461015d578063b4d6f78114610197578063c3b35a7e146101c3578063c4d66de8146101d657600080fd5b80637f3dd53b1461010557806382df39de1461011a57806386b9d81f1461014257806399d32fc414610155575b600080fd5b610118610113366004612052565b6102d4565b005b61012d610128366004612080565b6105c0565b60405190151581526020015b60405180910390f35b610118610150366004612080565b610664565b610118610b67565b61018961016b3660046120b9565b6001600160a01b031660009081526020819052604090206001015490565b604051908152602001610139565b6101896101a53660046120b9565b6001600160a01b031660009081526020819052604090206002015490565b6101186101d13660046120d6565b610c70565b6101186101e43660046120b9565b6111d1565b6101186101f7366004612117565b6112bc565b61011861020a366004612117565b6113c5565b61018961021d366004612080565b6001600160a01b038082166000908152602081815260408083209386168352929052205492915050565b61012d610255366004612080565b6114f6565b6101186102683660046120d6565b61154e565b61027561184b565b6040516001600160a01b039091168152602001610139565b61018961029b3660046120b9565b60016020526000908152604090205481565b6102757f000000000000000000000000000000000000000000000000000000000000000081565b6102dc61184b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103469190612143565b61036a57604051634d53256560e01b81523360048201526024015b60405180910390fd5b6000803361037661184b565b915091506000816001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190612165565b6040517f2d809cb60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919250600091841690632d809cb690602401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190612165565b905060006104d7846001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190612182565b879061187a565b905060006104e58783611899565b6001600160a01b038716600090815260208190526040902090915061050a90886118a5565b6001600160a01b03841660009081526001602052604090205461052d90836118c0565b6001600160a01b03808616600090815260016020526040808220939093559085168152205461055c90826118c0565b6001600160a01b03808516600090815260016020908152604091829020939093558051858152928301849052908816917fbb1fb7280f9f082e1804d5dc09e8cd7c89debd6b303542f604bcdf7696d9579d910160405180910390a250505050505050565b6001600160a01b0380821660009081526020818152604080832093861683529290529081205461065b9060405163245a240960e21b81526001600160a01b0386811660048301528516906391689024906024015b602060405180830381865afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190612182565b906118cc565b90505b92915050565b600261068e7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75490565b036106ac57604051637990191b60e11b815260040160405180910390fd5b60027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d755806106d961184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190612143565b1561076357604051633b3b4caf60e21b815260040160405180910390fd5b8161076c61184b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d89190612143565b61080057604051634d53256560e01b81526001600160a01b0382166004820152602401610361565b8383806001600160a01b03166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505060405163f667f89760e01b81526001600160a01b0385811660048301528416925063f667f8979150602401600060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505060405163245a240960e21b81526001600160a01b0389811660048301526000935088169150639168902490602401602060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190612182565b6001600160a01b03878116600090815260208181526040808320938c168352929052205490915061094e82826118cc565b61098e576040517f8b9b0bf80000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610361565b6040517ff6b320080000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288169063f6b3200890602401600060405180830381600087803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b505050506000610a0c61184b565b6001600160a01b031663a36a36306040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d9190612182565b90506000610a8483610a7f868561187a565b6118e6565b6001600160a01b038a166000908152602081905260409020909150610aaa908b836118f2565b610ade6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338361194a565b60408051338152602081018390526001600160a01b03808c1692908d16917f76f1c54646947e8e8df3eab8141bb3d115d07da2520f8e41b208a17d138a8959910160405180910390a35050505050505050610b6360017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d76118e290919063ffffffff16565b5050565b610b6f61184b565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190612143565b15610bee57604051633b3b4caf60e21b815260040160405180910390fd5b336000818152600160205260408120805491905590610c38907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908361194a565b60405181815233907f10df095d1434aed409b2f33d2a6a8456f8b0824633cc12a1b43032085aadc41d9060200160405180910390a250565b6002610c9a7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75490565b03610cb857604051637990191b60e11b815260040160405180910390fd5b60027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75581610ce561184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190612143565b15610d6f57604051633b3b4caf60e21b815260040160405180910390fd5b836001600160a01b038116610d97576040516394c3555f60e01b815260040160405180910390fd5b83610da061184b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c9190612143565b610e3457604051634d53256560e01b81526001600160a01b0382166004820152602401610361565b3385806001600160a01b03166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505060405163f667f89760e01b81526001600160a01b0385811660048301528416925063f667f8979150602401600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b5050506001600160a01b0388166000908152602081905260409020339150889082908290610f0f90838c6118f2565b610f436001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168d8c61194a565b6040518a81526001600160a01b038c169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200160405180910390a360405163245a240960e21b81526001600160a01b03838116600483015260009190831690639168902490602401602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612182565b60405163ab582f2960e01b81526001600160a01b03858116600483015291925060009184169063ab582f2990602401602060405180830381865afa15801561103d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110619190612182565b6001600160a01b038085166000908152602081815260408083209389168352929052205490915061109690610655848461195e565b156110cd576040517f40e2812c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050506001600160a01b03818116600090815260208181526040808320938616835292905220548015801590611172575061117261110a61184b565b6001600160a01b031663ba2de9bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190612182565b829061196a565b156111905760405163410d976960e01b815260040160405180910390fd5b50505050505050506111cc60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d76118e290919063ffffffff16565b505050565b6001806111fc7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b5490565b10611236576040517f1e7a9d9500000000000000000000000000000000000000000000000000000000815260048101829052602401610361565b61125f7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b829055565b60017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c5561128c8261197e565b611294611a38565b60007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c555050565b6112c461184b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190612143565b61134d57604051634d53256560e01b8152336004820152602401610361565b336000818152602081905260408120611367908585611aab565b9050836001600160a01b0316826001600160a01b03167f40957a7f26dd9f9d628b1aba01d4a3db4c38008974c79a62f6cf0f273a78b3a885846040516113b7929190918252602082015260400190565b60405180910390a350505050565b816113ce61184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190612143565b1561145857604051633b3b4caf60e21b815260040160405180910390fd5b6001600160a01b038316600090815260208190526040902061147a9083611b3c565b6114ae6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611b5f565b826001600160a01b03167f8ae4dab3d718e6b7019e16378795bb41b3046b9117483430a39f7af4ab9bb893836040516114e991815260200190565b60405180910390a2505050565b6001600160a01b0380821660009081526020818152604080832093861683529290529081205461065b9060405163ab582f2960e01b81526001600160a01b03868116600483015285169063ab582f2990602401610614565b60026115787f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d75490565b0361159657604051637990191b60e11b815260040160405180910390fd5b60027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d755816115c361184b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f9190612143565b1561164d57604051633b3b4caf60e21b815260040160405180910390fd5b836001600160a01b038116611675576040516394c3555f60e01b815260040160405180910390fd5b8361167e61184b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa1580156116c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ea9190612143565b61171257604051634d53256560e01b81526001600160a01b0382166004820152602401610361565b6001600160a01b038516600090815260208190526040902086908690611739908388611b74565b61176d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163388611b5f565b866001600160a01b0316886001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62886040516117b291815260200190565b60405180910390a36001600160a01b038181166000908152602081815260408083209386168352929052205480158015906117f357506117f361110a61184b565b156118115760405163410d976960e01b815260040160405180910390fd5b5050505050506111cc60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d76118e290919063ffffffff16565b60006118757f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea605335490565b905090565b6000670de0b6b3a764000061188f83856121b1565b61065b91906121d0565b600061065b82846121f2565b60018201546118b49082611899565b82600101819055505050565b600061065b8284612209565b60006118d88383611bbf565b6002149392505050565b9055565b600061065b8383611bf4565b6001600160a01b0382166000908152602084905260409020546119159082611899565b6001600160a01b038316600090815260208590526040902055600183015461193d9082611899565b8360010181905550505050565b6111cc6001600160a01b0384168383611c0a565b600061065b8383611cb3565b60006119768383611bbf565b159392505050565b303b151580156119ad57507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b156119cb57604051631a27c4a960e21b815260040160405180910390fd5b6001600160a01b0381163b611a0c576040517f14878b6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a357f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea60533829055565b50565b303b15158015611a6757507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b15611a8557604051631a27c4a960e21b815260040160405180910390fd5b60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d755565b6001600160a01b0382166000908152602084905260408120548190611adb908490611ad590611cc3565b90611d22565b9050611ae681611d2e565b19611afb57611af481611d5a565b9150600090505b611b0481611d5a565b6001600160a01b0385166000908152602087905260409020556002850154611b2c90836118c0565b8560020181905550509392505050565b6002820154611b4b9082611899565b600283015560018201546118b490826118c0565b6111cc6001600160a01b038416833084611d65565b6001600160a01b038216600090815260208490526040902054611b9790826118c0565b6001600160a01b038316600090815260208590526040902055600183015461193d90826118c0565b6000828280821115611bd65760029250505061065e565b80821015611be95760009250505061065e565b506001949350505050565b6000818310611c03578161065b565b5090919050565b6040516001600160a01b0383166024820152604481018290526111cc9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dbc565b600081831015611c03578161065b565b6000817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561065e576040517ea07eb500000000000000000000000000000000000000000000000000000000815260048101829052602401610361565b600061065b8284612221565b600080821315611d4057506001919050565b6000821215611d525750600019919050565b506000919050565b600061065e82611ea1565b6040516001600160a01b0380851660248301528316604482015260648101829052611db69085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611c4f565b50505050565b6000611e11826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611eb89092919063ffffffff16565b8051909150156111cc5780806020019051810190611e2f9190612143565b6111cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610361565b600080821215611eb4578160000361065e565b5090565b6060611ec78484600085611ed1565b90505b9392505050565b606082471015611f495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610361565b6001600160a01b0385163b611fa05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610361565b600080866001600160a01b03168587604051611fbc91906122c1565b60006040518083038185875af1925050503d8060008114611ff9576040519150601f19603f3d011682016040523d82523d6000602084013e611ffe565b606091505b509150915061200e828286612019565b979650505050505050565b60608315612028575081611eca565b8251156120385782518084602001fd5b8160405162461bcd60e51b815260040161036191906122dd565b60006020828403121561206457600080fd5b5035919050565b6001600160a01b0381168114611a3557600080fd5b6000806040838503121561209357600080fd5b823561209e8161206b565b915060208301356120ae8161206b565b809150509250929050565b6000602082840312156120cb57600080fd5b8135611eca8161206b565b6000806000606084860312156120eb57600080fd5b83356120f68161206b565b925060208401356121068161206b565b929592945050506040919091013590565b6000806040838503121561212a57600080fd5b82356121358161206b565b946020939093013593505050565b60006020828403121561215557600080fd5b81518015158114611eca57600080fd5b60006020828403121561217757600080fd5b8151611eca8161206b565b60006020828403121561219457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156121cb576121cb61219b565b500290565b6000826121ed57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156122045761220461219b565b500390565b6000821982111561221c5761221c61219b565b500190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561225b5761225b61219b565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561228f5761228f61219b565b50500190565b60005b838110156122b0578181015183820152602001612298565b83811115611db65750506000910152565b600082516122d3818460208701612295565b9190910192915050565b60208152600082518060208401526122fc816040850160208701612295565b601f01601f1916919091016040019291505056fea26469706673582212201d74ed9e95b47c1f8c7c6a6eb1ff1dbc33d82515910316f33633b35d3fab93e164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "collateral(address)": {
        "params": {
          "product": "Product to return for"
        },
        "returns": {
          "_0": "The total balance of collateral in the product"
        }
      },
      "collateral(address,address)": {
        "params": {
          "account": "Account to return for",
          "product": "Product to return for"
        },
        "returns": {
          "_0": "The balance of the collateral account"
        }
      },
      "constructor": {
        "details": "Called at implementation instantiate and constant for that implementation.",
        "params": {
          "token_": "Collateral ERC20 stablecoin address"
        }
      },
      "depositTo(address,address,uint256)": {
        "params": {
          "account": "Account to deposit the collateral for",
          "amount": "Amount of collateral to deposit",
          "product": "Product to credit the collateral to"
        }
      },
      "initialize(address)": {
        "details": "Must be called atomically as part of the upgradeable proxy deployment to      avoid front-running",
        "params": {
          "controller_": "Factory contract address"
        }
      },
      "liquidatable(address,address)": {
        "params": {
          "account": "Account to return for",
          "product": "Product to return for"
        },
        "returns": {
          "_0": "Whether the account can be liquidated"
        }
      },
      "liquidatableNext(address,address)": {
        "details": "Takes into account the current pre-position on the account",
        "params": {
          "account": "Account to return for",
          "product": "Product to return for"
        },
        "returns": {
          "_0": "Whether the account can be liquidated"
        }
      },
      "liquidate(address,address)": {
        "details": "Account must be under-collateralized, fee returned immediately to `msg.sender`",
        "params": {
          "account": "Account to liquidate",
          "product": "Product to liquidate for"
        }
      },
      "resolveShortfall(address,uint256)": {
        "details": "Shortfall is a measure of settled insolvency in the market      This hook can be used by the product owner or an insurance fund to re-capitalize an insolvent market",
        "params": {
          "amount": "Amount of shortfall to resolve",
          "product": "Product to resolve shortfall for"
        }
      },
      "settleAccount(address,int256)": {
        "details": "Callable only by the corresponding product as part of the settlement flywheel.      Moves collateral within a product, any collateral leaving the product due to      fees has already been accounted for in the settleProduct flywheel.      Debits in excess of the account balance get recorded as shortfall, and can be      resolved by the product owner as needed.",
        "params": {
          "account": "Account to credit",
          "amount": "Amount to credit the account (can be negative)"
        }
      },
      "settleProduct(uint256)": {
        "details": "Callable only by the corresponding product as part of the settlement flywheel      Removes collateral from the product as fees.",
        "params": {
          "amount": "Amount to debit from the account"
        }
      },
      "shortfall(address)": {
        "params": {
          "product": "Product to return for"
        },
        "returns": {
          "_0": "The current shortfall of the product"
        }
      },
      "withdrawTo(address,address,uint256)": {
        "params": {
          "account": "Account to withdraw the collateral to",
          "amount": "Amount of collateral to withdraw",
          "product": "Product to withdraw the collateral from"
        }
      }
    },
    "stateVariables": {
      "_products": {
        "details": "Per product collateral state"
      },
      "fees": {
        "details": "Protocol and product fees collected, but not yet claimed"
      },
      "token": {
        "details": "ERC20 stablecoin for collateral"
      }
    },
    "title": "Collateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimFee()": {
        "notice": "Claims all of `msg.sender`'s fees"
      },
      "collateral(address)": {
        "notice": "Returns the total balance of `product`'s collateral"
      },
      "collateral(address,address)": {
        "notice": "Returns the balance of `account`'s `product` collateral account"
      },
      "constructor": {
        "notice": "Initializes the immutable contract state"
      },
      "depositTo(address,address,uint256)": {
        "notice": "Deposits `amount` collateral from `msg.sender` to `account`'s `product`         account"
      },
      "initialize(address)": {
        "notice": "Initializes the contract state"
      },
      "liquidatable(address,address)": {
        "notice": "Returns whether `account`'s `product` collateral account can be liquidated"
      },
      "liquidatableNext(address,address)": {
        "notice": "Returns whether `account`'s `product` collateral account can be liquidated         after the next oracle version settlement"
      },
      "liquidate(address,address)": {
        "notice": "Liquidates `account`'s `product` collateral account"
      },
      "resolveShortfall(address,uint256)": {
        "notice": "Injects additional collateral into a product to resolve shortfall"
      },
      "settleAccount(address,int256)": {
        "notice": "Credits `amount` to `account`'s collateral account"
      },
      "settleProduct(uint256)": {
        "notice": "Debits `amount` from product's total collateral account"
      },
      "shortfall(address)": {
        "notice": "Returns the current shortfall of `product`'s collateral"
      },
      "withdrawTo(address,address,uint256)": {
        "notice": "Withdraws `amount` collateral from `msg.sender`'s `product` account         and sends it to `account`"
      }
    },
    "notice": "Manages logic and state for all collateral accounts in the protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9024,
        "contract": "contracts/collateral/Collateral.sol:Collateral",
        "label": "_products",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IProduct)13640,t_struct(OptimisticLedger)9700_storage)"
      },
      {
        "astId": 9030,
        "contract": "contracts/collateral/Collateral.sol:Collateral",
        "label": "fees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)1887)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IProduct)13640": {
        "encoding": "inplace",
        "label": "contract IProduct",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_userDefinedValueType(UFixed18)1887)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => UFixed18)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(UFixed18)1887"
      },
      "t_mapping(t_contract(IProduct)13640,t_struct(OptimisticLedger)9700_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IProduct)13640",
        "label": "mapping(contract IProduct => struct OptimisticLedger)",
        "numberOfBytes": "32",
        "value": "t_struct(OptimisticLedger)9700_storage"
      },
      "t_struct(OptimisticLedger)9700_storage": {
        "encoding": "inplace",
        "label": "struct OptimisticLedger",
        "members": [
          {
            "astId": 9691,
            "contract": "contracts/collateral/Collateral.sol:Collateral",
            "label": "balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)1887)"
          },
          {
            "astId": 9695,
            "contract": "contracts/collateral/Collateral.sol:Collateral",
            "label": "total",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(UFixed18)1887"
          },
          {
            "astId": 9699,
            "contract": "contracts/collateral/Collateral.sol:Collateral",
            "label": "shortfall",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(UFixed18)1887"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_userDefinedValueType(UFixed18)1887": {
        "encoding": "inplace",
        "label": "UFixed18",
        "numberOfBytes": "32"
      }
    }
  }
}
