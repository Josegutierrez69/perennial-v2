{
  "address": "0x8eff96CDF5a77C6a4a5Ed2247D88Fe4e4aB8812E",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed18OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "IncentivizerInvalidProgramError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "IncentivizerNotProgramOwnerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncentivizerProgramNotClosableError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "IncentivizerProgramPausedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncentivizerTooManyProgramsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidControllerError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotCollateralError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotOwnerError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotProductError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "NotProductOwnerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProgramAlreadyStartedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProgramInvalidDurationError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProgramInvalidGraceError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenPullEtherError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "UFixed18UnderflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "UInitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableZeroVersionError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UReentrancyGuardReentrantCallError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProgramClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "versionComplete",
          "type": "uint256"
        }
      ],
      "name": "ProgramCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amountMaker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amountTaker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "grace",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ProgramCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "claimFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "closed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grace",
              "type": "uint256"
            },
            {
              "internalType": "contract IProduct",
              "name": "product",
              "type": "address"
            },
            {
              "internalType": "Token",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct ProgramInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "end",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "latestVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "programInfos",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grace",
              "type": "uint256"
            },
            {
              "internalType": "contract IProduct",
              "name": "product",
              "type": "address"
            },
            {
              "internalType": "Token",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct ProgramInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "programsForAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "programsForLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "settled",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "Fixed18",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "currentOracleVersion",
          "type": "tuple"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "syncAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "unclaimed",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "programId",
          "type": "uint256"
        }
      ],
      "name": "versionComplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ca7d5da092b88881ef8f273c754cf215100c4546f376854c84d9b847275dc95",
  "receipt": {
    "to": null,
    "from": "0xb779541EcE2bFFF7CB803cfcddfA220A753879b6",
    "contractAddress": "0x8eff96CDF5a77C6a4a5Ed2247D88Fe4e4aB8812E",
    "transactionIndex": 1,
    "gasUsed": "3384296",
    "logsBloom": "0x
    "blockHash": "0x2c2f5a40402d04397ae2f28515c5cb0a27b199ed5a3e62a7e358fe32c75062db",
    "transactionHash": "0x7ca7d5da092b88881ef8f273c754cf215100c4546f376854c84d9b847275dc95",
    "logs": [],
    "blockNumber": 31413000,
    "cumulativeGasUsed": "3774745",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "669da26b2049a035994bb66b35ec132a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed18OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"IncentivizerInvalidProgramError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"IncentivizerNotProgramOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncentivizerProgramNotClosableError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"IncentivizerProgramPausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncentivizerTooManyProgramsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidControllerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotCollateralError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotOwnerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotProductError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"NotProductOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramAlreadyStartedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramInvalidDurationError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramInvalidGraceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenPullEtherError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"UFixed18UnderflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"UInitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableZeroVersionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UReentrancyGuardReentrantCallError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProgramClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"versionComplete\",\"type\":\"uint256\"}],\"name\":\"ProgramCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amountMaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amountTaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grace\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ProgramCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grace\",\"type\":\"uint256\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct ProgramInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"latestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"programInfos\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grace\",\"type\":\"uint256\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct ProgramInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"programsForAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"programsForLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"currentOracleVersion\",\"type\":\"tuple\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"syncAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"programId\",\"type\":\"uint256\"}],\"name\":\"versionComplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"Available rewards for `programId`\"}},\"claim(address)\":{\"params\":{\"product\":\"Product to claim rewards for\"}},\"claim(uint256)\":{\"params\":{\"programId\":\"Program to claim rewards for\"}},\"claimFee(address[])\":{\"params\":{\"tokens\":\"Tokens to claim fees for\"}},\"close(uint256)\":{\"params\":{\"programId\":\"Program to end\"}},\"closed(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"whether closed for `programId`\"}},\"create(((uint256,uint256),uint256,uint256,uint256,address,address))\":{\"details\":\"Must be called as the product or protocol owner\",\"params\":{\"info\":\"Parameters for the new program\"},\"returns\":{\"_0\":\"new program's ID\"}},\"end(uint256)\":{\"details\":\"Must be called as the program owner\",\"params\":{\"programId\":\"Program to end\"}},\"initialize(address)\":{\"details\":\"Must be called atomically as part of the upgradeable proxy deployment to      avoid front-running\",\"params\":{\"controller_\":\"Factory contract address\"}},\"latestVersion(address,uint256)\":{\"params\":{\"account\":\"Account to return for\",\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"`account`'s latest synced version for `programId`\"}},\"owner(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"The owner of `programId`\"}},\"paused(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"The paused status of `programId`\"}},\"programInfos(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"Program info\"}},\"programsForAt(address,uint256)\":{\"params\":{\"index\":\"Index to return for\",\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"The program at index `index` for `product`\"}},\"programsForLength(address)\":{\"params\":{\"product\":\"Product to return for\"},\"returns\":{\"_0\":\"Quantity of programs for `product`\"}},\"settled(address,uint256)\":{\"params\":{\"account\":\"Account to return for\",\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"`account`'s settled rewards for `programId`\"}},\"sync((uint256,uint256,int256))\":{\"details\":\"Called every settle() from each product\"},\"syncAccount(address)\":{\"details\":\"Called immediately proceeding a position update in the corresponding product\",\"params\":{\"account\":\"Account to sync\"}},\"treasury(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"The treasury of `programId`\"}},\"unclaimed(address,uint256)\":{\"params\":{\"account\":\"Account to return for\",\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"`account`'s total unclaimed rewards for `programId`\"}},\"versionComplete(uint256)\":{\"params\":{\"programId\":\"Program to return for\"},\"returns\":{\"_0\":\"The version completed for `programId`\"}}},\"stateVariables\":{\"_programInfos\":{\"details\":\"Static program state\"},\"_programs\":{\"details\":\"Dynamic program state\"},\"_registry\":{\"details\":\"Mapping of all programs for each product\"},\"fees\":{\"details\":\"Fees that have been collected, but remain unclaimed\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"available(uint256)\":{\"notice\":\"Returns available rewards for a specific program\"},\"claim(address)\":{\"notice\":\"Claims all of `msg.sender`'s rewards for `product` programs\"},\"claim(uint256)\":{\"notice\":\"Claims all of `msg.sender`'s rewards for a specific program\"},\"claimFee(address[])\":{\"notice\":\"Claims all `tokens` fees to the protocol treasury\"},\"close(uint256)\":{\"notice\":\"Closes a program, returning all unclaimed rewards\"},\"closed(uint256)\":{\"notice\":\"Returns whether closed for a specific program\"},\"create(((uint256,uint256),uint256,uint256,uint256,address,address))\":{\"notice\":\"Creates a new incentive program\"},\"end(uint256)\":{\"notice\":\"Completes an in-progress program early\"},\"initialize(address)\":{\"notice\":\"Initializes the contract state\"},\"latestVersion(address,uint256)\":{\"notice\":\"Returns `account`'s latest synced version for a specific program\"},\"owner(uint256)\":{\"notice\":\"Returns the owner of a specific program\"},\"paused(uint256)\":{\"notice\":\"Returns the paused status of a specific program\"},\"programInfos(uint256)\":{\"notice\":\"Returns program info for program `programId`\"},\"programsForAt(address,uint256)\":{\"notice\":\"Returns the program at index `index` for a specific product\"},\"programsForLength(address)\":{\"notice\":\"Returns quantity of programs for a specific product\"},\"settled(address,uint256)\":{\"notice\":\"Returns `account`'s settled rewards for a specific program\"},\"sync((uint256,uint256,int256))\":{\"notice\":\"Completes any in-progress programs that newly completable\"},\"syncAccount(address)\":{\"notice\":\"Settles unsettled balance for `account`\"},\"treasury(uint256)\":{\"notice\":\"Returns the treasury of a specific program\"},\"unclaimed(address,uint256)\":{\"notice\":\"Returns `account`'s total unclaimed rewards for a specific program\"},\"versionComplete(uint256)\":{\"notice\":\"Returns the version completed for a specific program\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/incentivizer/Incentivizer.sol\":\"Incentivizer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@equilibria/root/control/unstructured/UInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @title UInitializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `UInitializable` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract UInitializable {\\n    error UInitializableZeroVersionError();\\n    error UInitializableAlreadyInitializedError(uint256 version);\\n    error UInitializableNotInitializingError();\\n\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UInitializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.UInitializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert UInitializableZeroVersionError();\\n        if (_version.read() >= version) revert UInitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert UInitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf88a17a4d1c8126df114a8e3ca095702699d1c270bf75eb49f595a681cf4b9c2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/control/unstructured/UReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UInitializable.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * NOTE: This contract has been extended from the Open Zeppelin library to include an\\n *       unstructured storage pattern, so that it can be safely mixed in with upgradeable\\n *       contracts without affecting their storage patterns through inheritance.\\n */\\nabstract contract UReentrancyGuard is UInitializable {\\n    error UReentrancyGuardReentrantCallError();\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    /**\\n     * @dev unstructured storage slot for the reentrancy status\\n     */\\n    Uint256Storage private constant _status = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UReentrancyGuard.status\\\"));\\n\\n    /**\\n     * @dev Initializes the contract setting the status to _NOT_ENTERED.\\n     */\\n    function __UReentrancyGuard__initialize() internal onlyInitializer {\\n        _status.store(_NOT_ENTERED);\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        if (_status.read() == _ENTERED) revert UReentrancyGuardReentrantCallError();\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status.store(_ENTERED);\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status.store(_NOT_ENTERED);\\n    }\\n}\\n\",\"keccak256\":\"0x4962245ca8fdda3dc40c0f942a3568d90fb69428a6927b058018b01c90eb9fc9\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) return Fixed18.wrap(-1 * Fixed18.unwrap(from(m)));\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc92cd7d606135a23077ed1921eb565bc06857e5fdeaa755b7e71586dd8565c2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0x860a1c54ea451289abde9ad678d5dc2e92432b17df648f0421bc6ffbf48b00b2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xa12f541b8e2a2a3d5efeebdb3f39caec1db69cb7ce9ad5c6de12235a55a47a2d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f0058ff9e2a9f585346ca060b6dc511062284b4e67ac6f69e5aea6e71205b00\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/UStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\nlibrary BoolStorageLib {\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(BoolStorage self, bool value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Uint256StorageLib {\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Int256StorageLib {\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary AddressStorageLib {\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(AddressStorage self, address value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Bytes32StorageLib {\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5013ded297cc72266fa648a83658cf5a508cd537d78a0260cd31d18e9e523017\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token\\ntype Token is address;\\nusing TokenLib for Token global;\\ntype TokenStorage is bytes32;\\nusing TokenStorageLib for TokenStorage global;\\n\\n/**\\n * @title TokenLib\\n * @notice Library to manage Ether and ERC20s that is compliant with the fixed-decimal types.\\n * @dev Normalizes token operations with Ether operations (using a magic Ether address)\\n *      Automatically converts from token decimal-Base amounts to Base-18 UFixed18 amounts, with optional rounding\\n */\\nlibrary TokenLib {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    error TokenPullEtherError();\\n    error TokenApproveEtherError();\\n\\n    uint256 private constant BASE = 1e18;\\n    Token public constant ETHER = Token.wrap(address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\\n\\n    /**\\n     * @notice Returns whether a token is the Ether address\\n     * @param self Token to check for\\n     * @return Whether the token is Ether\\n     */\\n    function isEther(Token self) internal pure returns (bool) {\\n        return Token.unwrap(self) == Token.unwrap(ETHER);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token self, address grantee) internal {\\n        if (isEther(self)) revert TokenApproveEtherError();\\n        IERC20(Token.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token self, address grantee, UFixed18 amount) internal {\\n        if (isEther(self)) revert TokenApproveEtherError();\\n        IERC20(Token.unwrap(self)).safeApprove(grantee, toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function approve(Token self, address grantee, UFixed18 amount, bool roundUp) internal {\\n        if (isEther(self)) revert TokenApproveEtherError();\\n        IERC20(Token.unwrap(self)).safeApprove(grantee, toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token self, address recipient, UFixed18 amount) internal {\\n        isEther(self)\\n            ? Address.sendValue(payable(recipient), UFixed18.unwrap(amount))\\n            : IERC20(Token.unwrap(self)).safeTransfer(recipient, toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function push(Token self, address recipient, UFixed18 amount, bool roundUp) internal {\\n        isEther(self)\\n            ? Address.sendValue(payable(recipient), UFixed18.unwrap(amount))\\n            : IERC20(Token.unwrap(self)).safeTransfer(recipient, toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token self, address benefactor, UFixed18 amount) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, address(this), toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function pull(Token self, address benefactor, UFixed18 amount, bool roundUp) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, address(this), toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token self, address benefactor, address recipient, UFixed18 amount) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, recipient, toTokenAmount(self, amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function pullTo(Token self, address benefactor, address recipient, UFixed18 amount, bool roundUp) internal {\\n        if (isEther(self)) revert TokenPullEtherError();\\n        IERC20(Token.unwrap(self)).safeTransferFrom(benefactor, recipient, toTokenAmount(self, amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token self) internal view returns (string memory) {\\n        return isEther(self) ? \\\"Ether\\\" : IERC20Metadata(Token.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token self) internal view returns (string memory) {\\n        return isEther(self) ? \\\"ETH\\\" : IERC20Metadata(Token.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the decimals of the token\\n     * @param self Token to check for\\n     * @return Token decimals\\n     */\\n    function decimals(Token self) internal view returns (uint256) {\\n        return isEther(self) ? 18 : uint256(IERC20Metadata(Token.unwrap(self)).decimals());\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token self, address account) internal view returns (UFixed18) {\\n        return isEther(self) ?\\n            UFixed18.wrap(account.balance) :\\n            fromTokenAmount(self, IERC20(Token.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal amount into the token amount according to\\n     *         it's defined decimals\\n     * @param self Token to check for\\n     * @param amount Amount to convert\\n     * @return Normalized token amount\\n     */\\n    function toTokenAmount(Token self, UFixed18 amount, bool roundUp) private view returns (uint256) {\\n        uint256 tokenDecimals = decimals(self);\\n\\n        if (tokenDecimals < 18) {\\n            uint256 offset = 10 ** (18 - tokenDecimals);\\n            return roundUp ? Math.ceilDiv(UFixed18.unwrap(amount), offset) : UFixed18.unwrap(amount) / offset;\\n        } else {\\n            uint256 offset = 10 ** (tokenDecimals - 18);\\n            return UFixed18.unwrap(amount) * offset;\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts the token amount into the unsigned fixed-decimal amount according to\\n     *         it's defined decimals\\n     * @param self Token to check for\\n     * @param amount Token amount to convert\\n     * @return Normalized unsigned fixed-decimal amount\\n     */\\n    function fromTokenAmount(Token self, uint256 amount) private view returns (UFixed18) {\\n        UFixed18 conversion = UFixed18Lib.ratio(BASE, 10 ** uint256(decimals(self)));\\n        return UFixed18.wrap(amount).mul(conversion);\\n    }\\n}\\n\\nlibrary TokenStorageLib {\\n    function read(TokenStorage self) internal view returns (Token value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(TokenStorage self, Token value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\",\"keccak256\":\"0x537a15969c9c094fdda69c6c9405e68403c4a12dc94c25196c7222fca563fe2a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant DECIMALS = 18;\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the decimals of the token\\n     * @return Token decimals\\n     */\\n    function decimals(Token18) internal pure returns (uint256) {\\n        return DECIMALS;\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2803297fd08ae91f94b928bcaa34273d792891a2d4c8ed43b01be580669e8ee3\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/controller/UControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@equilibria/root/storage/UStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IProduct.sol\\\";\\n\\n/**\\n * @title UControllerProvider\\n * @notice Mix-in that manages a controller pointer and associated permissioning modifiers.\\n * @dev Uses unstructured storage so that it is safe to mix-in to upgreadable contracts without modifying\\n *      their storage layout.\\n */\\nabstract contract UControllerProvider is UInitializable {\\n    error AlreadyInitializedError();\\n    error NotOwnerError(address sender);\\n    error NotProductError(address sender);\\n    error NotCollateralError(address sender);\\n    error NotProductOwnerError(address sender, IProduct product);\\n    error PausedError();\\n    error InvalidControllerError();\\n\\n    /// @dev The controller contract address\\n    AddressStorage private constant _controller = AddressStorage.wrap(keccak256(\\\"equilibria.perennial.UControllerProvider.controller\\\"));\\n    function controller() public view returns (IController) { return IController(_controller.read()); }\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param controller_ Protocol Controller contract address\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UControllerProvider__initialize(IController controller_) internal onlyInitializer {\\n        if (!Address.isContract(address(controller_))) revert InvalidControllerError();\\n        _controller.store(address(controller_));\\n    }\\n\\n    /// @dev Only allow a valid product contract to call\\n    modifier onlyProduct {\\n        if (!controller().isProduct(IProduct(msg.sender))) revert NotProductError(msg.sender);\\n\\n        _;\\n    }\\n\\n    /// @dev Verify that `product` is a valid product contract\\n    modifier isProduct(IProduct product) {\\n        if (!controller().isProduct(product)) revert NotProductError(address(product));\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow the Collateral contract to call\\n    modifier onlyCollateral {\\n        if (msg.sender != address(controller().collateral())) revert NotCollateralError(msg.sender);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow the protocol owner contract to call\\n    modifier onlyOwner() {\\n        if (msg.sender != controller().owner()) revert NotOwnerError(msg.sender);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow if the protocol is currently unpaused\\n    modifier notPaused() {\\n        if (controller().paused()) revert PausedError();\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow if both the protocol and the product are currently unpaused\\n    modifier notPausedProduct(IProduct product) {\\n        if (controller().paused(product)) revert PausedError();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3b9057d2c808e7bf7b438794409063af1e1dbce4694eb28a70f22cc82743de1f\",\"license\":\"Apache-2.0\"},\"contracts/incentivizer/Incentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@equilibria/root/control/unstructured/UReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/types/Position.sol\\\";\\nimport \\\"../interfaces/types/Accumulator.sol\\\";\\nimport \\\"../interfaces/IIncentivizer.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../controller/UControllerProvider.sol\\\";\\nimport \\\"./types/Program.sol\\\";\\n\\ncontract Incentivizer is IIncentivizer, UInitializable, UControllerProvider, UReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// @dev Static program state\\n    ProgramInfo[] private _programInfos;\\n\\n    /// @dev Dynamic program state\\n    mapping(uint256 => Program) private _programs;\\n\\n    /// @dev Mapping of all programs for each product\\n    mapping(IProduct => EnumerableSet.UintSet) private _registry;\\n\\n    /// @dev Fees that have been collected, but remain unclaimed\\n    mapping(Token => UFixed18) public fees;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @dev Must be called atomically as part of the upgradeable proxy deployment to\\n     *      avoid front-running\\n     * @param controller_ Factory contract address\\n     */\\n    function initialize(IController controller_) external initializer(1) {\\n        __UControllerProvider__initialize(controller_);\\n        __UReentrancyGuard__initialize();\\n    }\\n\\n    /**\\n     * @notice Creates a new incentive program\\n     * @dev Must be called as the product or protocol owner\\n     * @param info Parameters for the new program\\n     * @return new program's ID\\n     */\\n    function create(ProgramInfo calldata info)\\n    external\\n    nonReentrant\\n    notPausedProduct(info.product)\\n    isProduct(info.product)\\n    returns (uint256) {\\n        IController _controller = controller();\\n        bool protocolOwned = msg.sender == _controller.owner();\\n\\n        if (programsForLength(info.product) >= _controller.programsPerProduct()) revert IncentivizerTooManyProgramsError();\\n        if (!protocolOwned && msg.sender != _controller.owner(info.product))\\n            revert NotProductOwnerError(msg.sender, info.product);\\n\\n        uint256 programId = _programInfos.length;\\n        UFixed18 incentivizationFee = _controller.incentivizationFee();\\n        (ProgramInfo memory programInfo, UFixed18 programFee) = ProgramInfoLib.create(incentivizationFee, info);\\n\\n        _programInfos.push(programInfo);\\n        _programs[programId].initialize(programInfo, protocolOwned);\\n        _registry[info.product].add(programId);\\n        fees[info.token] = fees[info.token].add(programFee);\\n\\n        info.token.pull(msg.sender, info.amount.sum(), true);\\n\\n        emit ProgramCreated(\\n            programId,\\n            programInfo.product,\\n            programInfo.token,\\n            programInfo.amount.maker,\\n            programInfo.amount.taker,\\n            programInfo.start,\\n            programInfo.duration,\\n            programInfo.grace,\\n            programFee\\n        );\\n\\n        return programId;\\n    }\\n\\n    /**\\n     * @notice Completes an in-progress program early\\n     * @dev Must be called as the program owner\\n     * @param programId Program to end\\n     */\\n    function end(uint256 programId)\\n    external\\n    nonReentrant\\n    validProgram(programId)\\n    notPausedProgram(programId)\\n    onlyProgramOwner(programId)\\n    {\\n        completeInternal(programId);\\n    }\\n\\n    /**\\n     * @notice Closes a program, returning all unclaimed rewards\\n     * @param programId Program to end\\n     */\\n    function close(uint256 programId)\\n    external\\n    nonReentrant\\n    validProgram(programId)\\n    notPausedProgram(programId)\\n    {\\n        Program storage program = _programs[programId];\\n        ProgramInfo storage programInfo = _programInfos[programId];\\n\\n        if (!program.canClose(programInfo, block.timestamp)) revert IncentivizerProgramNotClosableError();\\n\\n        // complete if not yet completed\\n        if (program.versionComplete == 0) {\\n            completeInternal(programId);\\n        }\\n\\n        // close\\n        UFixed18 amountToReturn = _programs[programId].close();\\n        programInfo.token.push(treasury(programId), amountToReturn);\\n        _registry[programInfo.product].remove(programId);\\n\\n        emit ProgramClosed(programId, amountToReturn);\\n    }\\n\\n    /**\\n     * @notice Completes any in-progress programs that newly completable\\n     * @dev Called every settle() from each product\\n     */\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external onlyProduct {\\n        IProduct product = IProduct(msg.sender);\\n        uint256 programCount = programsForLength(product);\\n\\n        for (uint256 i; i < programCount; i++) {\\n            uint256 programId = programsForAt(product, i);\\n\\n            if (_programs[programId].versionComplete != 0) continue;\\n            if (!_programInfos[programId].isComplete(currentOracleVersion.timestamp)) continue;\\n\\n            completeInternal(programId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Completes a program\\n     * @dev Internal helper\\n     * @param programId Program to complete\\n     */\\n    function completeInternal(uint256 programId) private {\\n        uint256 version = _programInfos[programId].product.latestVersion();\\n        _programs[programId].complete(version);\\n\\n        emit ProgramCompleted(programId, version);\\n    }\\n\\n    /**\\n     * @notice Settles unsettled balance for `account`\\n     * @dev Called immediately proceeding a position update in the corresponding product\\n     * @param account Account to sync\\n     */\\n    function syncAccount(address account) external onlyProduct {\\n        IProduct product = IProduct(msg.sender);\\n\\n        uint256 programCount = programsForLength(product);\\n\\n        for (uint256 i; i < programCount; i++) {\\n            uint256 programId = programsForAt(product, i);\\n            _programs[programId].settle(_programInfos[programId], account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims all of `msg.sender`'s rewards for `product` programs\\n     * @param product Product to claim rewards for\\n     */\\n    function claim(IProduct product) external nonReentrant notPausedProduct(product) isProduct(product) {\\n        // settle product markets\\n        product.settle();\\n        product.settleAccount(msg.sender);\\n\\n        // claim\\n        uint256 programCount = programsForLength(product);\\n        for (uint256 i; i < programCount; i++) {\\n            claimInternal(msg.sender, programsForAt(product, i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims all of `msg.sender`'s rewards for a specific program\\n     * @param programId Program to claim rewards for\\n     */\\n    function claim(uint256 programId) external nonReentrant validProgram(programId) notPausedProgram(programId) {\\n        IProduct product = _programInfos[programId].product;\\n\\n        // settle product markets\\n        product.settle();\\n        product.settleAccount(msg.sender);\\n\\n        // claim\\n        claimInternal(msg.sender, programId);\\n    }\\n\\n    /**\\n     * @notice Claims all of `account`'s rewards for a specific program\\n     * @dev Internal helper, assumes account has already been product-settled prior to calling\\n     * @param account Account to claim rewards for\\n     * @param programId Program to claim rewards for\\n     */\\n    function claimInternal(address account, uint256 programId) private {\\n        Program storage program = _programs[programId];\\n        ProgramInfo memory programInfo = _programInfos[programId];\\n\\n        program.settle(programInfo, account);\\n        UFixed18 claimedAmount = program.claim(account);\\n\\n        programInfo.token.push(account, claimedAmount);\\n\\n        emit Claim(account, programId, claimedAmount);\\n    }\\n\\n    /**\\n     * @notice Claims all `tokens` fees to the protocol treasury\\n     * @param tokens Tokens to claim fees for\\n     */\\n    function claimFee(Token[] calldata tokens) external notPaused {\\n        for(uint256 i; i < tokens.length; i++) {\\n            Token token = tokens[i];\\n            UFixed18 amount = fees[token];\\n            if (amount.isZero()) continue;\\n\\n            fees[token] = UFixed18Lib.ZERO;\\n            token.push(controller().treasury(), amount);\\n\\n            emit FeeClaim(token, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns program info for program `programId`\\n     * @param programId Program to return for\\n     * @return Program info\\n     */\\n    function programInfos(uint256 programId) external view returns (ProgramInfo memory) {\\n        return _programInfos[programId];\\n    }\\n\\n    /**\\n     * @notice Returns `account`'s total unclaimed rewards for a specific program\\n     * @param account Account to return for\\n     * @param programId Program to return for\\n     * @return `account`'s total unclaimed rewards for `programId`\\n     */\\n    function unclaimed(address account, uint256 programId) external view returns (UFixed18) {\\n        if (programId >= _programInfos.length) return (UFixed18Lib.ZERO);\\n\\n        ProgramInfo memory programInfo = _programInfos[programId];\\n        return _programs[programId].unclaimed(programInfo, account);\\n    }\\n\\n    /**\\n     * @notice Returns `account`'s latest synced version for a specific program\\n     * @param account Account to return for\\n     * @param programId Program to return for\\n     * @return `account`'s latest synced version for `programId`\\n     */\\n    function latestVersion(address account, uint256 programId) external view returns (uint256) {\\n        return _programs[programId].latestVersion[account];\\n    }\\n\\n    /**\\n     * @notice Returns `account`'s settled rewards for a specific program\\n     * @param account Account to return for\\n     * @param programId Program to return for\\n     * @return `account`'s settled rewards for `programId`\\n     */\\n    function settled(address account, uint256 programId) external view returns (UFixed18) {\\n        return _programs[programId].settled[account];\\n    }\\n\\n    /**\\n     * @notice Returns available rewards for a specific program\\n     * @param programId Program to return for\\n     * @return Available rewards for `programId`\\n     */\\n    function available(uint256 programId) external view returns (UFixed18) {\\n        return _programs[programId].available;\\n    }\\n\\n    /**\\n     * @notice Returns the version completed for a specific program\\n     * @param programId Program to return for\\n     * @return The version completed for `programId`\\n     */\\n    function versionComplete(uint256 programId) external view returns (uint256) {\\n        return _programs[programId].versionComplete;\\n    }\\n\\n    /**\\n     * @notice Returns whether closed for a specific program\\n     * @param programId Program to return for\\n     * @return whether closed for `programId`\\n     */\\n    function closed(uint256 programId) external view returns (bool) {\\n        return _programs[programId].closed;\\n    }\\n\\n    /**\\n     * @notice Returns quantity of programs for a specific product\\n     * @param product Product to return for\\n     * @return Quantity of programs for `product`\\n     */\\n    function programsForLength(IProduct product) public view returns (uint256) {\\n        return _registry[product].length();\\n    }\\n\\n    /**\\n     * @notice Returns the program at index `index` for a specific product\\n     * @param product Product to return for\\n     * @param index Index to return for\\n     * @return The program at index `index` for `product`\\n     */\\n    function programsForAt(IProduct product, uint256 index) public view returns (uint256) {\\n        return _registry[product].at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the owner of a specific program\\n     * @param programId Program to return for\\n     * @return The owner of `programId`\\n     */\\n    function owner(uint256 programId) public view returns (address) {\\n        Program storage program = _programs[programId];\\n        ProgramInfo storage programInfo = _programInfos[programId];\\n        return program.protocolOwned ? controller().owner() : controller().owner(programInfo.product);\\n    }\\n\\n    /**\\n     * @notice Returns the treasury of a specific program\\n     * @param programId Program to return for\\n     * @return The treasury of `programId`\\n     */\\n    function treasury(uint256 programId) public view returns (address) {\\n        Program storage program = _programs[programId];\\n        ProgramInfo storage programInfo = _programInfos[programId];\\n        return program.protocolOwned ? controller().treasury() : controller().treasury(programInfo.product);\\n    }\\n\\n    /**\\n     * @notice Returns the paused status of a specific program\\n     * @param programId Program to return for\\n     * @return The paused status of `programId`\\n     */\\n    function paused(uint256 programId) public view returns (bool) {\\n        return controller().paused(_programInfos[programId].product);\\n    }\\n\\n    /// @dev Only allow the owner of `programId` to call\\n    modifier onlyProgramOwner(uint256 programId) {\\n        if (msg.sender != owner(programId)) revert IncentivizerNotProgramOwnerError(msg.sender, programId);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow when `programId` is not paused\\n    modifier notPausedProgram(uint256 programId) {\\n        if (paused(programId)) revert IncentivizerProgramPausedError(msg.sender, programId);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow a valid `programId`\\n    modifier validProgram(uint256 programId) {\\n        if (programId >= _programInfos.length) revert IncentivizerInvalidProgramError(programId);\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa31d8eb4c3b788262dab5bcc8645d28470e0672d98e3de85b393a4bb22e8d98d\",\"license\":\"Apache-2.0\"},\"contracts/incentivizer/types/Program.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/types/Position.sol\\\";\\nimport \\\"../../interfaces/types/ProgramInfo.sol\\\";\\n\\nstruct Program {\\n    /// @dev Mapping of latest synced oracle version for each account\\n    mapping(address => uint256) latestVersion;\\n\\n    /// @dev Mapping of latest rewards settled for each account\\n    mapping(address => UFixed18) settled;\\n\\n    /// @dev Total amount of rewards yet to be claimed\\n    UFixed18 available;\\n\\n    /// @dev Oracle version that the program completed, 0 is still ongoing\\n    uint256 versionComplete;\\n\\n    /// @dev Whether the program is closed\\n    bool closed;\\n\\n    /// @dev Whether the program is owned by the protocol (true) or by the product owner (false)\\n    bool protocolOwned;\\n}\\nusing ProgramLib for Program global;\\n\\nlibrary ProgramLib {\\n    /**\\n     * @notice Initializes the program state\\n     * @param self Static The Program to operate on\\n     * @param programInfo Static program information\\n     * @param protocolOwned Whether the program is protocol owned\\n     */\\n    function initialize(Program storage self, ProgramInfo memory programInfo, bool protocolOwned) internal {\\n        self.available = programInfo.amount.sum();\\n        self.protocolOwned = protocolOwned;\\n    }\\n\\n    /**\\n     * @notice Returns whether a program can be closed\\n     * @dev Programs must wait to be closed until after their grace period has concluded whether\\n     *      or not it was completed early\\n     * @param self Static The Program to operate on\\n     * @param programInfo Static program information\\n     * @param timestamp The effective timestamp to check\\n     * @return Whether the program can be closed\\n     */\\n    function canClose(Program storage self, ProgramInfo memory programInfo, uint256 timestamp) internal view returns (bool) {\\n        uint256 end = self.versionComplete == 0 ?\\n            programInfo.start + programInfo.duration :\\n            programInfo.product.productProvider().atVersion(self.versionComplete).timestamp;\\n        return timestamp >= (end + programInfo.grace);\\n    }\\n\\n    /**\\n     * @notice Closes the program\\n     * @param self Static The Program to operate on\\n     * @return amountToReturn Amount of remaining unclaimed reward tokens to be returned\\n     */\\n    function close(Program storage self) internal returns (UFixed18 amountToReturn) {\\n        amountToReturn = self.available;\\n        self.available = UFixed18Lib.ZERO;\\n        self.closed = true;\\n    }\\n\\n    /**\\n     * @notice Completes the program\\n     * @dev Completion prevents anymore rewards from accruing, but users may still claim during the\\n     *      grace period until a program is closed\\n     * @param self Static The Program to operate on\\n     * @param oracleVersion The effective oracle version of completion\\n     */\\n    function complete(Program storage self, uint256 oracleVersion) internal {\\n        self.versionComplete = oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Settles unclaimed rewards for account `account`\\n     * @param self Static The Program to operate on\\n     * @param programInfo Static program information\\n     * @param account The account to settle for\\n     */\\n    function settle(Program storage self, ProgramInfo memory programInfo, address account) internal {\\n        (UFixed18 unsettledAmount, uint256 unsettledVersion) = unsettled(self, programInfo, account);\\n\\n        self.settled[account] = self.settled[account].add(unsettledAmount);\\n        self.available = self.available.sub(unsettledAmount);\\n        self.latestVersion[account] = unsettledVersion;\\n    }\\n\\n    /**\\n     * @notice Claims settled rewards for account `account`\\n     * @param self Static The Program to operate on\\n     * @param account The account to claim for\\n     */\\n    function claim(Program storage self, address account)\\n    internal returns (UFixed18 claimedAmount) {\\n        claimedAmount = self.settled[account];\\n        self.settled[account] = UFixed18Lib.ZERO;\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of unclaimed rewards for account `account`\\n     * @dev This includes both settled and unsettled unclaimed rewards\\n     * @param self Static The Program to operate on\\n     * @param programInfo Static program information\\n     * @param account The account to claim for\\n     * @return Total amount of unclaimed rewards for account\\n     */\\n    function unclaimed(Program storage self, ProgramInfo memory programInfo, address account)\\n    internal view returns (UFixed18) {\\n        (UFixed18 unsettledAmount, ) = unsettled(self, programInfo, account);\\n        return unsettledAmount.add(self.settled[account]);\\n    }\\n\\n    /**\\n     * @notice Returns the unsettled amount of unclaimed rewards for account `account`\\n     * @dev Clears when a program is closed\\n     *      Assumes that position is unchanged since last settlement, must be settled prior to user position update\\n     * @param self Static The Program to operate on\\n     * @param programInfo Static program information\\n     * @param account The account to claim for\\n     * @return amount Amount of unsettled rewards for account\\n     * @return latestVersion Effective oracle version for computation\\n     */\\n    function unsettled(Program storage self, ProgramInfo memory programInfo, address account)\\n    private view returns (UFixed18 amount, uint256 latestVersion) {\\n        IProduct product = programInfo.product;\\n\\n        uint256 userLatestVersion = self.latestVersion[account];\\n        Position memory userPosition = product.position(account);\\n        uint256 userSyncedTo = product.latestVersion(account);\\n\\n        // compute version to sync to\\n        latestVersion = self.versionComplete == 0 ? userSyncedTo : Math.min(userSyncedTo, self.versionComplete);\\n        uint256 latestTimestamp = product.productProvider().atVersion(latestVersion).timestamp;\\n\\n        // check initialization conditions\\n        if (!programInfo.isStarted(latestTimestamp)) return (UFixed18Lib.ZERO, 0); // program hasn't started\\n        if (self.closed) return (UFixed18Lib.ZERO, latestVersion);                 // program has closed\\n        if (userLatestVersion == 0) return (UFixed18Lib.ZERO, latestVersion);      // user has not been initialized\\n\\n        // compute unsettled amount\\n        Accumulator memory userShareDelta =\\n            userPosition.mul(product.shareAtVersion(latestVersion).sub(product.shareAtVersion(userLatestVersion)));\\n        amount = UFixed18Lib.from(programInfo.amountPerShare().mul(userShareDelta).sum());\\n    }\\n}\\n\",\"keccak256\":\"0x94a045471b940f918a0445dfdf012bccbcab6d088d840c734dea8d76c14190f0\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface ICollateral {\\n    event Deposit(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event Withdrawal(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event AccountSettle(IProduct indexed product, address indexed account, Fixed18 amount, UFixed18 newShortfall);\\n    event ProductSettle(IProduct indexed product, UFixed18 protocolFee, UFixed18 productFee);\\n    event Liquidation(address indexed user, IProduct indexed product, address liquidator, UFixed18 fee);\\n    event ShortfallResolution(IProduct indexed product, UFixed18 amount);\\n    event FeeClaim(address indexed account, UFixed18 amount);\\n\\n    error CollateralCantLiquidate(UFixed18 totalMaintenance, UFixed18 totalCollateral);\\n    error CollateralInsufficientCollateralError();\\n    error CollateralUnderLimitError();\\n    error CollateralZeroAddressError();\\n\\n    function token() external view returns (Token18);\\n    function fees(address account) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function depositTo(address account, IProduct product, UFixed18 amount) external;\\n    function withdrawTo(address account, IProduct product, UFixed18 amount) external;\\n    function liquidate(address account, IProduct product) external;\\n    function settleAccount(address account, Fixed18 amount) external;\\n    function settleProduct(UFixed18 amount) external;\\n    function collateral(address account, IProduct product) external view returns (UFixed18);\\n    function collateral(IProduct product) external view returns (UFixed18);\\n    function shortfall(IProduct product) external view returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external view returns (bool);\\n    function liquidatableNext(address account, IProduct product) external view returns (bool);\\n    function resolveShortfall(IProduct product, UFixed18 amount) external;\\n    function claimFee() external;\\n}\\n\",\"keccak256\":\"0x5411fbe8f10eeb3d1a2fdf3ad4ce16a13d4bd889c737abd40cd3ebc4eb90cfff\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IIncentivizer.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IController {\\n    /// @dev Coordinator of a one or many products\\n    struct Coordinator {\\n        /// @dev Pending owner of the product, can accept ownership\\n        address pendingOwner;\\n\\n        /// @dev Owner of the product, allowed to update select parameters\\n        address owner;\\n\\n        /// @dev Treasury of the product, collects fees\\n        address treasury;\\n\\n        /// @dev the address that is allowed to pause the coordinated products (0-address defaults to owner)\\n        address pauser;\\n\\n        /// @dev Whether the coordinated products are paused\\n        bool paused;\\n    }\\n\\n    event CollateralUpdated(ICollateral newCollateral);\\n    event IncentivizerUpdated(IIncentivizer newIncentivizer);\\n    event ProductBeaconUpdated(IBeacon newProductBeacon);\\n    event ProtocolFeeUpdated(UFixed18 newProtocolFee);\\n    event MinFundingFeeUpdated(UFixed18 newMinFundingFee);\\n    event LiquidationFeeUpdated(UFixed18 newLiquidationFee);\\n    event IncentivizationFeeUpdated(UFixed18 newIncentivizationFee);\\n    event MinCollateralUpdated(UFixed18 newMinCollateral);\\n    event ProgramsPerProductUpdated(uint256 newProgramsPerProduct);\\n    event CoordinatorPendingOwnerUpdated(uint256 indexed coordinatorId, address newPendingOwner);\\n    event CoordinatorOwnerUpdated(uint256 indexed coordinatorId, address newOwner);\\n    event CoordinatorTreasuryUpdated(uint256 indexed coordinatorId, address newTreasury);\\n    event CoordinatorPauserUpdated(uint256 indexed coordinatorId, address pauser);\\n    event CoordinatorPausedUpdated(uint256 indexed coordinatorId, bool paused);\\n    event AllowedUpdated(uint256 indexed coordinatorId, bool allowed);\\n    event CoordinatorCreated(uint256 indexed coordinatorId, address owner);\\n    event ProductCreated(IProduct indexed product, IProductProvider provider);\\n\\n    error ControllerAlreadyInitializedError();\\n    error ControllerNoZeroCoordinatorError();\\n    error ControllerNotAllowedError();\\n    error ControllerNotPauserError(uint256 coordinatorId);\\n    error ControllerNotOwnerError(uint256 controllerId);\\n    error ControllerNotPendingOwnerError(uint256 controllerId);\\n    error ControllerInvalidProtocolFeeError();\\n    error ControllerInvalidMinFundingFeeError();\\n    error ControllerInvalidLiquidationFeeError();\\n    error ControllerInvalidIncentivizationFeeError();\\n\\n    function collateral() external view returns (ICollateral);\\n    function incentivizer() external view returns (IIncentivizer);\\n    function productBeacon() external view returns (IBeacon);\\n    function coordinators(uint256 collateralId) external view returns (Coordinator memory);\\n    function coordinatorFor(IProduct product) external view returns (uint256);\\n    function allowed(uint256 collateralId) external view returns (bool);\\n    function protocolFee() external view returns (UFixed18);\\n    function minFundingFee() external view returns (UFixed18);\\n    function liquidationFee() external view returns (UFixed18);\\n    function incentivizationFee() external view returns (UFixed18);\\n    function minCollateral() external view returns (UFixed18);\\n    function programsPerProduct() external view returns (uint256);\\n    function initialize(ICollateral collateral_, IIncentivizer incentivizer_, IBeacon productBeacon_) external;\\n    function createCoordinator() external returns (uint256);\\n    function updateCoordinatorPendingOwner(uint256 coordinatorId, address newPendingOwner) external;\\n    function acceptCoordinatorOwner(uint256 coordinatorId) external;\\n    function updateCoordinatorTreasury(uint256 coordinatorId, address newTreasury) external;\\n    function updateCoordinatorPauser(uint256 coordinatorId, address newPauser) external;\\n    function updateCoordinatorPaused(uint256 coordinatorId, bool newPaused) external;\\n    function createProduct(uint256 coordinatorId, IProductProvider provider) external returns (IProduct);\\n    function updateCollateral(ICollateral newCollateral) external;\\n    function updateIncentivizer(IIncentivizer newIncentivizer) external;\\n    function updateProductBeacon(IBeacon newProductBeacon) external;\\n    function updateProtocolFee(UFixed18 newProtocolFee) external;\\n    function updateMinFundingFee(UFixed18 newMinFundingFee) external;\\n    function updateLiquidationFee(UFixed18 newLiquidationFee) external;\\n    function updateIncentivizationFee(UFixed18 newIncentivizationFee) external;\\n    function updateMinCollateral(UFixed18 newMinCollateral) external;\\n    function updateProgramsPerProduct(uint256 newProductsPerProduct) external;\\n    function updateAllowed(uint256 coordinatorId, bool newAllowed) external;\\n    function isProduct(IProduct product) external view returns (bool);\\n    function owner() external view returns (address);\\n    function owner(uint256 coordinatorId) external view returns (address);\\n    function owner(IProduct product) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasury(uint256 coordinatorId) external view returns (address);\\n    function treasury(IProduct product) external view returns (address);\\n    function pauser() external view returns (address);\\n    function pauser(uint256 coordinatorId) external view returns (address);\\n    function pauser(IProduct product) external view returns (address);\\n    function paused() external view returns (bool);\\n    function paused(uint256 coordinatorId) external view returns (bool);\\n    function paused(IProduct product) external view returns (bool);\\n}\",\"keccak256\":\"0x79bc31fa1c607fdd8d53e162452b9b9a3ba232834b57a74779d306d496cf8c23\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IIncentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/ProgramInfo.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IIncentivizer {\\n    event ProgramCompleted(uint256 indexed programId, uint256 versionComplete);\\n    event ProgramClosed(uint256 indexed programId, UFixed18 amount);\\n    event ProgramCreated(uint256 indexed programId, IProduct product, Token token, UFixed18 amountMaker, UFixed18 amountTaker, uint256 start, uint256 duration, uint256 grace, UFixed18 fee);\\n    event Claim(address indexed account, uint256 indexed programId, UFixed18 amount);\\n    event FeeClaim(Token indexed token, UFixed18 amount);\\n\\n    error IncentivizerProgramNotClosableError();\\n    error IncentivizerTooManyProgramsError();\\n    error IncentivizerProgramPausedError(address sender, uint256 programId);\\n    error IncentivizerNotProgramOwnerError(address sender, uint256 programId);\\n    error IncentivizerInvalidProgramError(uint256 programId);\\n\\n    function programInfos(uint256 programId) external view returns (ProgramInfo memory);\\n    function fees(Token token) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function create(ProgramInfo calldata info) external returns (uint256);\\n    function end(uint256 programId) external;\\n    function close(uint256 programId) external;\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function syncAccount(address account) external;\\n    function claim(IProduct product) external;\\n    function claim(uint256 programId) external;\\n    function claimFee(Token[] calldata tokens) external;\\n    function unclaimed(address account, uint256 programId) external view returns (UFixed18);\\n    function latestVersion(address account, uint256 programId) external view returns (uint256);\\n    function settled(address account, uint256 programId) external view returns (UFixed18);\\n    function available(uint256 programId) external view returns (UFixed18);\\n    function versionComplete(uint256 programId) external view returns (uint256);\\n    function closed(uint256 programId) external view returns (bool);\\n    function programsForLength(IProduct product) external view returns (uint256);\\n    function programsForAt(IProduct product, uint256 index) external view returns (uint256);\\n    function owner(uint256 programId) external view returns (address);\\n    function treasury(uint256 programId) external view returns (address);\\n}\",\"keccak256\":\"0xa8103111b857f81b34603bf9c59d48c366dcdebffc08610fd25507c6d54e1762\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    function sync() external returns (OracleVersion memory);\\n    function currentVersion() external view returns (OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0x22257e85b93c8224f06c093b195b610cc5da001bb3f8ad97bd0dbf6c0434b7ba\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./types/PrePosition.sol\\\";\\nimport \\\"./types/Accumulator.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IProduct {\\n    event Settle(uint256 preVersion, uint256 toVersion);\\n    event AccountSettle(address indexed account, uint256 preVersion, uint256 toVersion);\\n    event MakeOpened(address indexed account, UFixed18 amount);\\n    event TakeOpened(address indexed account, UFixed18 amount);\\n    event MakeClosed(address indexed account, UFixed18 amount);\\n    event TakeClosed(address indexed account, UFixed18 amount);\\n\\n    error ProductInsufficientLiquidityError(UFixed18 socializationFactor);\\n    error ProductDoubleSidedError();\\n    error ProductOverClosedError();\\n    error ProductInsufficientCollateralError();\\n    error ProductInLiquidationError();\\n    error ProductMakerOverLimitError();\\n    error ProductOracleBootstrappingError();\\n\\n    function productProvider() external view returns (IProductProvider);\\n    function initialize(IProductProvider productProvider_) external;\\n    function settle() external;\\n    function settleAccount(address account) external;\\n    function openTake(UFixed18 amount) external;\\n    function closeTake(UFixed18 amount) external;\\n    function openMake(UFixed18 amount) external;\\n    function closeMake(UFixed18 amount) external;\\n    function closeAll(address account) external;\\n    function maintenance(address account) external view returns (UFixed18);\\n    function maintenanceNext(address account) external view returns (UFixed18);\\n    function isClosed(address account) external view returns (bool);\\n    function isLiquidating(address account) external view returns (bool);\\n    function position(address account) external view returns (Position memory);\\n    function pre(address account) external view returns (PrePosition memory);\\n    function latestVersion() external view returns (uint256);\\n    function positionAtVersion(uint256 oracleVersion) external view returns (Position memory);\\n    function pre() external view returns (PrePosition memory);\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function latestVersion(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc668cdee0ac1e3e818fa0067681b067c11277ad3e729b7a32852c778b87bf0\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\n\\ninterface IProductProvider is IOracleProvider {\\n    function oracle() external view returns (IOracleProvider);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function rate(Position memory position) external view returns (Fixed18);\\n    function maintenance() external view returns (UFixed18);\\n    function fundingFee() external view returns (UFixed18);\\n    function makerFee() external view returns (UFixed18);\\n    function takerFee() external view returns (UFixed18);\\n    function makerLimit() external view returns (UFixed18);\\n}\\n\",\"keccak256\":\"0x67102367daec489222beb994a4c6cf2628352dbfc1ddb742d9d01f930ca09183\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Accumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./PackedAccumulator.sol\\\";\\n\\n/// @dev Accumulator type\\nstruct Accumulator {\\n    /// @dev maker accumulator per share\\n    Fixed18 maker;\\n    /// @dev taker accumulator per share\\n    Fixed18 taker;\\n}\\nusing AccumulatorLib for Accumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that surfaces math operations for the Accumulator type.\\n * @dev Accumulators track the cumulative change in position value over time for the maker and taker positions\\n *      respectively. Account-level accumulators can then use two of these values `a` and `a'` to compute the\\n *      change in position value since last sync. This change in value is then used to compute P&L and fees.\\n */\\nlibrary AccumulatorLib {\\n    /**\\n     * @notice Creates a packed accumulator from an accumulator\\n     * @param self an accumulator\\n     * @return New packed accumulator\\n     */\\n    function pack(Accumulator memory self) internal pure returns (PackedAccumulator memory) {\\n        return PackedAccumulator({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Adds two accumulators together\\n     * @param a The first accumulator to sum\\n     * @param b The second accumulator to sum\\n     * @return The resulting summed accumulator\\n     */\\n    function add(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts accumulator `b` from `a`\\n     * @param a The accumulator to subtract from\\n     * @param b The accumulator to subtract\\n     * @return The resulting subtracted accumulator\\n     */\\n    function sub(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies two accumulators together\\n     * @param a The first accumulator to multiply\\n     * @param b The second accumulator to multiply\\n     * @return The resulting multiplied accumulator\\n     */\\n    function mul(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.mul(b.maker), taker: a.taker.mul(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single accumulator\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Accumulator memory self) internal pure returns (Fixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n}\\n\",\"keccak256\":\"0x419fbe153e5569ce6ed9a4d563e99a99fa7476257f33faddabbe9582efd42d5b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev PackedAccumulator type\\nstruct PackedAccumulator {\\n    /// @dev maker accumulator per share\\n    PackedFixed18 maker;\\n    /// @dev taker accumulator per share\\n    PackedFixed18 taker;\\n}\\nusing PackedAccumulatorLib for PackedAccumulator global;\\n\\n/**\\n * @title PackedAccumulatorLib\\n * @dev A packed version of the Accumulator which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Accumulator type.\\n */\\nlibrary PackedAccumulatorLib {\\n    /**\\n     * @notice Creates an accumulator from a packed accumulator\\n     * @param self packed accumulator\\n     * @return New accumulator\\n     */\\n    function unpack(PackedAccumulator memory self) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0xe104c4b277f0247afbf22dc31278fa4514911e0fbe89beacac9d199c83a44a2f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedUFixed18.sol\\\";\\nimport \\\"./Position.sol\\\";\\n\\n/// @dev PackedPosition type\\nstruct PackedPosition {\\n    /// @dev Quantity of the maker position\\n    PackedUFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    PackedUFixed18 taker;\\n}\\nusing PackedPositionLib for PackedPosition global;\\n\\n/**\\n * @title PackedPositionLib\\n * @dev A packed version of the Position which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Position type.\\n */\\nlibrary PackedPositionLib {\\n    /**\\n     * @notice Creates an position from a packed position\\n     * @param self packed position\\n     * @return New position\\n     */\\n    function unpack(PackedPosition memory self) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0x89b33d7d89e77dd130a744f8b2bb592d001a12c030e09b99b7cb6226d2b1343b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\nimport \\\"./PrePosition.sol\\\";\\nimport \\\"./PackedPosition.sol\\\";\\n\\n/// @dev Position type\\nstruct Position {\\n    /// @dev Quantity of the maker position\\n    UFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    UFixed18 taker;\\n}\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Library that surfaces math and settlement computations for the Position type.\\n * @dev Positions track the current quantity of the account's maker and taker positions respectively\\n *      denominated as a unit of the product's payoff function.\\n */\\nlibrary PositionLib {\\n    /**\\n     * @notice Creates a packed position from an position\\n     * @param self A position\\n     * @return New packed position\\n     */\\n    function pack(Position memory self) internal pure returns (PackedPosition memory) {\\n        return PackedPosition({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Returns whether the position is fully empty\\n     * @param self A position\\n     * @return Whether the position is empty\\n     */\\n    function isEmpty(Position memory self) internal pure returns (bool) {\\n        return self.maker.isZero() && self.taker.isZero();\\n    }\\n\\n    /**\\n     * @notice Adds position `a` and `b` together, returning the result\\n     * @param a The first position to sum\\n     * @param b The second position to sum\\n     * @return Resulting summed position\\n     */\\n    function add(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts position `b` from `a`, returning the result\\n     * @param a The position to subtract from\\n     * @param b The position to subtract\\n     * @return Resulting subtracted position\\n     */\\n    function sub(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies position `self` by accumulator `accumulator` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param accumulator The accumulator to multiply by\\n     * @return Resulting multiplied accumulator\\n     */\\n    function mul(Position memory self, Accumulator memory accumulator) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).mul(accumulator.maker),\\n            taker: Fixed18Lib.from(self.taker).mul(accumulator.taker)\\n        });\\n    }\\n\\n    /**\\n     * @notice Scales position `self` by fixed-decimal `scale` and returns the resulting position\\n     * @param self The Position to operate on\\n     * @param scale The Fixed-decimal to scale by\\n     * @return Resulting scaled position\\n     */\\n    function mul(Position memory self, UFixed18 scale) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.mul(scale), taker: self.taker.mul(scale)});\\n    }\\n\\n    /**\\n     * @notice Divides position `self` by `b` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param b The number to divide by\\n     * @return Resulting divided accumulator\\n     */\\n    function div(Position memory self, uint256 b) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).div(Fixed18Lib.from(UFixed18Lib.from(b))),\\n            taker: Fixed18Lib.from(self.taker).div(Fixed18Lib.from(UFixed18Lib.from(b)))\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of `self`'s maker and taker values\\n     * @param self The struct to operate on\\n     * @return Resulting maximum value\\n     */\\n    function max(Position memory self) internal pure returns (UFixed18) {\\n        return UFixed18Lib.max(self.maker, self.taker);\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single position\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Position memory self) internal pure returns (UFixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n\\n    /**\\n     * @notice Computes the next position after the pending-settlement position delta is included\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @return Next Position\\n     */\\n    function next(Position memory self, PrePosition memory pre) internal pure returns (Position memory) {\\n        return sub(add(self, pre.openPosition), pre.closePosition);\\n    }\\n\\n    /**\\n     * @notice Returns the settled position at oracle version `toOracleVersion`\\n     * @dev Checks if a new position is ready to be settled based on the provided `toOracleVersion`\\n     *      and `pre` and returns accordingly\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return Settled position at oracle version\\n     * @return Fee accrued from opening or closing the position\\n     * @return Whether a new position was settled\\n     */\\n    function settled(\\n        Position memory self,\\n        PrePosition memory pre,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (Position memory, UFixed18, bool) {\\n        return pre.canSettle(toOracleVersion) ? (next(self, pre), pre.computeFee(provider, toOracleVersion), true) : (self, UFixed18Lib.ZERO, false);\\n    }\\n\\n    /**\\n     * @notice Returns the socialization factor for the current position\\n     * @dev Socialization account for the case where `taker` > `maker` temporarily due to a liquidation\\n     *      on the maker side. This dampens the taker's exposure pro-rata to ensure that the maker side\\n     *      is never exposed over 1 x short.\\n     * @param self The Position to operate on\\n     * @return Socialization factor\\n     */\\n    function socializationFactor(Position memory self) internal pure returns (UFixed18) {\\n        return self.taker.isZero() ? UFixed18Lib.ONE : UFixed18Lib.min(UFixed18Lib.ONE, self.maker.div(self.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x3daae0f4184ae21e9883d8a87853ce39b53893ecb37a5bbb32f94b3b9973a347\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PrePosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"./ProductProvider.sol\\\";\\n\\n/// @dev PrePosition type\\nstruct PrePosition {\\n    /// @dev Oracle version at which the new position delta was recorded\\n    uint256 oracleVersion;\\n\\n    /// @dev Size of position to open at oracle version\\n    Position openPosition;\\n\\n    /// @dev Size of position to close at oracle version\\n    Position closePosition;\\n}\\nusing PrePositionLib for PrePosition global;\\n\\n/**\\n * @title PrePositionLib\\n * @notice Library that manages a pre-settlement position delta.\\n * @dev PrePositions track the currently awaiting-settlement deltas to a settled Position. These are\\n *      Primarily necessary to introduce lag into the settlement system such that oracle lag cannot be\\n *      gamed to a user's advantage. When a user opens or closes a new position, it sits as a PrePosition\\n *      for one oracle version until it's settle into the Position, making it then effective. PrePositions\\n *      are automatically settled at the correct oracle version even if a flywheel call doesn't happen until\\n *      several version into the future by using the historical version lookups in the corresponding \\\"Versioned\\\"\\n *      global state types.\\n */\\nlibrary PrePositionLib {\\n    using ProductProviderLib for IProductProvider;\\n\\n    /**\\n     * @notice Returns whether there is no pending-settlement position delta\\n     * @dev Can be \\\"empty\\\" even with a non-zero oracleVersion if a position is opened and\\n     *      closed in the same version netting out to a zero position delta\\n     * @param self The struct to operate on\\n     * @return Whether the pending-settlement position delta is empty\\n     */\\n    function isEmpty(PrePosition memory self) internal pure returns (bool) {\\n        return self.openPosition.isEmpty() && self.closePosition.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The position amount to open\\n     */\\n    function openMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.maker = self.openPosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The maker position amount to close\\n     */\\n    function closeMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.maker = self.closePosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to open\\n     */\\n    function openTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.taker = self.openPosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netTake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to close\\n     */\\n    function closeTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.taker = self.closePosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        netTake(self);\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the maker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function netMake(PrePosition storage self) private {\\n        if (self.openPosition.maker.gt(self.closePosition.maker)) {\\n            self.openPosition.maker = self.openPosition.maker.sub(self.closePosition.maker);\\n            self.closePosition.maker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.maker = self.closePosition.maker.sub(self.openPosition.maker);\\n            self.openPosition.maker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the taker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function netTake(PrePosition storage self) private {\\n        if (self.openPosition.taker.gt(self.closePosition.taker)) {\\n            self.openPosition.taker = self.openPosition.taker.sub(self.closePosition.taker);\\n            self.closePosition.taker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.taker = self.closePosition.taker.sub(self.openPosition.taker);\\n            self.openPosition.taker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the the pending position delta can be settled at version `toOracleVersion`\\n     * @dev Pending-settlement positions deltas can be settled (1) oracle version after they are recorded\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The potential oracle version to settle\\n     * @return Whether the position delta can be settled\\n     */\\n    function canSettle(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (bool) {\\n        return !isEmpty(self) && toOracleVersion.version > self.oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Computes the fee incurred for opening or closing the pending-settlement position\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version at which settlement takes place\\n     * @return positionFee The maker / taker fee incurred\\n     */\\n    function computeFee(\\n        PrePosition memory self,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (UFixed18) {\\n        Position memory positionDelta = self.openPosition.add(self.closePosition);\\n\\n        (UFixed18 makerNotional, UFixed18 takerNotional) = (\\n            Fixed18Lib.from(positionDelta.maker).mul(toOracleVersion.price).abs(),\\n            Fixed18Lib.from(positionDelta.taker).mul(toOracleVersion.price).abs()\\n        );\\n\\n        return makerNotional.mul(provider.safeMakerFee()).add(takerNotional.mul(provider.safeTakerFee()));\\n    }\\n\\n    /**\\n     * @notice Computes the next oracle version to settle\\n     * @dev - If there is no pending-settlement position delta, returns the current oracle version\\n     *      - If the pending-settlement position delta is not yet ready to be settled, returns the current oracle version\\n     *      - Otherwise returns the oracle version at which the pending-settlement position delta can be first settled\\n     *\\n     *      Corresponds to point (b) in the Position settlement flow\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @return Next oracle version to settle\\n     */\\n    function oracleVersionToSettle(PrePosition storage self, uint256 currentVersion) internal view returns (uint256) {\\n        uint256 next = self.oracleVersion + 1;\\n\\n        if (next == 1) return currentVersion;             // no pre position\\n        if (next > currentVersion) return currentVersion; // pre in future\\n        return next;                                      // settle pre\\n    }\\n}\\n\",\"keccak256\":\"0x518e0e663046150cca4f0b88fdcf861b1283455d0ce0e7ea908996f476b45fcb\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"../IProductProvider.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title ProductProviderLib\\n * @notice Library that adds a safeguard wrapper to certain product parameters.\\n * @dev Product providers are semi-untrusted as they contain custom code from the product owners. Owners\\n *      have full control over this parameter-setting code, however there are some \\\"known ranges\\\" that\\n *      a parameter cannot be outside of (i.e. a fee being over 100%).\\n */\\nlibrary ProductProviderLib {\\n    /**\\n     * @notice Returns the minimum funding fee parameter with a capped range for safety\\n     * @dev Caps controller.minFundingFee() <= self.minFundingFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @param controller The protocol Factory contract\\n     * @return Safe minimum funding fee parameter\\n     */\\n    function safeFundingFee(IProductProvider self, IController controller) internal view returns (UFixed18) {\\n        return self.fundingFee().max(controller.minFundingFee()).min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the maker fee parameter with a capped range for safety\\n     * @dev Caps self.makerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe maker fee parameter\\n     */\\n    function safeMakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.makerFee().min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the taker fee parameter with a capped range for safety\\n     * @dev Caps self.takerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe taker fee parameter\\n     */\\n    function safeTakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.takerFee().min(UFixed18Lib.ONE);\\n    }\\n}\\n\",\"keccak256\":\"0x614330e1b42b84df30d9a240ce54a692948815d7b13446c86c63361936cedf5d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProgramInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\nstruct ProgramInfo {\\n    /// @dev Amount of total maker and taker rewards\\n    Position amount;\\n\\n    /// @dev start timestamp of the program\\n    uint256 start;\\n\\n    /// @dev duration of the program (in seconds)\\n    uint256 duration;\\n\\n    /// @dev grace period the program where funds can still be claimed (in seconds)\\n    uint256 grace;\\n\\n    /// @dev Product market contract to be incentivized\\n    IProduct product;\\n\\n    /// @dev Reward ERC20 token contract\\n    Token token;\\n}\\nusing ProgramInfoLib for ProgramInfo global;\\n\\nlibrary ProgramInfoLib {\\n    uint256 private constant MIN_DURATION = 1 days;\\n    uint256 private constant MAX_DURATION = 2 * 365 days;\\n    uint256 private constant MIN_GRACE = 7 days;\\n    uint256 private constant MAX_GRACE = 30 days;\\n\\n    error ProgramAlreadyStartedError();\\n    error ProgramInvalidDurationError();\\n    error ProgramInvalidGraceError();\\n\\n    /**\\n     * @notice Validates and creates a new Program\\n     * @param fee Global Incentivizer fee\\n     * @param info Un-sanitized static program information\\n     * @return programInfo Validated static program information with fee excluded\\n     * @return programFee Fee amount for the program\\n     */\\n    function create(UFixed18 fee, ProgramInfo memory info)\\n    internal view returns (ProgramInfo memory programInfo, UFixed18 programFee) {\\n        if (isStarted(info, block.timestamp)) revert ProgramAlreadyStartedError();\\n        if (info.duration < MIN_DURATION || info.duration > MAX_DURATION) revert ProgramInvalidDurationError();\\n        if (info.grace < MIN_GRACE || info.grace > MAX_GRACE) revert ProgramInvalidGraceError();\\n\\n        Position memory amountAfterFee = info.amount.mul(UFixed18Lib.ONE.sub(fee));\\n\\n        programInfo = ProgramInfo({\\n            start: info.start,\\n            duration: info.duration,\\n            grace: info.grace,\\n\\n            product: info.product,\\n            token: info.token,\\n            amount: amountAfterFee\\n        });\\n        programFee = info.amount.sub(amountAfterFee).sum();\\n    }\\n\\n    /**\\n     * @notice Returns the maker and taker amounts per position share\\n     * @param self The ProgramInfo to operate on\\n     * @return programFee Amounts per share\\n     */\\n    function amountPerShare(ProgramInfo memory self) internal pure returns (Accumulator memory) {\\n        return self.amount.div(self.duration);\\n    }\\n\\n    /**\\n     * @notice Returns whether the program has started by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program has started\\n     */\\n    function isStarted(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= self.start;\\n    }\\n\\n    /**\\n     * @notice Returns whether the program is completed by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program is completed\\n     */\\n    function isComplete(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= (self.start + self.duration);\\n    }\\n}\\n\",\"keccak256\":\"0x1cc229d67e81e34a7d50fcaba343aba4dd490cee046ee3ed88a436c69c4f1dc0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613c6b806100206000396000f3fe608060405234801561001057600080fd5b506004361061018c5760003560e01c806396e494e8116100e3578063b774b6011161008c578063d865a71e11610066578063d865a71e14610423578063f77c479114610436578063faaebd211461043e57600080fd5b8063b774b601146103c8578063c4d66de8146103db578063cd6edd09146103ee57600080fd5b8063a55ff01d116100bd578063a55ff01d1461038f578063ab0068f4146103a2578063b6bf43cb146103b557600080fd5b806396e494e8146102e75780639ad5413e1461030a578063a123c33e1461037c57600080fd5b8063379607f5116101455780635c959b621161011f5780635c959b621461028b57806375938643146102b15780638c2fdb50146102c457600080fd5b8063379607f51461023a578063499aa1471461024d5780634c5430a01461026057600080fd5b80630aebeb4e116101765780630aebeb4e146101ce5780631e83409a146101e15780633209127d146101f457600080fd5b8062dde10e146101915780630ad24528146101b9575b600080fd5b6101a461019f3660046134e9565b61045e565b60405190151581526020015b60405180910390f35b6101cc6101c73660046134e9565b610523565b005b6101cc6101dc3660046134e9565b610649565b6101cc6101ef366004613517565b6108b5565b61022c610202366004613534565b60009081526001602081815260408084206001600160a01b03959095168452939091019052205490565b6040519081526020016101b0565b6101cc6102483660046134e9565b610b3c565b61022c61025b366004613560565b610cd7565b61027361026e3660046134e9565b611471565b6040516001600160a01b0390911681526020016101b0565b6101a46102993660046134e9565b60009081526001602052604090206004015460ff1690565b6101cc6102bf366004613517565b6115c2565b61022c6102d23660046134e9565b60009081526001602052604090206003015490565b61022c6102f53660046134e9565b60009081526001602052604090206002015490565b61031d6103183660046134e9565b61172c565b604080518251805182526020908101518183015283015181830152908201516060808301919091528201516080808301919091528201516001600160a01b0390811660a0808401919091529092015190911660c082015260e0016101b0565b61027361038a3660046134e9565b6117fa565b6101cc61039d3660046135e0565b6118dd565b61022c6103b0366004613517565b611a70565b61022c6103c3366004613534565b611a91565b6101cc6103d636600461361c565b611aba565b6101cc6103e9366004613517565b611c90565b61022c6103fc366004613534565b60009081526001602090815260408083206001600160a01b03949094168352929052205490565b61022c610431366004613534565b611d7b565b610273611e2b565b61022c61044c366004613517565b60036020526000908152604090205481565b6000610468611e2b565b6001600160a01b0316632e48152c6000848154811061048957610489613691565b600091825260209091206007909102016005015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039091166004820152602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d91906136a7565b92915050565b600261053b600080516020613c168339815191525490565b0361055957604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c1683398151915255600054819081106105975760405163394db33160e11b8152600481018290526024015b60405180910390fd5b816105a18161045e565b156105c857604051630d4a1b5b60e21b81523360048201526024810182905260440161058e565b826105d2816117fa565b6001600160a01b0316336001600160a01b031614610625576040517fa17e37520000000000000000000000000000000000000000000000000000000081523360048201526024810182905260440161058e565b61062e84611e5e565b50506001600080516020613c16833981519152555050565b50565b6002610661600080516020613c168339815191525490565b0361067f57604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c1683398151915255600054819081106106b85760405163394db33160e11b81526004810182905260240161058e565b816106c28161045e565b156106e957604051630d4a1b5b60e21b81523360048201526024810182905260440161058e565b6000838152600160205260408120815490919081908690811061070e5761070e613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260068301541660a082015290915061078f90839042611f59565b6107c5576040517f2892731100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600301546000036107da576107da85611e5e565b600085815260016020526040812061080a9060028101805460009091556004909101805460ff1916600117905590565b905061082d61081887611471565b60068401546001600160a01b0316908361207b565b60058201546001600160a01b0316600090815260026020526040902061085390876120ca565b50857f4bda279d19f319811d901a51bb064a9a3ffdf0b3a0108f1dc37d9eca6482c48a8260405161088691815260200190565b60405180910390a250505050506106466001600080516020613c16833981519152611e5a90919063ffffffff16565b60026108cd600080516020613c168339815191525490565b036108eb57604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c168339815191525580610906611e2b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097291906136a7565b1561099057604051633b3b4caf60e21b815260040160405180910390fd5b81610999611e2b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0591906136a7565b610a2d57604051634d53256560e01b81526001600160a01b038216600482015260240161058e565b826001600160a01b03166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505060405163f667f89760e01b81523360048201526001600160a01b038616925063f667f8979150602401600060405180830381600087803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b505050506000610ae484611a70565b905060005b81811015610b1657610b0433610aff8784611a91565b6120d6565b80610b0e816136df565b915050610ae9565b505050506106466001600080516020613c16833981519152611e5a90919063ffffffff16565b6002610b54600080516020613c168339815191525490565b03610b7257604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c168339815191525560005481908110610bab5760405163394db33160e11b81526004810182905260240161058e565b81610bb58161045e565b15610bdc57604051630d4a1b5b60e21b81523360048201526024810182905260440161058e565b6000808481548110610bf057610bf0613691565b60009182526020822060056007909202010154604080517f11da60b400000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216935083926311da60b49260048084019382900301818387803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505060405163f667f89760e01b81523360048201526001600160a01b038416925063f667f8979150602401600060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b5050505061062e33856120d6565b60006002610cf1600080516020613c168339815191525490565b03610d0f57604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c1683398151915255610d3160c0830160a08401613517565b610d39611e2b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906136a7565b15610dc357604051633b3b4caf60e21b815260040160405180910390fd5b610dd360c0840160a08501613517565b610ddb611e2b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4791906136a7565b610e6f57604051634d53256560e01b81526001600160a01b038216600482015260240161058e565b6000610e79611e2b565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf91906136f8565b6001600160a01b0316336001600160a01b0316149050816001600160a01b0316637d49c1b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190613715565b610f6a6103b060c0890160a08a01613517565b10610fa1576040517f1651519200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015801561105f57506001600160a01b03821663666e1b39610fc960c0890160a08a01613517565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104991906136f8565b6001600160a01b0316336001600160a01b031614155b156110ba573361107560c0880160a08901613517565b6040517f2f697e1b0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529116602482015260440161058e565b6000808054905090506000836001600160a01b0316633ceda0116040518163ffffffff1660e01b8152600401602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190613715565b90506000806111448361113f368d90038d018d61378b565b6121fb565b6000805460018082018355828052845180517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636007909402938401556020908101517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564840155808601517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5658401556040808701517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56685015560608701517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56785015560808701517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e568850180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161790915560a08901517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5699096018054909116959091169490941790935589845252902091935091506112d19083876123ba565b61130b84600260008d60a00160208101906112ec9190613517565b6001600160a01b031681526020810191909152604001600020906123e9565b5061134781600360008d60c00160208101906113279190613517565b6001600160a01b03168152602081019190915260400160002054906123f5565b6003600061135b60e08e0160c08f01613517565b6001600160a01b031681526020810191909152604001600020556113b63361139061138b368e90038e018e613828565b612401565b60018d60c00160208101906113a59190613517565b6001600160a01b0316929190612415565b60808083015160a08085015185518051602091820151828901516040808b01516060808d015183516001600160a01b039b8c1681529a909816968a01969096529088019390935292860152948401529082019290925260c081019190915260e0810182905284907fe08acb93a041ef5c9de54ad0caf5cd21f44314d2100f5872eb3df4128f4e95f7906101000160405180910390a250506001600080516020613c168339815191525550945061146c9350505050565b919050565b60008181526001602052604081208154829081908590811061149557611495613691565b906000526020600020906007020190508160040160019054906101000a900460ff16611551576114c3611e2b565b60058201546040517f2d809cb60000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911690632d809cb6906024015b602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c91906136f8565b6115ba565b611559611e2b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba91906136f8565b949350505050565b6115ca611e2b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163491906136a7565b61165357604051634d53256560e01b815233600482015260240161058e565b33600061165f82611a70565b905060005b818110156117265760006116788483611a91565b90506117136000828154811061169057611690613691565b6000918252602080832060408051610100810182526007909402909101805460c0850190815260018083015460e08701529085526002820154858501526003820154858401526004820154606086015260058201546001600160a01b03908116608087015260069092015490911660a0850152868552909152909120908761248d565b508061171e816136df565b915050611664565b50505050565b6040805161010081018252600060c0820181815260e08301829052825260208201819052918101829052606081018290526080810182905260a08101919091526000828154811061177f5761177f613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260069092015490911660a082015292915050565b60008181526001602052604081208154829081908590811061181e5761181e613691565b906000526020600020906007020190508160040160019054906101000a900460ff166118985761184c611e2b565b60058201546040517f666e1b390000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063666e1b399060240161150b565b6118a0611e2b565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611596573d6000803e3d6000fd5b6118e5611e2b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa15801561192b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194f91906136a7565b61196e57604051634d53256560e01b815233600482015260240161058e565b33600061197a82611a70565b905060005b818110156117265760006119938483611a91565b600081815260016020526040902060030154909150156119b35750611a5e565b611a498560200151600083815481106119ce576119ce613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260069092015490911660a082015290612517565b611a535750611a5e565b611a5c81611e5e565b505b80611a68816136df565b91505061197f565b6001600160a01b038116600090815260026020526040812061051d90612537565b6001600160a01b0382166000908152600260205260408120611ab39083612541565b9392505050565b611ac2611e2b565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2391906136a7565b15611b4157604051633b3b4caf60e21b815260040160405180910390fd5b60005b81811015611c8b576000838383818110611b6057611b60613691565b9050602002016020810190611b759190613517565b6001600160a01b03811660009081526003602052604090205490915080611b9d575050611c79565b6001600160a01b038216600090815260036020526040812055611c33611bc1611e2b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2291906136f8565b6001600160a01b038416908361207b565b816001600160a01b03167f10df095d1434aed409b2f33d2a6a8456f8b0824633cc12a1b43032085aadc41d82604051611c6e91815260200190565b60405180910390a250505b80611c83816136df565b915050611b44565b505050565b600180611cbb7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b5490565b10611cf5576040517f1e7a9d950000000000000000000000000000000000000000000000000000000081526004810182905260240161058e565b611d1e7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b829055565b60017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c55611d4b8261254d565b611d53612604565b60007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c555050565b600080548210611d8d5750600061051d565b6000808381548110611da157611da1613691565b6000918252602080832060408051610100810182526007909402909101805460c0850190815260018083015460e08701529085526002820154858501526003820154858401526004820154606086015260058201546001600160a01b03908116608087015260069092015490911660a08501528785529091529091209091506115ba908286612665565b6000611e557f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea605335490565b905090565b9055565b6000808281548110611e7257611e72613691565b600091825260209182902060056007909202010154604080517fc07f47d400000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263c07f47d4926004808401938290030181865afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190613715565b60008381526001602052604090206003018190559050817f87b327d54760099959808207b991374a96f64737788848bb10282b249558be4482604051611f4d91815260200190565b60405180910390a25050565b60008084600301546000146120495783608001516001600160a01b0316639d8870a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fce91906136f8565b6001600160a01b0316637ece075d86600301546040518263ffffffff1660e01b8152600401611fff91815260200190565b606060405180830381865afa15801561201c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120409190613844565b6020015161205d565b8360400151846020015161205d9190613880565b905083606001518161206f9190613880565b90921015949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416146120c057611c8b826120af858460006126a6565b6001600160a01b0386169190612722565b611c8b82826127cb565b6000611ab383836128e4565b600081815260016020526040812081549091908190849081106120fb576120fb613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260069092015490911660a0820152905061217d82828661248d565b6001600160a01b0384811660009081526001840160205260408120805491905560a083015190916121b09116868361207b565b83856001600160a01b03167f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7836040516121ec91815260200190565b60405180910390a35050505050565b6040805161010081018252600060c0820181815260e08301829052825260208201819052918101829052606081018290526080810182905260a08101919091526020820151600090421061227b576040517f2b1eccc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620151808360400151108061229757506303c267008360400151115b156122ce576040517f72cd3d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62093a80836060015110806122e9575062278d008360600151115b15612320576040517f8dbd9cb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061233f612337670de0b6b3a7640000876129d7565b8551906129e3565b90506040518060c0016040528082815260200185602001518152602001856040015181526020018560600151815260200185608001516001600160a01b031681526020018560a001516001600160a01b031681525092506123b061138b828660000151612a3490919063ffffffff16565b9150509250929050565b81516123c590612401565b6002840155600490920180549215156101000261ff00199093169290921790915550565b6000611ab38383612a82565b6000611ab38284613880565b6020810151815160009161051d91906123f5565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0385160361246b576040517fad4e092700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611726833061247b8786866126a6565b6001600160a01b038816929190612ad1565b60008061249b858585612b22565b6001600160a01b038516600090815260018801602052604090205491935091506124c590836123f5565b6001600160a01b038416600090815260018701602052604090205560028501546124ef90836129d7565b60028601556001600160a01b0390921660009081526020949094525060409092209190915550565b60008260400151836020015161252d9190613880565b9091101592915050565b600061051d825490565b6000611ab38383612eda565b303b1515801561257c57507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b1561259a57604051631a27c4a960e21b815260040160405180910390fd5b6001600160a01b0381163b6125db576040517f14878b6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106467f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea60533829055565b303b1515801561263357507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b1561265157604051631a27c4a960e21b815260040160405180910390fd5b6001600080516020613c1683398151915255565b600080612673858585612b22565b506001600160a01b038416600090815260018701602052604090205490915061269d9082906123f5565b95945050505050565b6000806126b285612f04565b905060128110156126fe5760006126ca826012613898565b6126d590600a613993565b9050836126eb576126e681866139b5565b6126f5565b6126f58582612f9c565b92505050611ab3565b600061270b601283613898565b61271690600a613993565b90506126f581866139c9565b6040516001600160a01b038316602482015260448101829052611c8b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612fce565b8047101561281b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161058e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612868576040519150601f19603f3d011682016040523d82523d6000602084013e61286d565b606091505b5050905080611c8b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161058e565b600081815260018301602052604081205480156129cd576000612908600183613898565b855490915060009061291c90600190613898565b905081811461298157600086600001828154811061293c5761293c613691565b906000526020600020015490508087600001848154811061295f5761295f613691565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612992576129926139e8565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061051d565b600091505061051d565b6000611ab38284613898565b60408051808201909152600080825260208201526040805180820190915283518190612a0f90856130b3565b8152602001612a2b8486602001516130b390919063ffffffff16565b90529392505050565b604080518082019091526000808252602082015260408051808201909152825184518291612a6291906129d7565b8152602001612a2b846020015186602001516129d790919063ffffffff16565b6000818152600183016020526040812054612ac95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561051d565b50600061051d565b6040516001600160a01b03808516602483015283166044820152606481018290526117269085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612767565b60808201516001600160a01b038281166000818152602087905260408082205490517fb7648fb90000000000000000000000000000000000000000000000000000000081526004810193909352909384939092849184169063b7648fb9906024016040805180830381865afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc391906139fe565b6040517f8e480b200000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152919250600091851690638e480b2090602401602060405180830381865afa158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c9190613715565b90508860030154600014612c6d57612c68818a600301546130d2565b612c6f565b805b94506000846001600160a01b0316639d8870a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd591906136f8565b6001600160a01b0316637ece075d876040518263ffffffff1660e01b8152600401612d0291815260200190565b606060405180830381865afa158015612d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d439190613844565b602001519050612d5a898260209190910151111590565b612d6f57600080965096505050505050612ed2565b60048a015460ff1615612d8a57600096505050505050612ed2565b83600003612da057600096505050505050612ed2565b6000612ea4612e9d876001600160a01b031663476fa96d886040518263ffffffff1660e01b8152600401612dd691815260200190565b6040805180830381865afa158015612df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1691906139fe565b6040517f476fa96d000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b038a169063476fa96d906024016040805180830381865afa158015612e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9791906139fe565b906130e8565b8590613136565b9050612ec9612ec4612ebf83612eb98e61318a565b906131ac565b6131fa565b61320e565b97505050505050505b935093915050565b6000826000018281548110612ef157612ef1613691565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614612f9457816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8c9190613a30565b60ff1661051d565b601292915050565b6000612fa88284613a53565b15612fb4576001612fb7565b60005b60ff16612fc483856139b5565b611ab39190613880565b6000613023826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661324e9092919063ffffffff16565b805190915015611c8b578080602001905181019061304191906136a7565b611c8b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161058e565b6000670de0b6b3a76400006130c883856139c9565b611ab391906139b5565b60008183106130e15781611ab3565b5090919050565b604080518082019091526000808252602082015260408051808201909152825184518291613116919061325d565b8152602001612a2b8460200151866020015161325d90919063ffffffff16565b60408051808201909152600080825260208201526040518060400160405280613170846000015161316a8760000151613269565b906132af565b8152602001612a2b846020015161316a8760200151613269565b6040805180820182526000808252602082015290820151825161051d916132ce565b6040805180820190915260008082526020820152604080518082019091528251845182916131da91906132af565b8152602001612a2b846020015186602001516132af90919063ffffffff16565b6020810151815160009161051d9190613333565b6000818181121561051d576040517f501f289e0000000000000000000000000000000000000000000000000000000081526004810182905260240161058e565b60606115ba848460008561333f565b6000611ab38284613a67565b6000816001600160ff1b0381111561051d576040517ea07eb50000000000000000000000000000000000000000000000000000000081526004810182905260240161058e565b6000670de0b6b3a76400006132c48385613aa6565b611ab39190613b2d565b604080518082019091526000808252602082015260405180604001604052806133126133016132fc86613487565b613269565b865161330c90613269565b9061349b565b8152602001612a2b6133266132fc86613487565b61330c8760200151613269565b6000611ab38284613b5b565b6060824710156133b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161058e565b6001600160a01b0385163b61340e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161058e565b600080866001600160a01b0316858760405161342a9190613bc6565b60006040518083038185875af1925050503d8060008114613467576040519150601f19603f3d011682016040523d82523d6000602084013e61346c565b606091505b509150915061347c8282866134b0565b979650505050505050565b600061051d670de0b6b3a7640000836139c9565b6000816132c4670de0b6b3a764000085613aa6565b606083156134bf575081611ab3565b8251156134cf5782518084602001fd5b8160405162461bcd60e51b815260040161058e9190613be2565b6000602082840312156134fb57600080fd5b5035919050565b6001600160a01b038116811461064657600080fd5b60006020828403121561352957600080fd5b8135611ab381613502565b6000806040838503121561354757600080fd5b823561355281613502565b946020939093013593505050565b600060e0828403121561357257600080fd5b50919050565b6040516060810167ffffffffffffffff811182821017156135a957634e487b7160e01b600052604160045260246000fd5b60405290565b6040805190810167ffffffffffffffff811182821017156135a957634e487b7160e01b600052604160045260246000fd5b6000606082840312156135f257600080fd5b6135fa613578565b8235815260208301356020820152604083013560408201528091505092915050565b6000806020838503121561362f57600080fd5b823567ffffffffffffffff8082111561364757600080fd5b818501915085601f83011261365b57600080fd5b81358181111561366a57600080fd5b8660208260051b850101111561367f57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156136b957600080fd5b81518015158114611ab357600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016136f1576136f16136c9565b5060010190565b60006020828403121561370a57600080fd5b8151611ab381613502565b60006020828403121561372757600080fd5b5051919050565b60006040828403121561374057600080fd5b6040516040810181811067ffffffffffffffff8211171561377157634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060e0828403121561379d57600080fd5b60405160c0810181811067ffffffffffffffff821117156137ce57634e487b7160e01b600052604160045260246000fd5b6040526137db848461372e565b815260408301356020820152606083013560408201526080830135606082015260a083013561380981613502565b608082015260c083013561381c81613502565b60a08201529392505050565b60006040828403121561383a57600080fd5b611ab3838361372e565b60006060828403121561385657600080fd5b61385e613578565b8251815260208301516020820152604083015160408201528091505092915050565b60008219821115613893576138936136c9565b500190565b6000828210156138aa576138aa6136c9565b500390565b600181815b808511156138ea5781600019048211156138d0576138d06136c9565b808516156138dd57918102915b93841c93908002906138b4565b509250929050565b6000826139015750600161051d565b8161390e5750600061051d565b8160018114613924576002811461392e5761394a565b600191505061051d565b60ff84111561393f5761393f6136c9565b50506001821b61051d565b5060208310610133831016604e8410600b841016171561396d575081810a61051d565b61397783836138af565b806000190482111561398b5761398b6136c9565b029392505050565b6000611ab383836138f2565b634e487b7160e01b600052601260045260246000fd5b6000826139c4576139c461399f565b500490565b60008160001904831182151516156139e3576139e36136c9565b500290565b634e487b7160e01b600052603160045260246000fd5b600060408284031215613a1057600080fd5b613a186135af565b82518152602083015160208201528091505092915050565b600060208284031215613a4257600080fd5b815160ff81168114611ab357600080fd5b600082613a6257613a6261399f565b500690565b600080831283600160ff1b01831281151615613a8557613a856136c9565b836001600160ff1b03018313811615613aa057613aa06136c9565b50500390565b60006001600160ff1b03600084136000841385830485118282161615613ace57613ace6136c9565b600160ff1b6000871286820588128184161615613aed57613aed6136c9565b60008712925087820587128484161615613b0957613b096136c9565b87850587128184161615613b1f57613b1f6136c9565b505050929093029392505050565b600082613b3c57613b3c61399f565b600160ff1b821460001984141615613b5657613b566136c9565b500590565b6000808212826001600160ff1b0303841381151615613b7c57613b7c6136c9565b82600160ff1b038412811615613b9457613b946136c9565b50500190565b60005b83811015613bb5578181015183820152602001613b9d565b838111156117265750506000910152565b60008251613bd8818460208701613b9a565b9190910192915050565b6020815260008251806020840152613c01816040850160208701613b9a565b601f01601f1916919091016040019291505056fe1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7a26469706673582212206010c1cd6728a31cb1248ab088859743634a4faad10ebfcc15722da9fa5c86e164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018c5760003560e01c806396e494e8116100e3578063b774b6011161008c578063d865a71e11610066578063d865a71e14610423578063f77c479114610436578063faaebd211461043e57600080fd5b8063b774b601146103c8578063c4d66de8146103db578063cd6edd09146103ee57600080fd5b8063a55ff01d116100bd578063a55ff01d1461038f578063ab0068f4146103a2578063b6bf43cb146103b557600080fd5b806396e494e8146102e75780639ad5413e1461030a578063a123c33e1461037c57600080fd5b8063379607f5116101455780635c959b621161011f5780635c959b621461028b57806375938643146102b15780638c2fdb50146102c457600080fd5b8063379607f51461023a578063499aa1471461024d5780634c5430a01461026057600080fd5b80630aebeb4e116101765780630aebeb4e146101ce5780631e83409a146101e15780633209127d146101f457600080fd5b8062dde10e146101915780630ad24528146101b9575b600080fd5b6101a461019f3660046134e9565b61045e565b60405190151581526020015b60405180910390f35b6101cc6101c73660046134e9565b610523565b005b6101cc6101dc3660046134e9565b610649565b6101cc6101ef366004613517565b6108b5565b61022c610202366004613534565b60009081526001602081815260408084206001600160a01b03959095168452939091019052205490565b6040519081526020016101b0565b6101cc6102483660046134e9565b610b3c565b61022c61025b366004613560565b610cd7565b61027361026e3660046134e9565b611471565b6040516001600160a01b0390911681526020016101b0565b6101a46102993660046134e9565b60009081526001602052604090206004015460ff1690565b6101cc6102bf366004613517565b6115c2565b61022c6102d23660046134e9565b60009081526001602052604090206003015490565b61022c6102f53660046134e9565b60009081526001602052604090206002015490565b61031d6103183660046134e9565b61172c565b604080518251805182526020908101518183015283015181830152908201516060808301919091528201516080808301919091528201516001600160a01b0390811660a0808401919091529092015190911660c082015260e0016101b0565b61027361038a3660046134e9565b6117fa565b6101cc61039d3660046135e0565b6118dd565b61022c6103b0366004613517565b611a70565b61022c6103c3366004613534565b611a91565b6101cc6103d636600461361c565b611aba565b6101cc6103e9366004613517565b611c90565b61022c6103fc366004613534565b60009081526001602090815260408083206001600160a01b03949094168352929052205490565b61022c610431366004613534565b611d7b565b610273611e2b565b61022c61044c366004613517565b60036020526000908152604090205481565b6000610468611e2b565b6001600160a01b0316632e48152c6000848154811061048957610489613691565b600091825260209091206007909102016005015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039091166004820152602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d91906136a7565b92915050565b600261053b600080516020613c168339815191525490565b0361055957604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c1683398151915255600054819081106105975760405163394db33160e11b8152600481018290526024015b60405180910390fd5b816105a18161045e565b156105c857604051630d4a1b5b60e21b81523360048201526024810182905260440161058e565b826105d2816117fa565b6001600160a01b0316336001600160a01b031614610625576040517fa17e37520000000000000000000000000000000000000000000000000000000081523360048201526024810182905260440161058e565b61062e84611e5e565b50506001600080516020613c16833981519152555050565b50565b6002610661600080516020613c168339815191525490565b0361067f57604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c1683398151915255600054819081106106b85760405163394db33160e11b81526004810182905260240161058e565b816106c28161045e565b156106e957604051630d4a1b5b60e21b81523360048201526024810182905260440161058e565b6000838152600160205260408120815490919081908690811061070e5761070e613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260068301541660a082015290915061078f90839042611f59565b6107c5576040517f2892731100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600301546000036107da576107da85611e5e565b600085815260016020526040812061080a9060028101805460009091556004909101805460ff1916600117905590565b905061082d61081887611471565b60068401546001600160a01b0316908361207b565b60058201546001600160a01b0316600090815260026020526040902061085390876120ca565b50857f4bda279d19f319811d901a51bb064a9a3ffdf0b3a0108f1dc37d9eca6482c48a8260405161088691815260200190565b60405180910390a250505050506106466001600080516020613c16833981519152611e5a90919063ffffffff16565b60026108cd600080516020613c168339815191525490565b036108eb57604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c168339815191525580610906611e2b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097291906136a7565b1561099057604051633b3b4caf60e21b815260040160405180910390fd5b81610999611e2b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0591906136a7565b610a2d57604051634d53256560e01b81526001600160a01b038216600482015260240161058e565b826001600160a01b03166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505060405163f667f89760e01b81523360048201526001600160a01b038616925063f667f8979150602401600060405180830381600087803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b505050506000610ae484611a70565b905060005b81811015610b1657610b0433610aff8784611a91565b6120d6565b80610b0e816136df565b915050610ae9565b505050506106466001600080516020613c16833981519152611e5a90919063ffffffff16565b6002610b54600080516020613c168339815191525490565b03610b7257604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c168339815191525560005481908110610bab5760405163394db33160e11b81526004810182905260240161058e565b81610bb58161045e565b15610bdc57604051630d4a1b5b60e21b81523360048201526024810182905260440161058e565b6000808481548110610bf057610bf0613691565b60009182526020822060056007909202010154604080517f11da60b400000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216935083926311da60b49260048084019382900301818387803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505060405163f667f89760e01b81523360048201526001600160a01b038416925063f667f8979150602401600060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b5050505061062e33856120d6565b60006002610cf1600080516020613c168339815191525490565b03610d0f57604051637990191b60e11b815260040160405180910390fd5b6002600080516020613c1683398151915255610d3160c0830160a08401613517565b610d39611e2b565b604051630b92054b60e21b81526001600160a01b0383811660048301529190911690632e48152c90602401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906136a7565b15610dc357604051633b3b4caf60e21b815260040160405180910390fd5b610dd360c0840160a08501613517565b610ddb611e2b565b604051633fe948c960e11b81526001600160a01b0383811660048301529190911690637fd2919290602401602060405180830381865afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4791906136a7565b610e6f57604051634d53256560e01b81526001600160a01b038216600482015260240161058e565b6000610e79611e2b565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf91906136f8565b6001600160a01b0316336001600160a01b0316149050816001600160a01b0316637d49c1b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190613715565b610f6a6103b060c0890160a08a01613517565b10610fa1576040517f1651519200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015801561105f57506001600160a01b03821663666e1b39610fc960c0890160a08a01613517565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104991906136f8565b6001600160a01b0316336001600160a01b031614155b156110ba573361107560c0880160a08901613517565b6040517f2f697e1b0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529116602482015260440161058e565b6000808054905090506000836001600160a01b0316633ceda0116040518163ffffffff1660e01b8152600401602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190613715565b90506000806111448361113f368d90038d018d61378b565b6121fb565b6000805460018082018355828052845180517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636007909402938401556020908101517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564840155808601517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5658401556040808701517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56685015560608701517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56785015560808701517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e568850180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161790915560a08901517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5699096018054909116959091169490941790935589845252902091935091506112d19083876123ba565b61130b84600260008d60a00160208101906112ec9190613517565b6001600160a01b031681526020810191909152604001600020906123e9565b5061134781600360008d60c00160208101906113279190613517565b6001600160a01b03168152602081019190915260400160002054906123f5565b6003600061135b60e08e0160c08f01613517565b6001600160a01b031681526020810191909152604001600020556113b63361139061138b368e90038e018e613828565b612401565b60018d60c00160208101906113a59190613517565b6001600160a01b0316929190612415565b60808083015160a08085015185518051602091820151828901516040808b01516060808d015183516001600160a01b039b8c1681529a909816968a01969096529088019390935292860152948401529082019290925260c081019190915260e0810182905284907fe08acb93a041ef5c9de54ad0caf5cd21f44314d2100f5872eb3df4128f4e95f7906101000160405180910390a250506001600080516020613c168339815191525550945061146c9350505050565b919050565b60008181526001602052604081208154829081908590811061149557611495613691565b906000526020600020906007020190508160040160019054906101000a900460ff16611551576114c3611e2b565b60058201546040517f2d809cb60000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911690632d809cb6906024015b602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c91906136f8565b6115ba565b611559611e2b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba91906136f8565b949350505050565b6115ca611e2b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163491906136a7565b61165357604051634d53256560e01b815233600482015260240161058e565b33600061165f82611a70565b905060005b818110156117265760006116788483611a91565b90506117136000828154811061169057611690613691565b6000918252602080832060408051610100810182526007909402909101805460c0850190815260018083015460e08701529085526002820154858501526003820154858401526004820154606086015260058201546001600160a01b03908116608087015260069092015490911660a0850152868552909152909120908761248d565b508061171e816136df565b915050611664565b50505050565b6040805161010081018252600060c0820181815260e08301829052825260208201819052918101829052606081018290526080810182905260a08101919091526000828154811061177f5761177f613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260069092015490911660a082015292915050565b60008181526001602052604081208154829081908590811061181e5761181e613691565b906000526020600020906007020190508160040160019054906101000a900460ff166118985761184c611e2b565b60058201546040517f666e1b390000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063666e1b399060240161150b565b6118a0611e2b565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611596573d6000803e3d6000fd5b6118e5611e2b565b604051633fe948c960e11b81523360048201526001600160a01b039190911690637fd2919290602401602060405180830381865afa15801561192b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194f91906136a7565b61196e57604051634d53256560e01b815233600482015260240161058e565b33600061197a82611a70565b905060005b818110156117265760006119938483611a91565b600081815260016020526040902060030154909150156119b35750611a5e565b611a498560200151600083815481106119ce576119ce613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260069092015490911660a082015290612517565b611a535750611a5e565b611a5c81611e5e565b505b80611a68816136df565b91505061197f565b6001600160a01b038116600090815260026020526040812061051d90612537565b6001600160a01b0382166000908152600260205260408120611ab39083612541565b9392505050565b611ac2611e2b565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2391906136a7565b15611b4157604051633b3b4caf60e21b815260040160405180910390fd5b60005b81811015611c8b576000838383818110611b6057611b60613691565b9050602002016020810190611b759190613517565b6001600160a01b03811660009081526003602052604090205490915080611b9d575050611c79565b6001600160a01b038216600090815260036020526040812055611c33611bc1611e2b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2291906136f8565b6001600160a01b038416908361207b565b816001600160a01b03167f10df095d1434aed409b2f33d2a6a8456f8b0824633cc12a1b43032085aadc41d82604051611c6e91815260200190565b60405180910390a250505b80611c83816136df565b915050611b44565b505050565b600180611cbb7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b5490565b10611cf5576040517f1e7a9d950000000000000000000000000000000000000000000000000000000081526004810182905260240161058e565b611d1e7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b829055565b60017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c55611d4b8261254d565b611d53612604565b60007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c555050565b600080548210611d8d5750600061051d565b6000808381548110611da157611da1613691565b6000918252602080832060408051610100810182526007909402909101805460c0850190815260018083015460e08701529085526002820154858501526003820154858401526004820154606086015260058201546001600160a01b03908116608087015260069092015490911660a08501528785529091529091209091506115ba908286612665565b6000611e557f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea605335490565b905090565b9055565b6000808281548110611e7257611e72613691565b600091825260209182902060056007909202010154604080517fc07f47d400000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263c07f47d4926004808401938290030181865afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190613715565b60008381526001602052604090206003018190559050817f87b327d54760099959808207b991374a96f64737788848bb10282b249558be4482604051611f4d91815260200190565b60405180910390a25050565b60008084600301546000146120495783608001516001600160a01b0316639d8870a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fce91906136f8565b6001600160a01b0316637ece075d86600301546040518263ffffffff1660e01b8152600401611fff91815260200190565b606060405180830381865afa15801561201c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120409190613844565b6020015161205d565b8360400151846020015161205d9190613880565b905083606001518161206f9190613880565b90921015949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416146120c057611c8b826120af858460006126a6565b6001600160a01b0386169190612722565b611c8b82826127cb565b6000611ab383836128e4565b600081815260016020526040812081549091908190849081106120fb576120fb613691565b600091825260209182902060408051610100810182526007909302909101805460c08401908152600182015460e085015283526002810154938301939093526003830154908201526004820154606082015260058201546001600160a01b03908116608083015260069092015490911660a0820152905061217d82828661248d565b6001600160a01b0384811660009081526001840160205260408120805491905560a083015190916121b09116868361207b565b83856001600160a01b03167f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7836040516121ec91815260200190565b60405180910390a35050505050565b6040805161010081018252600060c0820181815260e08301829052825260208201819052918101829052606081018290526080810182905260a08101919091526020820151600090421061227b576040517f2b1eccc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620151808360400151108061229757506303c267008360400151115b156122ce576040517f72cd3d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62093a80836060015110806122e9575062278d008360600151115b15612320576040517f8dbd9cb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061233f612337670de0b6b3a7640000876129d7565b8551906129e3565b90506040518060c0016040528082815260200185602001518152602001856040015181526020018560600151815260200185608001516001600160a01b031681526020018560a001516001600160a01b031681525092506123b061138b828660000151612a3490919063ffffffff16565b9150509250929050565b81516123c590612401565b6002840155600490920180549215156101000261ff00199093169290921790915550565b6000611ab38383612a82565b6000611ab38284613880565b6020810151815160009161051d91906123f5565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0385160361246b576040517fad4e092700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611726833061247b8786866126a6565b6001600160a01b038816929190612ad1565b60008061249b858585612b22565b6001600160a01b038516600090815260018801602052604090205491935091506124c590836123f5565b6001600160a01b038416600090815260018701602052604090205560028501546124ef90836129d7565b60028601556001600160a01b0390921660009081526020949094525060409092209190915550565b60008260400151836020015161252d9190613880565b9091101592915050565b600061051d825490565b6000611ab38383612eda565b303b1515801561257c57507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b1561259a57604051631a27c4a960e21b815260040160405180910390fd5b6001600160a01b0381163b6125db576040517f14878b6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106467f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea60533829055565b303b1515801561263357507fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c54155b1561265157604051631a27c4a960e21b815260040160405180910390fd5b6001600080516020613c1683398151915255565b600080612673858585612b22565b506001600160a01b038416600090815260018701602052604090205490915061269d9082906123f5565b95945050505050565b6000806126b285612f04565b905060128110156126fe5760006126ca826012613898565b6126d590600a613993565b9050836126eb576126e681866139b5565b6126f5565b6126f58582612f9c565b92505050611ab3565b600061270b601283613898565b61271690600a613993565b90506126f581866139c9565b6040516001600160a01b038316602482015260448101829052611c8b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612fce565b8047101561281b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161058e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612868576040519150601f19603f3d011682016040523d82523d6000602084013e61286d565b606091505b5050905080611c8b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161058e565b600081815260018301602052604081205480156129cd576000612908600183613898565b855490915060009061291c90600190613898565b905081811461298157600086600001828154811061293c5761293c613691565b906000526020600020015490508087600001848154811061295f5761295f613691565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612992576129926139e8565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061051d565b600091505061051d565b6000611ab38284613898565b60408051808201909152600080825260208201526040805180820190915283518190612a0f90856130b3565b8152602001612a2b8486602001516130b390919063ffffffff16565b90529392505050565b604080518082019091526000808252602082015260408051808201909152825184518291612a6291906129d7565b8152602001612a2b846020015186602001516129d790919063ffffffff16565b6000818152600183016020526040812054612ac95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561051d565b50600061051d565b6040516001600160a01b03808516602483015283166044820152606481018290526117269085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612767565b60808201516001600160a01b038281166000818152602087905260408082205490517fb7648fb90000000000000000000000000000000000000000000000000000000081526004810193909352909384939092849184169063b7648fb9906024016040805180830381865afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc391906139fe565b6040517f8e480b200000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152919250600091851690638e480b2090602401602060405180830381865afa158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c9190613715565b90508860030154600014612c6d57612c68818a600301546130d2565b612c6f565b805b94506000846001600160a01b0316639d8870a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd591906136f8565b6001600160a01b0316637ece075d876040518263ffffffff1660e01b8152600401612d0291815260200190565b606060405180830381865afa158015612d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d439190613844565b602001519050612d5a898260209190910151111590565b612d6f57600080965096505050505050612ed2565b60048a015460ff1615612d8a57600096505050505050612ed2565b83600003612da057600096505050505050612ed2565b6000612ea4612e9d876001600160a01b031663476fa96d886040518263ffffffff1660e01b8152600401612dd691815260200190565b6040805180830381865afa158015612df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1691906139fe565b6040517f476fa96d000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b038a169063476fa96d906024016040805180830381865afa158015612e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9791906139fe565b906130e8565b8590613136565b9050612ec9612ec4612ebf83612eb98e61318a565b906131ac565b6131fa565b61320e565b97505050505050505b935093915050565b6000826000018281548110612ef157612ef1613691565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614612f9457816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8c9190613a30565b60ff1661051d565b601292915050565b6000612fa88284613a53565b15612fb4576001612fb7565b60005b60ff16612fc483856139b5565b611ab39190613880565b6000613023826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661324e9092919063ffffffff16565b805190915015611c8b578080602001905181019061304191906136a7565b611c8b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161058e565b6000670de0b6b3a76400006130c883856139c9565b611ab391906139b5565b60008183106130e15781611ab3565b5090919050565b604080518082019091526000808252602082015260408051808201909152825184518291613116919061325d565b8152602001612a2b8460200151866020015161325d90919063ffffffff16565b60408051808201909152600080825260208201526040518060400160405280613170846000015161316a8760000151613269565b906132af565b8152602001612a2b846020015161316a8760200151613269565b6040805180820182526000808252602082015290820151825161051d916132ce565b6040805180820190915260008082526020820152604080518082019091528251845182916131da91906132af565b8152602001612a2b846020015186602001516132af90919063ffffffff16565b6020810151815160009161051d9190613333565b6000818181121561051d576040517f501f289e0000000000000000000000000000000000000000000000000000000081526004810182905260240161058e565b60606115ba848460008561333f565b6000611ab38284613a67565b6000816001600160ff1b0381111561051d576040517ea07eb50000000000000000000000000000000000000000000000000000000081526004810182905260240161058e565b6000670de0b6b3a76400006132c48385613aa6565b611ab39190613b2d565b604080518082019091526000808252602082015260405180604001604052806133126133016132fc86613487565b613269565b865161330c90613269565b9061349b565b8152602001612a2b6133266132fc86613487565b61330c8760200151613269565b6000611ab38284613b5b565b6060824710156133b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161058e565b6001600160a01b0385163b61340e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161058e565b600080866001600160a01b0316858760405161342a9190613bc6565b60006040518083038185875af1925050503d8060008114613467576040519150601f19603f3d011682016040523d82523d6000602084013e61346c565b606091505b509150915061347c8282866134b0565b979650505050505050565b600061051d670de0b6b3a7640000836139c9565b6000816132c4670de0b6b3a764000085613aa6565b606083156134bf575081611ab3565b8251156134cf5782518084602001fd5b8160405162461bcd60e51b815260040161058e9190613be2565b6000602082840312156134fb57600080fd5b5035919050565b6001600160a01b038116811461064657600080fd5b60006020828403121561352957600080fd5b8135611ab381613502565b6000806040838503121561354757600080fd5b823561355281613502565b946020939093013593505050565b600060e0828403121561357257600080fd5b50919050565b6040516060810167ffffffffffffffff811182821017156135a957634e487b7160e01b600052604160045260246000fd5b60405290565b6040805190810167ffffffffffffffff811182821017156135a957634e487b7160e01b600052604160045260246000fd5b6000606082840312156135f257600080fd5b6135fa613578565b8235815260208301356020820152604083013560408201528091505092915050565b6000806020838503121561362f57600080fd5b823567ffffffffffffffff8082111561364757600080fd5b818501915085601f83011261365b57600080fd5b81358181111561366a57600080fd5b8660208260051b850101111561367f57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156136b957600080fd5b81518015158114611ab357600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016136f1576136f16136c9565b5060010190565b60006020828403121561370a57600080fd5b8151611ab381613502565b60006020828403121561372757600080fd5b5051919050565b60006040828403121561374057600080fd5b6040516040810181811067ffffffffffffffff8211171561377157634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060e0828403121561379d57600080fd5b60405160c0810181811067ffffffffffffffff821117156137ce57634e487b7160e01b600052604160045260246000fd5b6040526137db848461372e565b815260408301356020820152606083013560408201526080830135606082015260a083013561380981613502565b608082015260c083013561381c81613502565b60a08201529392505050565b60006040828403121561383a57600080fd5b611ab3838361372e565b60006060828403121561385657600080fd5b61385e613578565b8251815260208301516020820152604083015160408201528091505092915050565b60008219821115613893576138936136c9565b500190565b6000828210156138aa576138aa6136c9565b500390565b600181815b808511156138ea5781600019048211156138d0576138d06136c9565b808516156138dd57918102915b93841c93908002906138b4565b509250929050565b6000826139015750600161051d565b8161390e5750600061051d565b8160018114613924576002811461392e5761394a565b600191505061051d565b60ff84111561393f5761393f6136c9565b50506001821b61051d565b5060208310610133831016604e8410600b841016171561396d575081810a61051d565b61397783836138af565b806000190482111561398b5761398b6136c9565b029392505050565b6000611ab383836138f2565b634e487b7160e01b600052601260045260246000fd5b6000826139c4576139c461399f565b500490565b60008160001904831182151516156139e3576139e36136c9565b500290565b634e487b7160e01b600052603160045260246000fd5b600060408284031215613a1057600080fd5b613a186135af565b82518152602083015160208201528091505092915050565b600060208284031215613a4257600080fd5b815160ff81168114611ab357600080fd5b600082613a6257613a6261399f565b500690565b600080831283600160ff1b01831281151615613a8557613a856136c9565b836001600160ff1b03018313811615613aa057613aa06136c9565b50500390565b60006001600160ff1b03600084136000841385830485118282161615613ace57613ace6136c9565b600160ff1b6000871286820588128184161615613aed57613aed6136c9565b60008712925087820587128484161615613b0957613b096136c9565b87850587128184161615613b1f57613b1f6136c9565b505050929093029392505050565b600082613b3c57613b3c61399f565b600160ff1b821460001984141615613b5657613b566136c9565b500590565b6000808212826001600160ff1b0303841381151615613b7c57613b7c6136c9565b82600160ff1b038412811615613b9457613b946136c9565b50500190565b60005b83811015613bb5578181015183820152602001613b9d565b838111156117265750506000910152565b60008251613bd8818460208701613b9a565b9190910192915050565b6020815260008251806020840152613c01816040850160208701613b9a565b601f01601f1916919091016040019291505056fe1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7a26469706673582212206010c1cd6728a31cb1248ab088859743634a4faad10ebfcc15722da9fa5c86e164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "Available rewards for `programId`"
        }
      },
      "claim(address)": {
        "params": {
          "product": "Product to claim rewards for"
        }
      },
      "claim(uint256)": {
        "params": {
          "programId": "Program to claim rewards for"
        }
      },
      "claimFee(address[])": {
        "params": {
          "tokens": "Tokens to claim fees for"
        }
      },
      "close(uint256)": {
        "params": {
          "programId": "Program to end"
        }
      },
      "closed(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "whether closed for `programId`"
        }
      },
      "create(((uint256,uint256),uint256,uint256,uint256,address,address))": {
        "details": "Must be called as the product or protocol owner",
        "params": {
          "info": "Parameters for the new program"
        },
        "returns": {
          "_0": "new program's ID"
        }
      },
      "end(uint256)": {
        "details": "Must be called as the program owner",
        "params": {
          "programId": "Program to end"
        }
      },
      "initialize(address)": {
        "details": "Must be called atomically as part of the upgradeable proxy deployment to      avoid front-running",
        "params": {
          "controller_": "Factory contract address"
        }
      },
      "latestVersion(address,uint256)": {
        "params": {
          "account": "Account to return for",
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "`account`'s latest synced version for `programId`"
        }
      },
      "owner(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "The owner of `programId`"
        }
      },
      "paused(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "The paused status of `programId`"
        }
      },
      "programInfos(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "Program info"
        }
      },
      "programsForAt(address,uint256)": {
        "params": {
          "index": "Index to return for",
          "product": "Product to return for"
        },
        "returns": {
          "_0": "The program at index `index` for `product`"
        }
      },
      "programsForLength(address)": {
        "params": {
          "product": "Product to return for"
        },
        "returns": {
          "_0": "Quantity of programs for `product`"
        }
      },
      "settled(address,uint256)": {
        "params": {
          "account": "Account to return for",
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "`account`'s settled rewards for `programId`"
        }
      },
      "sync((uint256,uint256,int256))": {
        "details": "Called every settle() from each product"
      },
      "syncAccount(address)": {
        "details": "Called immediately proceeding a position update in the corresponding product",
        "params": {
          "account": "Account to sync"
        }
      },
      "treasury(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "The treasury of `programId`"
        }
      },
      "unclaimed(address,uint256)": {
        "params": {
          "account": "Account to return for",
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "`account`'s total unclaimed rewards for `programId`"
        }
      },
      "versionComplete(uint256)": {
        "params": {
          "programId": "Program to return for"
        },
        "returns": {
          "_0": "The version completed for `programId`"
        }
      }
    },
    "stateVariables": {
      "_programInfos": {
        "details": "Static program state"
      },
      "_programs": {
        "details": "Dynamic program state"
      },
      "_registry": {
        "details": "Mapping of all programs for each product"
      },
      "fees": {
        "details": "Fees that have been collected, but remain unclaimed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "available(uint256)": {
        "notice": "Returns available rewards for a specific program"
      },
      "claim(address)": {
        "notice": "Claims all of `msg.sender`'s rewards for `product` programs"
      },
      "claim(uint256)": {
        "notice": "Claims all of `msg.sender`'s rewards for a specific program"
      },
      "claimFee(address[])": {
        "notice": "Claims all `tokens` fees to the protocol treasury"
      },
      "close(uint256)": {
        "notice": "Closes a program, returning all unclaimed rewards"
      },
      "closed(uint256)": {
        "notice": "Returns whether closed for a specific program"
      },
      "create(((uint256,uint256),uint256,uint256,uint256,address,address))": {
        "notice": "Creates a new incentive program"
      },
      "end(uint256)": {
        "notice": "Completes an in-progress program early"
      },
      "initialize(address)": {
        "notice": "Initializes the contract state"
      },
      "latestVersion(address,uint256)": {
        "notice": "Returns `account`'s latest synced version for a specific program"
      },
      "owner(uint256)": {
        "notice": "Returns the owner of a specific program"
      },
      "paused(uint256)": {
        "notice": "Returns the paused status of a specific program"
      },
      "programInfos(uint256)": {
        "notice": "Returns program info for program `programId`"
      },
      "programsForAt(address,uint256)": {
        "notice": "Returns the program at index `index` for a specific product"
      },
      "programsForLength(address)": {
        "notice": "Returns quantity of programs for a specific product"
      },
      "settled(address,uint256)": {
        "notice": "Returns `account`'s settled rewards for a specific program"
      },
      "sync((uint256,uint256,int256))": {
        "notice": "Completes any in-progress programs that newly completable"
      },
      "syncAccount(address)": {
        "notice": "Settles unsettled balance for `account`"
      },
      "treasury(uint256)": {
        "notice": "Returns the treasury of a specific program"
      },
      "unclaimed(address,uint256)": {
        "notice": "Returns `account`'s total unclaimed rewards for a specific program"
      },
      "versionComplete(uint256)": {
        "notice": "Returns the version completed for a specific program"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11145,
        "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
        "label": "_programInfos",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(ProgramInfo)14851_storage)dyn_storage"
      },
      {
        "astId": 11151,
        "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
        "label": "_programs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Program)12145_storage)"
      },
      {
        "astId": 11158,
        "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
        "label": "_registry",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IProduct)13640,t_struct(UintSet)8867_storage)"
      },
      {
        "astId": 11165,
        "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
        "label": "fees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_userDefinedValueType(Token)2599,t_userDefinedValueType(UFixed18)1887)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProgramInfo)14851_storage)dyn_storage": {
        "base": "t_struct(ProgramInfo)14851_storage",
        "encoding": "dynamic_array",
        "label": "struct ProgramInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IProduct)13640": {
        "encoding": "inplace",
        "label": "contract IProduct",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_userDefinedValueType(UFixed18)1887)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => UFixed18)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(UFixed18)1887"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IProduct)13640,t_struct(UintSet)8867_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IProduct)13640",
        "label": "mapping(contract IProduct => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)8867_storage"
      },
      "t_mapping(t_uint256,t_struct(Program)12145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Program)",
        "numberOfBytes": "32",
        "value": "t_struct(Program)12145_storage"
      },
      "t_mapping(t_userDefinedValueType(Token)2599,t_userDefinedValueType(UFixed18)1887)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Token)2599",
        "label": "mapping(Token => UFixed18)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(UFixed18)1887"
      },
      "t_struct(Position)13948_storage": {
        "encoding": "inplace",
        "label": "struct Position",
        "members": [
          {
            "astId": 13943,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "maker",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(UFixed18)1887"
          },
          {
            "astId": 13947,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "taker",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(UFixed18)1887"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Program)12145_storage": {
        "encoding": "inplace",
        "label": "struct Program",
        "members": [
          {
            "astId": 12125,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "latestVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 12131,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "settled",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)1887)"
          },
          {
            "astId": 12135,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "available",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(UFixed18)1887"
          },
          {
            "astId": 12138,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "versionComplete",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12141,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "closed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 12144,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "protocolOwned",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(ProgramInfo)14851_storage": {
        "encoding": "inplace",
        "label": "struct ProgramInfo",
        "members": [
          {
            "astId": 14833,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)13948_storage"
          },
          {
            "astId": 14836,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "start",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14839,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14842,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "grace",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14846,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "product",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IProduct)13640"
          },
          {
            "astId": 14850,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "token",
            "offset": 0,
            "slot": "6",
            "type": "t_userDefinedValueType(Token)2599"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)8409_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8404,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8408,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)8867_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 8866,
            "contract": "contracts/incentivizer/Incentivizer.sol:Incentivizer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8409_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(Token)2599": {
        "encoding": "inplace",
        "label": "Token",
        "numberOfBytes": "20"
      },
      "t_userDefinedValueType(UFixed18)1887": {
        "encoding": "inplace",
        "label": "UFixed18",
        "numberOfBytes": "32"
      }
    }
  }
}
