{
  "address": "0xD260A68a081f1D92f5Eb1F0aFDB29f00836dfa6b",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed18OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Fixed18PackingOverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Fixed18PackingUnderflowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidControllerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCollateralError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coordinatorId",
          "type": "uint256"
        }
      ],
      "name": "NotOwnerError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "NotProductError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "NotProductOwnerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductDoubleSidedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductInLiquidationError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductInsufficientCollateralError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "socializationFactor",
          "type": "uint256"
        }
      ],
      "name": "ProductInsufficientLiquidityError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductMakerOverLimitError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductOracleBootstrappingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductOverClosedError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UFixed18PackingOverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "UInitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableZeroVersionError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UReentrancyGuardReentrantCallError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toVersion",
          "type": "uint256"
        }
      ],
      "name": "AccountSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MakeClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MakeOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toVersion",
          "type": "uint256"
        }
      ],
      "name": "Settle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TakeClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TakeOpened",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "closeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "closeMake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "closeTake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProductProvider",
          "name": "productProvider_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLiquidating",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "latestVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maintenance",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maintenanceNext",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "openMake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "openTake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "position",
      "outputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleVersion",
          "type": "uint256"
        }
      ],
      "name": "positionAtVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pre",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openPosition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "closePosition",
              "type": "tuple"
            }
          ],
          "internalType": "struct PrePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pre",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openPosition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "closePosition",
              "type": "tuple"
            }
          ],
          "internalType": "struct PrePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productProvider",
      "outputs": [
        {
          "internalType": "contract IProductProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "settleAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleVersion",
          "type": "uint256"
        }
      ],
      "name": "shareAtVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Fixed18",
              "name": "maker",
              "type": "int256"
            },
            {
              "internalType": "Fixed18",
              "name": "taker",
              "type": "int256"
            }
          ],
          "internalType": "struct Accumulator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleVersion",
          "type": "uint256"
        }
      ],
      "name": "valueAtVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Fixed18",
              "name": "maker",
              "type": "int256"
            },
            {
              "internalType": "Fixed18",
              "name": "taker",
              "type": "int256"
            }
          ],
          "internalType": "struct Accumulator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdab2127226a123ec7351c1b30fc88d6e768824e60ae7d4a2e80096fa916f35d7",
  "receipt": {
    "to": null,
    "from": "0x66a7fDB96C583c59597de16d8b2B989231415339",
    "contractAddress": "0xD260A68a081f1D92f5Eb1F0aFDB29f00836dfa6b",
    "transactionIndex": 0,
    "gasUsed": "5255939",
    "logsBloom": "0x
    "blockHash": "0xf6c8bf95907ac49412a946b1cf29152e931d70dfbcbdb0dcd619c7732a67caa2",
    "transactionHash": "0xdab2127226a123ec7351c1b30fc88d6e768824e60ae7d4a2e80096fa916f35d7",
    "logs": [],
    "blockNumber": 32146331,
    "cumulativeGasUsed": "5255939",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "63dcab9f29e1f646a99411213b85486b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed18OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Fixed18PackingOverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Fixed18PackingUnderflowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidControllerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCollateralError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coordinatorId\",\"type\":\"uint256\"}],\"name\":\"NotOwnerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"NotProductError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"NotProductOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductDoubleSidedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductInLiquidationError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductInsufficientCollateralError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"socializationFactor\",\"type\":\"uint256\"}],\"name\":\"ProductInsufficientLiquidityError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductMakerOverLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductOracleBootstrappingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductOverClosedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UFixed18PackingOverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"UInitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableZeroVersionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UReentrancyGuardReentrantCallError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toVersion\",\"type\":\"uint256\"}],\"name\":\"AccountSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MakeClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MakeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toVersion\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"closeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"closeMake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"closeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProductProvider\",\"name\":\"productProvider_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"latestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maintenance\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maintenanceNext\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"openMake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"openTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"}],\"name\":\"positionAtVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pre\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pre\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productProvider\",\"outputs\":[{\"internalType\":\"contract IProductProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"settleAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"}],\"name\":\"shareAtVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"Fixed18\",\"name\":\"maker\",\"type\":\"int256\"},{\"internalType\":\"Fixed18\",\"name\":\"taker\",\"type\":\"int256\"}],\"internalType\":\"struct Accumulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"}],\"name\":\"valueAtVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"Fixed18\",\"name\":\"maker\",\"type\":\"int256\"},{\"internalType\":\"Fixed18\",\"name\":\"taker\",\"type\":\"int256\"}],\"internalType\":\"struct Accumulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Cloned by the Controller contract to launch new product markets.\",\"kind\":\"dev\",\"methods\":{\"closeAll(address)\":{\"details\":\"Only callable by the Collateral contract as part of the liquidation flow\",\"params\":{\"account\":\"Account to close out\"}},\"closeMake(uint256)\":{\"params\":{\"amount\":\"Amount of the position to close\"}},\"closeTake(uint256)\":{\"params\":{\"amount\":\"Amount of the position to close\"}},\"initialize(address)\":{\"params\":{\"productProvider_\":\"Product provider contract address\"}},\"isClosed(address)\":{\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"The the account is closed\"}},\"isLiquidating(address)\":{\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"Whether the account is in liquidation\"}},\"latestVersion()\":{\"returns\":{\"_0\":\"Latest settled oracle version of the product\"}},\"latestVersion(address)\":{\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"Latest settled oracle version of the account\"}},\"maintenance(address)\":{\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"The current maintenance requirement\"}},\"maintenanceNext(address)\":{\"details\":\"Assumes no price change and no funding, used to protect user from over-opening\",\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"The next maintenance requirement\"}},\"openMake(uint256)\":{\"params\":{\"amount\":\"Amount of the position to open\"}},\"openTake(uint256)\":{\"params\":{\"amount\":\"Amount of the position to open\"}},\"position(address)\":{\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"Current position of the account\"}},\"positionAtVersion(uint256)\":{\"details\":\"Only valid for the version at which a global settlement occurred\",\"params\":{\"oracleVersion\":\"Oracle version to return for\"},\"returns\":{\"_0\":\"Global position at oracle version\"}},\"pre()\":{\"returns\":{\"_0\":\"Global pending-settlement position\"}},\"pre(address)\":{\"params\":{\"account\":\"Account to return for\"},\"returns\":{\"_0\":\"Current pre-position of the account\"}},\"settleAccount(address)\":{\"params\":{\"account\":\"Account to settle\"}},\"shareAtVersion(uint256)\":{\"details\":\"Only valid for the version at which a global settlement occurred\",\"params\":{\"oracleVersion\":\"Oracle version to return for\"},\"returns\":{\"_0\":\"Global accumulator share at oracle version\"}},\"valueAtVersion(uint256)\":{\"details\":\"Only valid for the version at which a global settlement occurred\",\"params\":{\"oracleVersion\":\"Oracle version to return for\"},\"returns\":{\"_0\":\"Global accumulator value at oracle version\"}}},\"stateVariables\":{\"_accumulator\":{\"details\":\"The global accumulator state for the product\"},\"_accumulators\":{\"details\":\"The individual accumulator state for each account\"},\"_position\":{\"details\":\"The global position state for the product\"},\"_positions\":{\"details\":\"The individual position state for each account\"},\"productProvider\":{\"details\":\"The parameter provider of the product market\"}},\"title\":\"Product\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeAll(address)\":{\"notice\":\"Closes all open and pending positions, locking for liquidation\"},\"closeMake(uint256)\":{\"notice\":\"Closes a maker position for `msg.sender`\"},\"closeTake(uint256)\":{\"notice\":\"Closes a taker position for `msg.sender`\"},\"initialize(address)\":{\"notice\":\"Initializes the contract state\"},\"isClosed(address)\":{\"notice\":\"Returns whether `account` has a completely zero'd position\"},\"isLiquidating(address)\":{\"notice\":\"Returns whether `account` is currently locked for an in-progress liquidation\"},\"latestVersion()\":{\"notice\":\"Returns the global latest settled oracle version\"},\"latestVersion(address)\":{\"notice\":\"Returns `account`'s latest settled oracle version\"},\"maintenance(address)\":{\"notice\":\"Returns the maintenance requirement for `account`\"},\"maintenanceNext(address)\":{\"notice\":\"Returns the maintenance requirement for `account` after next settlement\"},\"openMake(uint256)\":{\"notice\":\"Opens a maker position for `msg.sender`\"},\"openTake(uint256)\":{\"notice\":\"Opens a taker position for `msg.sender`\"},\"position(address)\":{\"notice\":\"Returns `account`'s current position\"},\"positionAtVersion(uint256)\":{\"notice\":\"Returns the global position at oracleVersion `oracleVersion`\"},\"pre()\":{\"notice\":\"Returns the current global pending-settlement position\"},\"pre(address)\":{\"notice\":\"Returns `account`'s current pending-settlement position\"},\"settle()\":{\"notice\":\"Surfaces global settlement externally\"},\"settleAccount(address)\":{\"notice\":\"Surfaces account settlement externally\"},\"shareAtVersion(uint256)\":{\"notice\":\"Returns the global accumulator share at oracleVersion `oracleVersion`\"},\"valueAtVersion(uint256)\":{\"notice\":\"Returns the global accumulator value at oracleVersion `oracleVersion`\"}},\"notice\":\"Manages logic and state for a single product market.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/product/Product.sol\":\"Product\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@equilibria/root/control/unstructured/UInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @title UInitializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `UInitializable` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract UInitializable {\\n    error UInitializableZeroVersionError();\\n    error UInitializableAlreadyInitializedError(uint256 version);\\n    error UInitializableNotInitializingError();\\n\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UInitializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.UInitializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert UInitializableZeroVersionError();\\n        if (_version.read() >= version) revert UInitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert UInitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf88a17a4d1c8126df114a8e3ca095702699d1c270bf75eb49f595a681cf4b9c2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/control/unstructured/UReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UInitializable.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * NOTE: This contract has been extended from the Open Zeppelin library to include an\\n *       unstructured storage pattern, so that it can be safely mixed in with upgradeable\\n *       contracts without affecting their storage patterns through inheritance.\\n */\\nabstract contract UReentrancyGuard is UInitializable {\\n    error UReentrancyGuardReentrantCallError();\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    /**\\n     * @dev unstructured storage slot for the reentrancy status\\n     */\\n    Uint256Storage private constant _status = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UReentrancyGuard.status\\\"));\\n\\n    /**\\n     * @dev Initializes the contract setting the status to _NOT_ENTERED.\\n     */\\n    function __UReentrancyGuard__initialize() internal onlyInitializer {\\n        _status.store(_NOT_ENTERED);\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        if (_status.read() == _ENTERED) revert UReentrancyGuardReentrantCallError();\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status.store(_ENTERED);\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status.store(_NOT_ENTERED);\\n    }\\n}\\n\",\"keccak256\":\"0x4962245ca8fdda3dc40c0f942a3568d90fb69428a6927b058018b01c90eb9fc9\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) return Fixed18.wrap(-1 * Fixed18.unwrap(from(m)));\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x613587461ef3437ef33229cdda7d34ea746278721baf06e20b2e43977f43174d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0x860a1c54ea451289abde9ad678d5dc2e92432b17df648f0421bc6ffbf48b00b2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param self Sign\\n     * @return New signed fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xa12f541b8e2a2a3d5efeebdb3f39caec1db69cb7ce9ad5c6de12235a55a47a2d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ebef1e6c717f565b9ed545a876b5692b4007e6485c99f39d363f7405e591792\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/UStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\nlibrary BoolStorageLib {\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(BoolStorage self, bool value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Uint256StorageLib {\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Int256StorageLib {\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary AddressStorageLib {\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(AddressStorage self, address value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\nlibrary Bytes32StorageLib {\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88492ab164fab936db2df3f60d03350ac90ed5fd01bcf85f27bdad867abd90ba\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token18 public constant ZERO = Token18.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token18 self) internal pure returns (bool) {\\n        return Token18.unwrap(self) == Token18.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token18 a, Token18 b) internal pure returns (bool) {\\n        return Token18.unwrap(a) ==  Token18.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318b6f49c3225000baeeaeb6a7dde25799d7b5d966fcff2a87b52ddcfc3ae381\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/controller/UControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@equilibria/root/storage/UStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IProduct.sol\\\";\\n\\n/**\\n * @title UControllerProvider\\n * @notice Mix-in that manages a controller pointer and associated permissioning modifiers.\\n * @dev Uses unstructured storage so that it is safe to mix-in to upgreadable contracts without modifying\\n *      their storage layout.\\n */\\nabstract contract UControllerProvider is UInitializable {\\n    error AlreadyInitializedError();\\n    error NotOwnerError(uint256 coordinatorId);\\n    error NotProductError(IProduct product);\\n    error NotCollateralError();\\n    error NotProductOwnerError(IProduct product);\\n    error PausedError();\\n    error InvalidControllerError();\\n\\n    /// @dev The controller contract address\\n    AddressStorage private constant _controller = AddressStorage.wrap(keccak256(\\\"equilibria.perennial.UControllerProvider.controller\\\"));\\n    function controller() public view returns (IController) { return IController(_controller.read()); }\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param controller_ Protocol Controller contract address\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UControllerProvider__initialize(IController controller_) internal onlyInitializer {\\n        if (!Address.isContract(address(controller_))) revert InvalidControllerError();\\n        _controller.store(address(controller_));\\n    }\\n\\n    /// @dev Only allow a valid product contract to call\\n    modifier onlyProduct {\\n        if (!controller().isProduct(IProduct(msg.sender))) revert NotProductError(IProduct(msg.sender));\\n\\n        _;\\n    }\\n\\n    /// @dev Verify that `product` is a valid product contract\\n    modifier isProduct(IProduct product) {\\n        if (!controller().isProduct(product)) revert NotProductError(product);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow the Collateral contract to call\\n    modifier onlyCollateral {\\n        if (msg.sender != address(controller().collateral())) revert NotCollateralError();\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow the protocol owner to call\\n    modifier onlyOwner(uint256 coordinatorId) {\\n        if (msg.sender != controller().owner(coordinatorId)) revert NotOwnerError(coordinatorId);\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow if the protocol is currently unpaused\\n    modifier notPaused() {\\n        if (controller().paused()) revert PausedError();\\n\\n        _;\\n    }\\n\\n    /// @dev Only allow if both the protocol and the product are currently unpaused\\n    modifier notPausedProduct(IProduct product) {\\n        if (controller().paused(product)) revert PausedError();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x16ca0a172149b4d28fb84e1f030d89c285489e7bc3b60c28bf834f1d5085be5d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface ICollateral {\\n    event Deposit(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event Withdrawal(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event AccountSettle(IProduct indexed product, address indexed account, Fixed18 amount, UFixed18 newShortfall);\\n    event ProductSettle(IProduct indexed product, UFixed18 protocolFee, UFixed18 productFee);\\n    event Liquidation(address indexed user, IProduct indexed product, address liquidator, UFixed18 fee);\\n    event ShortfallResolution(IProduct indexed product, UFixed18 amount);\\n    event FeeClaim(address indexed account, UFixed18 amount);\\n\\n    error CollateralCantLiquidate(UFixed18 totalMaintenance, UFixed18 totalCollateral);\\n    error CollateralInsufficientCollateralError();\\n    error CollateralUnderLimitError();\\n    error CollateralZeroAddressError();\\n\\n    function token() external view returns (Token18);\\n    function fees(address account) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function depositTo(address account, IProduct product, UFixed18 amount) external;\\n    function withdrawTo(address account, IProduct product, UFixed18 amount) external;\\n    function liquidate(address account, IProduct product) external;\\n    function settleAccount(address account, Fixed18 amount) external;\\n    function settleProduct(UFixed18 amount) external;\\n    function collateral(address account, IProduct product) external view returns (UFixed18);\\n    function collateral(IProduct product) external view returns (UFixed18);\\n    function shortfall(IProduct product) external view returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external view returns (bool);\\n    function liquidatableNext(address account, IProduct product) external view returns (bool);\\n    function resolveShortfall(IProduct product, UFixed18 amount) external;\\n    function claimFee() external;\\n}\\n\",\"keccak256\":\"0xa5e7fdda92702f748e6eb8701e522450035a98a05e5fc1cf66d51c52e397d914\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IIncentivizer.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IController {\\n    /// @dev Coordinator of a one or many products\\n    struct Coordinator {\\n        /// @dev Pending owner of the product, can accept ownership\\n        address pendingOwner;\\n\\n        /// @dev Owner of the product, allowed to update select parameters\\n        address owner;\\n\\n        /// @dev Treasury of the product, collects fees\\n        address treasury;\\n\\n        /// @dev the address that is allowed to pause the coordinated products (0-address defaults to owner)\\n        address pauser;\\n\\n        /// @dev Whether the coordinated products are paused\\n        bool paused;\\n    }\\n\\n    event CollateralUpdated(ICollateral newCollateral);\\n    event IncentivizerUpdated(IIncentivizer newIncentivizer);\\n    event ProductBeaconUpdated(IBeacon newProductBeacon);\\n    event ProtocolFeeUpdated(UFixed18 newProtocolFee);\\n    event MinFundingFeeUpdated(UFixed18 newMinFundingFee);\\n    event LiquidationFeeUpdated(UFixed18 newLiquidationFee);\\n    event IncentivizationFeeUpdated(UFixed18 newIncentivizationFee);\\n    event MinCollateralUpdated(UFixed18 newMinCollateral);\\n    event ProgramsPerProductUpdated(uint256 newProgramsPerProduct);\\n    event CoordinatorPendingOwnerUpdated(uint256 indexed coordinatorId, address newPendingOwner);\\n    event CoordinatorOwnerUpdated(uint256 indexed coordinatorId, address newOwner);\\n    event CoordinatorTreasuryUpdated(uint256 indexed coordinatorId, address newTreasury);\\n    event CoordinatorPauserUpdated(uint256 indexed coordinatorId, address pauser);\\n    event CoordinatorPausedUpdated(uint256 indexed coordinatorId, bool paused);\\n    event CoordinatorCreated(uint256 indexed coordinatorId, address owner);\\n    event ProductCreated(IProduct indexed product, IProductProvider provider);\\n\\n    error ControllerAlreadyInitializedError();\\n    error ControllerNoZeroCoordinatorError();\\n    error ControllerNotPauserError(uint256 coordinatorId);\\n    error ControllerNotOwnerError(uint256 controllerId);\\n    error ControllerNotPendingOwnerError(uint256 controllerId);\\n    error ControllerInvalidProtocolFeeError();\\n    error ControllerInvalidMinFundingFeeError();\\n    error ControllerInvalidLiquidationFeeError();\\n    error ControllerInvalidIncentivizationFeeError();\\n\\n    function collateral() external view returns (ICollateral);\\n    function incentivizer() external view returns (IIncentivizer);\\n    function productBeacon() external view returns (IBeacon);\\n    function coordinators(uint256 collateralId) external view returns (Coordinator memory);\\n    function coordinatorFor(IProduct product) external view returns (uint256);\\n    function protocolFee() external view returns (UFixed18);\\n    function minFundingFee() external view returns (UFixed18);\\n    function liquidationFee() external view returns (UFixed18);\\n    function incentivizationFee() external view returns (UFixed18);\\n    function minCollateral() external view returns (UFixed18);\\n    function programsPerProduct() external view returns (uint256);\\n    function initialize(ICollateral collateral_, IIncentivizer incentivizer_, IBeacon productBeacon_) external;\\n    function createCoordinator(address coordinatorOwner) external returns (uint256);\\n    function updateCoordinatorPendingOwner(uint256 coordinatorId, address newPendingOwner) external;\\n    function acceptCoordinatorOwner(uint256 coordinatorId) external;\\n    function updateCoordinatorTreasury(uint256 coordinatorId, address newTreasury) external;\\n    function updateCoordinatorPauser(uint256 coordinatorId, address newPauser) external;\\n    function updateCoordinatorPaused(uint256 coordinatorId, bool newPaused) external;\\n    function createProduct(uint256 coordinatorId, IProductProvider provider) external returns (IProduct);\\n    function updateCollateral(ICollateral newCollateral) external;\\n    function updateIncentivizer(IIncentivizer newIncentivizer) external;\\n    function updateProductBeacon(IBeacon newProductBeacon) external;\\n    function updateProtocolFee(UFixed18 newProtocolFee) external;\\n    function updateMinFundingFee(UFixed18 newMinFundingFee) external;\\n    function updateLiquidationFee(UFixed18 newLiquidationFee) external;\\n    function updateIncentivizationFee(UFixed18 newIncentivizationFee) external;\\n    function updateMinCollateral(UFixed18 newMinCollateral) external;\\n    function updateProgramsPerProduct(uint256 newProductsPerProduct) external;\\n    function isProduct(IProduct product) external view returns (bool);\\n    function owner() external view returns (address);\\n    function owner(uint256 coordinatorId) external view returns (address);\\n    function owner(IProduct product) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasury(uint256 coordinatorId) external view returns (address);\\n    function treasury(IProduct product) external view returns (address);\\n    function pauser() external view returns (address);\\n    function pauser(uint256 coordinatorId) external view returns (address);\\n    function pauser(IProduct product) external view returns (address);\\n    function paused() external view returns (bool);\\n    function paused(uint256 coordinatorId) external view returns (bool);\\n    function paused(IProduct product) external view returns (bool);\\n}\",\"keccak256\":\"0xe3e848c947097c36ac1ac1ee408c035aa5888a30112e99394a863a28fcfaf146\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IIncentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/ProgramInfo.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IIncentivizer {\\n    event ProgramCreated(IProduct indexed product, uint256 indexed programId, uint256 coordinatorId, Token18 token, UFixed18 amountMaker, UFixed18 amountTaker, uint256 start, uint256 duration, UFixed18 programFeeAmount);\\n    event ProgramStarted(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event ProgramComplete(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event Claim(IProduct indexed product, address indexed account, uint256 indexed programId, UFixed18 amount);\\n    event FeeClaim(Token18 indexed token, UFixed18 amount);\\n\\n    error IncentivizerNotAllowedError(IProduct product);\\n    error IncentivizerTooManyProgramsError();\\n    error IncentivizerNotProgramOwnerError(IProduct product, uint256 programId);\\n    error IncentivizerInvalidProgramError(IProduct product, uint256 programId);\\n\\n    function programInfos(IProduct product, uint256 programId) external view returns (ProgramInfo memory);\\n    function fees(Token18 token) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function create(IProduct product, ProgramInfo calldata info) external returns (uint256);\\n    function complete(IProduct product, uint256 programId) external;\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function syncAccount(address account, IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function claim(IProduct product, uint256[] calldata programIds) external;\\n    function claim(IProduct[] calldata products, uint256[][] calldata programIds) external;\\n    function claimFee(Token18[] calldata tokens) external;\\n    function active(IProduct product) external view returns (uint256);\\n    function count(IProduct product) external view returns (uint256);\\n    function unclaimed(IProduct product, address account, uint256 programId) external view returns (UFixed18);\\n    function available(IProduct product, uint256 programId) external view returns (UFixed18);\\n    function versionStarted(IProduct product, uint256 programId) external view returns (uint256);\\n    function versionComplete(IProduct product, uint256 programId) external view returns (uint256);\\n    function owner(IProduct product, uint256 programId) external view returns (address);\\n    function treasury(IProduct product, uint256 programId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x46f3cbdb6ff3214609d88069a18dae1d607833bcc92d67304955017cbd9f3f67\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    function sync() external returns (OracleVersion memory);\\n    function currentVersion() external view returns (OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0xde0f20d468ba8b91addfc356e13f2c74a4dc8abe68be323942217c723775d9c1\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./types/PrePosition.sol\\\";\\nimport \\\"./types/Accumulator.sol\\\";\\nimport \\\"./IProductProvider.sol\\\";\\n\\ninterface IProduct {\\n    event Settle(uint256 preVersion, uint256 toVersion);\\n    event AccountSettle(address indexed account, uint256 preVersion, uint256 toVersion);\\n    event MakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event MakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n\\n    error ProductInsufficientLiquidityError(UFixed18 socializationFactor);\\n    error ProductDoubleSidedError();\\n    error ProductOverClosedError();\\n    error ProductInsufficientCollateralError();\\n    error ProductInLiquidationError();\\n    error ProductMakerOverLimitError();\\n    error ProductOracleBootstrappingError();\\n\\n    function productProvider() external view returns (IProductProvider);\\n    function initialize(IProductProvider productProvider_) external;\\n    function settle() external;\\n    function settleAccount(address account) external;\\n    function openTake(UFixed18 amount) external;\\n    function closeTake(UFixed18 amount) external;\\n    function openMake(UFixed18 amount) external;\\n    function closeMake(UFixed18 amount) external;\\n    function closeAll(address account) external;\\n    function maintenance(address account) external view returns (UFixed18);\\n    function maintenanceNext(address account) external view returns (UFixed18);\\n    function isClosed(address account) external view returns (bool);\\n    function isLiquidating(address account) external view returns (bool);\\n    function position(address account) external view returns (Position memory);\\n    function pre(address account) external view returns (PrePosition memory);\\n    function latestVersion() external view returns (uint256);\\n    function positionAtVersion(uint256 oracleVersion) external view returns (Position memory);\\n    function pre() external view returns (PrePosition memory);\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function latestVersion(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6daf998516f069ace15047ba59f3a3fe00394e82e01638a937e1bcaff16cd63e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\n\\ninterface IProductProvider is IOracleProvider {\\n    function oracle() external view returns (IOracleProvider);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function rate(Position memory position) external view returns (Fixed18);\\n    function maintenance() external view returns (UFixed18);\\n    function fundingFee() external view returns (UFixed18);\\n    function makerFee() external view returns (UFixed18);\\n    function takerFee() external view returns (UFixed18);\\n    function makerLimit() external view returns (UFixed18);\\n}\\n\",\"keccak256\":\"0xeed08e4335ca553a639e6a77274df69c01413dd652e4d764f36ad7ae50016a8b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Accumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./PackedAccumulator.sol\\\";\\n\\n/// @dev Accumulator type\\nstruct Accumulator {\\n    /// @dev maker accumulator per share\\n    Fixed18 maker;\\n    /// @dev taker accumulator per share\\n    Fixed18 taker;\\n}\\nusing AccumulatorLib for Accumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that surfaces math operations for the Accumulator type.\\n * @dev Accumulators track the cumulative change in position value over time for the maker and taker positions\\n *      respectively. Account-level accumulators can then use two of these values `a` and `a'` to compute the\\n *      change in position value since last sync. This change in value is then used to compute P&L and fees.\\n */\\nlibrary AccumulatorLib {\\n    /**\\n     * @notice Creates a packed accumulator from an accumulator\\n     * @param self an accumulator\\n     * @return New packed accumulator\\n     */\\n    function pack(Accumulator memory self) internal pure returns (PackedAccumulator memory) {\\n        return PackedAccumulator({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Adds two accumulators together\\n     * @param a The first accumulator to sum\\n     * @param b The second accumulator to sum\\n     * @return The resulting summed accumulator\\n     */\\n    function add(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts accumulator `b` from `a`\\n     * @param a The accumulator to subtract from\\n     * @param b The accumulator to subtract\\n     * @return The resulting subtracted accumulator\\n     */\\n    function sub(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies two accumulators together\\n     * @param a The first accumulator to multiply\\n     * @param b The second accumulator to multiply\\n     * @return The resulting multiplied accumulator\\n     */\\n    function mul(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.mul(b.maker), taker: a.taker.mul(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single accumulator\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Accumulator memory self) internal pure returns (Fixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n}\\n\",\"keccak256\":\"0x7ccd0a72aa593cefb9f4337cf312799f357b82fcb3f0379de0dc503d1cb7e387\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev PackedAccumulator type\\nstruct PackedAccumulator {\\n    /// @dev maker accumulator per share\\n    PackedFixed18 maker;\\n    /// @dev taker accumulator per share\\n    PackedFixed18 taker;\\n}\\nusing PackedAccumulatorLib for PackedAccumulator global;\\n\\n/**\\n * @title PackedAccumulatorLib\\n * @dev A packed version of the Accumulator which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Accumulator type.\\n */\\nlibrary PackedAccumulatorLib {\\n    /**\\n     * @notice Creates an accumulator from a packed accumulator\\n     * @param self packed accumulator\\n     * @return New accumulator\\n     */\\n    function unpack(PackedAccumulator memory self) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0xd83f2822d4f6c818087a232b54007730992c34ff77377fc307a282f886e7cf65\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedUFixed18.sol\\\";\\nimport \\\"./Position.sol\\\";\\n\\n/// @dev PackedPosition type\\nstruct PackedPosition {\\n    /// @dev Quantity of the maker position\\n    PackedUFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    PackedUFixed18 taker;\\n}\\nusing PackedPositionLib for PackedPosition global;\\n\\n/**\\n * @title PackedPositionLib\\n * @dev A packed version of the Position which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Position type.\\n */\\nlibrary PackedPositionLib {\\n    /**\\n     * @notice Creates an position from a packed position\\n     * @param self packed position\\n     * @return New position\\n     */\\n    function unpack(PackedPosition memory self) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0x04968e6794f6244cb3415cea111d640273a81faea957872988d0cb580f45df1e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\nimport \\\"./PrePosition.sol\\\";\\nimport \\\"./PackedPosition.sol\\\";\\n\\n/// @dev Position type\\nstruct Position {\\n    /// @dev Quantity of the maker position\\n    UFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    UFixed18 taker;\\n}\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Library that surfaces math and settlement computations for the Position type.\\n * @dev Positions track the current quantity of the account's maker and taker positions respectively\\n *      denominated as a unit of the product's payoff function.\\n */\\nlibrary PositionLib {\\n    /**\\n     * @notice Creates a packed position from an position\\n     * @param self A position\\n     * @return New packed position\\n     */\\n    function pack(Position memory self) internal pure returns (PackedPosition memory) {\\n        return PackedPosition({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Returns whether the position is fully empty\\n     * @param self A position\\n     * @return Whether the position is empty\\n     */\\n    function isEmpty(Position memory self) internal pure returns (bool) {\\n        return self.maker.isZero() && self.taker.isZero();\\n    }\\n\\n    /**\\n     * @notice Adds position `a` and `b` together, returning the result\\n     * @param a The first position to sum\\n     * @param b The second position to sum\\n     * @return Resulting summed position\\n     */\\n    function add(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts position `b` from `a`, returning the result\\n     * @param a The position to subtract from\\n     * @param b The position to subtract\\n     * @return Resulting subtracted position\\n     */\\n    function sub(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies position `self` by accumulator `accumulator` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param accumulator The accumulator to multiply by\\n     * @return Resulting multiplied accumulator\\n     */\\n    function mul(Position memory self, Accumulator memory accumulator) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).mul(accumulator.maker),\\n            taker: Fixed18Lib.from(self.taker).mul(accumulator.taker)\\n        });\\n    }\\n\\n    /**\\n     * @notice Scales position `self` by fixed-decimal `scale` and returns the resulting position\\n     * @param self The Position to operate on\\n     * @param scale The Fixed-decimal to scale by\\n     * @return Resulting scaled position\\n     */\\n    function mul(Position memory self, UFixed18 scale) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.mul(scale), taker: self.taker.mul(scale)});\\n    }\\n\\n    /**\\n     * @notice Divides position `self` by `b` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param b The number to divide by\\n     * @return Resulting divided accumulator\\n     */\\n    function div(Position memory self, uint256 b) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).div(Fixed18Lib.from(UFixed18Lib.from(b))),\\n            taker: Fixed18Lib.from(self.taker).div(Fixed18Lib.from(UFixed18Lib.from(b)))\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of `self`'s maker and taker values\\n     * @param self The struct to operate on\\n     * @return Resulting maximum value\\n     */\\n    function max(Position memory self) internal pure returns (UFixed18) {\\n        return UFixed18Lib.max(self.maker, self.taker);\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single position\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Position memory self) internal pure returns (UFixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n\\n    /**\\n     * @notice Computes the next position after the pending-settlement position delta is included\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @return Next Position\\n     */\\n    function next(Position memory self, PrePosition memory pre) internal pure returns (Position memory) {\\n        return sub(add(self, pre.openPosition), pre.closePosition);\\n    }\\n\\n    /**\\n     * @notice Returns the settled position at oracle version `toOracleVersion`\\n     * @dev Checks if a new position is ready to be settled based on the provided `toOracleVersion`\\n     *      and `pre` and returns accordingly\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return Settled position at oracle version\\n     * @return Fee accrued from opening or closing the position\\n     * @return Whether a new position was settled\\n     */\\n    function settled(\\n        Position memory self,\\n        PrePosition memory pre,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (Position memory, UFixed18, bool) {\\n        return pre.canSettle(toOracleVersion) ? (next(self, pre), pre.computeFee(provider, toOracleVersion), true) : (self, UFixed18Lib.ZERO, false);\\n    }\\n\\n    /**\\n     * @notice Returns the socialization factor for the current position\\n     * @dev Socialization account for the case where `taker` > `maker` temporarily due to a liquidation\\n     *      on the maker side. This dampens the taker's exposure pro-rata to ensure that the maker side\\n     *      is never exposed over 1 x short.\\n     * @param self The Position to operate on\\n     * @return Socialization factor\\n     */\\n    function socializationFactor(Position memory self) internal pure returns (UFixed18) {\\n        return self.taker.isZero() ? UFixed18Lib.ONE : UFixed18Lib.min(UFixed18Lib.ONE, self.maker.div(self.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x238013d5792bcca49c815845fbd815ccd4ae97f8994ab33359827bdcc769c16b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PrePosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"./ProductProvider.sol\\\";\\n\\n/// @dev PrePosition type\\nstruct PrePosition {\\n    /// @dev Oracle version at which the new position delta was recorded\\n    uint256 oracleVersion;\\n\\n    /// @dev Size of position to open at oracle version\\n    Position openPosition;\\n\\n    /// @dev Size of position to close at oracle version\\n    Position closePosition;\\n}\\nusing PrePositionLib for PrePosition global;\\n\\n/**\\n * @title PrePositionLib\\n * @notice Library that manages a pre-settlement position delta.\\n * @dev PrePositions track the currently awaiting-settlement deltas to a settled Position. These are\\n *      Primarily necessary to introduce lag into the settlement system such that oracle lag cannot be\\n *      gamed to a user's advantage. When a user opens or closes a new position, it sits as a PrePosition\\n *      for one oracle version until it's settle into the Position, making it then effective. PrePositions\\n *      are automatically settled at the correct oracle version even if a flywheel call doesn't happen until\\n *      several version into the future by using the historical version lookups in the corresponding \\\"Versioned\\\"\\n *      global state types.\\n */\\nlibrary PrePositionLib {\\n    using ProductProviderLib for IProductProvider;\\n\\n    /**\\n     * @notice Returns whether there is no pending-settlement position delta\\n     * @dev Can be \\\"empty\\\" even with a non-zero oracleVersion if a position is opened and\\n     *      closed in the same version netting out to a zero position delta\\n     * @param self The struct to operate on\\n     * @return Whether the pending-settlement position delta is empty\\n     */\\n    function isEmpty(PrePosition memory self) internal pure returns (bool) {\\n        return self.openPosition.isEmpty() && self.closePosition.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The position amount to open\\n     */\\n    function openMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.maker = self.openPosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The maker position amount to close\\n     */\\n    function closeMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.maker = self.closePosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to open\\n     */\\n    function openTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.taker = self.openPosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netTake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to close\\n     */\\n    function closeTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.taker = self.closePosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netTake(self);\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the maker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function _netMake(PrePosition storage self) private {\\n        if (self.openPosition.maker.gt(self.closePosition.maker)) {\\n            self.openPosition.maker = self.openPosition.maker.sub(self.closePosition.maker);\\n            self.closePosition.maker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.maker = self.closePosition.maker.sub(self.openPosition.maker);\\n            self.openPosition.maker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the taker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function _netTake(PrePosition storage self) private {\\n        if (self.openPosition.taker.gt(self.closePosition.taker)) {\\n            self.openPosition.taker = self.openPosition.taker.sub(self.closePosition.taker);\\n            self.closePosition.taker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.taker = self.closePosition.taker.sub(self.openPosition.taker);\\n            self.openPosition.taker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the the pending position delta can be settled at version `toOracleVersion`\\n     * @dev Pending-settlement positions deltas can be settled (1) oracle version after they are recorded\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The potential oracle version to settle\\n     * @return Whether the position delta can be settled\\n     */\\n    function canSettle(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (bool) {\\n        return !isEmpty(self) && toOracleVersion.version > self.oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Computes the fee incurred for opening or closing the pending-settlement position\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version at which settlement takes place\\n     * @return positionFee The maker / taker fee incurred\\n     */\\n    function computeFee(\\n        PrePosition memory self,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (UFixed18) {\\n        Position memory positionDelta = self.openPosition.add(self.closePosition);\\n\\n        (UFixed18 makerNotional, UFixed18 takerNotional) = (\\n            Fixed18Lib.from(positionDelta.maker).mul(toOracleVersion.price).abs(),\\n            Fixed18Lib.from(positionDelta.taker).mul(toOracleVersion.price).abs()\\n        );\\n\\n        return makerNotional.mul(provider.safeMakerFee()).add(takerNotional.mul(provider.safeTakerFee()));\\n    }\\n\\n    /**\\n     * @notice Computes the next oracle version to settle\\n     * @dev - If there is no pending-settlement position delta, returns the current oracle version\\n     *      - Otherwise returns the oracle version at which the pending-settlement position delta can be first settled\\n     *\\n     *      Corresponds to point (b) in the Position settlement flow\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @return Next oracle version to settle\\n     */\\n    function settleVersion(PrePosition storage self, uint256 currentVersion) internal view returns (uint256) {\\n        uint256 _oracleVersion = self.oracleVersion;\\n        return _oracleVersion == 0 ? currentVersion : _oracleVersion + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xdf84172a254686f8cd721cd0c25f56e24a6f423f7ab780e7aa19bbf27352b392\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProductProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"../IProductProvider.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title ProductProviderLib\\n * @notice Library that adds a safeguard wrapper to certain product parameters.\\n * @dev Product providers are semi-untrusted as they contain custom code from the product owners. Owners\\n *      have full control over this parameter-setting code, however there are some \\\"known ranges\\\" that\\n *      a parameter cannot be outside of (i.e. a fee being over 100%).\\n */\\nlibrary ProductProviderLib {\\n    /**\\n     * @notice Returns the minimum funding fee parameter with a capped range for safety\\n     * @dev Caps controller.minFundingFee() <= self.minFundingFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @param controller The protocol Factory contract\\n     * @return Safe minimum funding fee parameter\\n     */\\n    function safeFundingFee(IProductProvider self, IController controller) internal view returns (UFixed18) {\\n        return self.fundingFee().max(controller.minFundingFee()).min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the maker fee parameter with a capped range for safety\\n     * @dev Caps self.makerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe maker fee parameter\\n     */\\n    function safeMakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.makerFee().min(UFixed18Lib.ONE);\\n    }\\n\\n    /**\\n     * @notice Returns the taker fee parameter with a capped range for safety\\n     * @dev Caps self.takerFee() <= 1\\n     * @param self The parameter provider to operate on\\n     * @return Safe taker fee parameter\\n     */\\n    function safeTakerFee(IProductProvider self) internal view returns (UFixed18) {\\n        return self.takerFee().min(UFixed18Lib.ONE);\\n    }\\n}\\n\",\"keccak256\":\"0x70f535ebe9b53f5ad94761e6e3da2b96ec261dce1c6c318e1f70b4e9e12b92b7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProgramInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev ProgramInfo type\\nstruct ProgramInfo {\\n    /// @dev Coordinator for this program\\n    uint256 coordinatorId;\\n\\n    /// @dev Amount of total maker and taker rewards\\n    Position amount;\\n\\n    /// @dev start timestamp of the program\\n    uint256 start;\\n\\n    /// @dev duration of the program (in seconds)\\n    uint256 duration;\\n\\n    /// @dev Reward ERC20 token contract\\n    Token18 token;\\n}\\nusing ProgramInfoLib for ProgramInfo global;\\n\\n/**\\n * @title ProgramInfoLib\\n * @notice Library that snapshots the static information for a single program.\\n * @dev This information does not change during the operation of a program.\\n */\\nlibrary ProgramInfoLib {\\n    uint256 private constant MIN_DURATION = 1 days;\\n    uint256 private constant MAX_DURATION = 2 * 365 days;\\n\\n    error ProgramInvalidStartError();\\n    error ProgramInvalidDurationError();\\n\\n    /**\\n     * @notice Validates and creates a new Program\\n     * @dev Reverts for invalid programInfos\\n     * @param programInfo Un-sanitized static program information\\n     */\\n    function validate(ProgramInfo memory programInfo) internal view {\\n        if (isStarted(programInfo, block.timestamp)) revert ProgramInvalidStartError();\\n        if (programInfo.duration < MIN_DURATION || programInfo.duration > MAX_DURATION) revert ProgramInvalidDurationError();\\n    }\\n\\n    /**\\n     * @notice Computes a new program info with the fee taken out of the amount\\n     * @param programInfo Original program info\\n     * @param incentivizationFee The incentivization fee\\n     * @return New program info\\n     * @return Fee amount\\n     */\\n    function deductFee(ProgramInfo memory programInfo, UFixed18 incentivizationFee)\\n    internal pure returns (ProgramInfo memory, UFixed18) {\\n        Position memory newProgramAmount = programInfo.amount.mul(UFixed18Lib.ONE.sub(incentivizationFee));\\n        UFixed18 programFeeAmount = programInfo.amount.sub(newProgramAmount).sum();\\n        programInfo.amount = newProgramAmount;\\n        return (programInfo, programFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the maker and taker amounts per position share\\n     * @param self The ProgramInfo to operate on\\n     * @return programFee Amounts per share\\n     */\\n    function amountPerShare(ProgramInfo memory self) internal pure returns (Accumulator memory) {\\n        return self.amount.div(self.duration);\\n    }\\n\\n    /**\\n     * @notice Returns whether the program has started by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program has started\\n     */\\n    function isStarted(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= self.start;\\n    }\\n\\n    /**\\n     * @notice Returns whether the program is completed by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program is completed\\n     */\\n    function isComplete(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= (self.start + self.duration);\\n    }\\n}\\n\",\"keccak256\":\"0x33b20b5688a58a81dad95dedd1743ff346c5724abd711150c9b33ab9addafb3c\",\"license\":\"Apache-2.0\"},\"contracts/product/Product.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@equilibria/root/control/unstructured/UReentrancyGuard.sol\\\";\\nimport \\\"./types/position/AccountPosition.sol\\\";\\nimport \\\"./types/accumulator/AccountAccumulator.sol\\\";\\nimport \\\"../controller/UControllerProvider.sol\\\";\\n\\n/**\\n * @title Product\\n * @notice Manages logic and state for a single product market.\\n * @dev Cloned by the Controller contract to launch new product markets.\\n */\\ncontract Product is IProduct, UInitializable, UControllerProvider, UReentrancyGuard {\\n    /// @dev The parameter provider of the product market\\n    IProductProvider public productProvider;\\n\\n    /// @dev The individual position state for each account\\n    mapping(address => AccountPosition) private _positions;\\n\\n    /// @dev The global position state for the product\\n    VersionedPosition private _position;\\n\\n    /// @dev The individual accumulator state for each account\\n    mapping(address => AccountAccumulator) private _accumulators;\\n\\n    /// @dev The global accumulator state for the product\\n    VersionedAccumulator private _accumulator;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param productProvider_ Product provider contract address\\n     */\\n    function initialize(IProductProvider productProvider_) external initializer(1) {\\n        __UControllerProvider__initialize(IController(msg.sender));\\n        __UReentrancyGuard__initialize();\\n\\n        productProvider = productProvider_;\\n    }\\n\\n    /**\\n     * @notice Surfaces global settlement externally\\n     */\\n    function settle() external nonReentrant notPausedProduct(IProduct(this)) {\\n        settleInternal();\\n    }\\n\\n    /**\\n     * @notice Core global settlement flywheel\\n     * @dev\\n     *  a) last settle oracle version\\n     *  b) latest pre position oracle version\\n     *  c) current oracle version\\n     *\\n     *  Settles from a->b then from b->c if either interval is non-zero to account for a change\\n     *  in position quantity at (b).\\n     *\\n     *  Syncs each to instantaneously after the oracle update.\\n     */\\n    function settleInternal() internal returns (IOracleProvider.OracleVersion memory currentOracleVersion) {\\n        (IProductProvider _provider, IController _controller) = (productProvider, controller());\\n\\n        // Get current oracle version\\n        currentOracleVersion = _provider.sync();\\n\\n        // Get latest oracle version\\n        uint256 _latestVersion = latestVersion();\\n        if (_latestVersion == currentOracleVersion.version) return currentOracleVersion; // short circuit entirely if a == c\\n        IOracleProvider.OracleVersion memory latestOracleVersion = _provider.atVersion(_latestVersion);\\n\\n        // Get settle oracle version\\n        uint256 _settleVersion = _position.pre.settleVersion(currentOracleVersion.version);\\n        IOracleProvider.OracleVersion memory settleOracleVersion = _settleVersion == currentOracleVersion.version ?\\n            currentOracleVersion : // if b == c, don't re-call provider for oracle version\\n            _provider.atVersion(_settleVersion);\\n\\n        // Initiate\\n        _controller.incentivizer().sync(currentOracleVersion);\\n        UFixed18 accumulatedFee;\\n\\n        // value a->b\\n        accumulatedFee = accumulatedFee.add(_accumulator.accumulate(_controller, _provider, _position, latestOracleVersion, settleOracleVersion));\\n\\n        // position a->b\\n        accumulatedFee = accumulatedFee.add(_position.settle(_provider, _latestVersion, settleOracleVersion));\\n\\n        // short-circuit from a->c if b == c\\n        if (settleOracleVersion.version != currentOracleVersion.version) {\\n\\n            // value b->c\\n            accumulatedFee = accumulatedFee.add(_accumulator.accumulate(_controller, _provider, _position, settleOracleVersion, currentOracleVersion));\\n\\n            // position b->c (every accumulator version needs a position stamp)\\n            _position.settle(_provider, settleOracleVersion.version, currentOracleVersion);\\n        }\\n\\n        // settle collateral\\n        _controller.collateral().settleProduct(accumulatedFee);\\n\\n        emit Settle(settleOracleVersion.version, currentOracleVersion.version);\\n    }\\n\\n    /**\\n     * @notice Surfaces account settlement externally\\n     * @param account Account to settle\\n     */\\n    function settleAccount(address account) external nonReentrant notPausedProduct(IProduct(this)) {\\n        IOracleProvider.OracleVersion memory currentOracleVersion = settleInternal();\\n        settleAccountInternal(account, currentOracleVersion);\\n    }\\n\\n    /**\\n     * @notice Core account settlement flywheel\\n     * @param account Account to settle\\n     * @dev\\n     *  a) last settle oracle version\\n     *  b) latest pre position oracle version\\n     *  c) current oracle version\\n     *\\n     *  Settles from a->b then from b->c if either interval is non-zero to account for a change\\n     *  in position quantity at (b).\\n     *\\n     *  Syncs each to instantaneously after the oracle update.\\n     */\\n    function settleAccountInternal(address account, IOracleProvider.OracleVersion memory currentOracleVersion) internal {\\n        (IProductProvider _provider, IController _controller) = (productProvider, controller());\\n\\n        // Get latest oracle version\\n        if (latestVersion(account) == currentOracleVersion.version) return; // short circuit entirely if a == c\\n\\n        // Get settle oracle version\\n        uint256 _settleVersion = _positions[account].pre.settleVersion(currentOracleVersion.version);\\n        IOracleProvider.OracleVersion memory settleOracleVersion = _settleVersion == currentOracleVersion.version ?\\n            currentOracleVersion : // if b == c, don't re-call provider for oracle version\\n            _provider.atVersion(_settleVersion);\\n\\n        // initialize\\n        Fixed18 accumulated;\\n\\n        // sync incentivizer before accumulator\\n        _controller.incentivizer().syncAccount(account, settleOracleVersion);\\n\\n        // value a->b\\n        accumulated = accumulated.add(\\n            _accumulators[account].syncTo(_accumulator, _positions[account], settleOracleVersion.version).sum());\\n\\n        // position a->b\\n        accumulated = accumulated.sub(Fixed18Lib.from(_positions[account].settle(_provider, settleOracleVersion)));\\n\\n        // short-circuit if a->c\\n        if (settleOracleVersion.version != currentOracleVersion.version) {\\n            // sync incentivizer before accumulator\\n            _controller.incentivizer().syncAccount(account, currentOracleVersion);\\n\\n            // value b->c\\n            accumulated = accumulated.add(\\n                _accumulators[account].syncTo(_accumulator, _positions[account], currentOracleVersion.version).sum());\\n        }\\n\\n        // settle collateral\\n        _controller.collateral().settleAccount(account, accumulated);\\n\\n        emit AccountSettle(account, settleOracleVersion.version, currentOracleVersion.version);\\n    }\\n\\n    /**\\n     * @notice Opens a taker position for `msg.sender`\\n     * @param amount Amount of the position to open\\n     */\\n    function openTake(UFixed18 amount)\\n    external\\n    nonReentrant\\n    notPausedProduct(IProduct(this))\\n    settleForAccount(msg.sender)\\n    takerInvariant\\n    positionInvariant\\n    liquidationInvariant\\n    maintenanceInvariant\\n    {\\n        uint256 _latestVersion = latestVersion();\\n\\n        _positions[msg.sender].pre.openTake(_latestVersion, amount);\\n        _position.pre.openTake(_latestVersion, amount);\\n\\n        emit TakeOpened(msg.sender, _latestVersion, amount);\\n    }\\n\\n    /**\\n     * @notice Closes a taker position for `msg.sender`\\n     * @param amount Amount of the position to close\\n     */\\n    function closeTake(UFixed18 amount)\\n    external\\n    nonReentrant\\n    notPausedProduct(IProduct(this))\\n    settleForAccount(msg.sender)\\n    closeInvariant\\n    liquidationInvariant\\n    {\\n        closeTakeInternal(msg.sender, amount);\\n    }\\n\\n    function closeTakeInternal(address account, UFixed18 amount) internal {\\n        uint256 _latestVersion = latestVersion();\\n\\n        _positions[account].pre.closeTake(_latestVersion, amount);\\n        _position.pre.closeTake(_latestVersion, amount);\\n\\n        emit TakeClosed(account, _latestVersion, amount);\\n    }\\n\\n    /**\\n     * @notice Opens a maker position for `msg.sender`\\n     * @param amount Amount of the position to open\\n     */\\n    function openMake(UFixed18 amount)\\n    external\\n    nonReentrant\\n    notPausedProduct(IProduct(this))\\n    settleForAccount(msg.sender)\\n    nonZeroVersionInvariant\\n    makerInvariant\\n    positionInvariant\\n    liquidationInvariant\\n    maintenanceInvariant\\n    {\\n        uint256 _latestVersion = latestVersion();\\n\\n        _positions[msg.sender].pre.openMake(_latestVersion, amount);\\n        _position.pre.openMake(_latestVersion, amount);\\n\\n        emit MakeOpened(msg.sender, _latestVersion, amount);\\n    }\\n\\n    /**\\n     * @notice Closes a maker position for `msg.sender`\\n     * @param amount Amount of the position to close\\n     */\\n    function closeMake(UFixed18 amount)\\n    external\\n    nonReentrant\\n    notPausedProduct(IProduct(this))\\n    settleForAccount(msg.sender)\\n    takerInvariant\\n    closeInvariant\\n    liquidationInvariant\\n    {\\n        closeMakeInternal(msg.sender, amount);\\n    }\\n\\n    function closeMakeInternal(address account, UFixed18 amount) internal {\\n        uint256 _latestVersion = latestVersion();\\n\\n        _positions[account].pre.closeMake(_latestVersion, amount);\\n        _position.pre.closeMake(_latestVersion, amount);\\n\\n        emit MakeClosed(account, _latestVersion, amount);\\n    }\\n\\n    /**\\n     * @notice Closes all open and pending positions, locking for liquidation\\n     * @dev Only callable by the Collateral contract as part of the liquidation flow\\n     * @param account Account to close out\\n     */\\n    function closeAll(address account) external onlyCollateral settleForAccount(account) {\\n        AccountPosition storage accountPosition = _positions[account];\\n        Position memory p = accountPosition.position.next(_positions[account].pre);\\n\\n        // Close all positions\\n        closeMakeInternal(account, p.maker);\\n        closeTakeInternal(account, p.taker);\\n\\n        // Mark liquidation to lock position\\n        accountPosition.liquidation = true;\\n    }\\n\\n    /**\\n     * @notice Returns the maintenance requirement for `account`\\n     * @param account Account to return for\\n     * @return The current maintenance requirement\\n     */\\n    function maintenance(address account) external view returns (UFixed18) {\\n        return _positions[account].maintenance(productProvider);\\n    }\\n\\n    /**\\n     * @notice Returns the maintenance requirement for `account` after next settlement\\n     * @dev Assumes no price change and no funding, used to protect user from over-opening\\n     * @param account Account to return for\\n     * @return The next maintenance requirement\\n     */\\n    function maintenanceNext(address account) external view returns (UFixed18) {\\n        return _positions[account].maintenanceNext(productProvider);\\n    }\\n\\n    /**\\n     * @notice Returns whether `account` has a completely zero'd position\\n     * @param account Account to return for\\n     * @return The the account is closed\\n     */\\n    function isClosed(address account) external view returns (bool) {\\n        return _positions[account].isClosed();\\n    }\\n\\n    /**\\n     * @notice Returns whether `account` is currently locked for an in-progress liquidation\\n     * @param account Account to return for\\n     * @return Whether the account is in liquidation\\n     */\\n    function isLiquidating(address account) external view returns (bool) {\\n        return _positions[account].liquidation;\\n    }\\n\\n    /**\\n     * @notice Returns `account`'s current position\\n     * @param account Account to return for\\n     * @return Current position of the account\\n     */\\n    function position(address account) external view returns (Position memory) {\\n        return _positions[account].position;\\n    }\\n\\n    /**\\n     * @notice Returns `account`'s current pending-settlement position\\n     * @param account Account to return for\\n     * @return Current pre-position of the account\\n     */\\n    function pre(address account) external view returns (PrePosition memory) {\\n        return _positions[account].pre;\\n    }\\n\\n    /**\\n     * @notice Returns the global latest settled oracle version\\n     * @return Latest settled oracle version of the product\\n     */\\n    function latestVersion() public view returns (uint256) {\\n        return _accumulator.latestVersion;\\n    }\\n\\n    /**\\n     * @notice Returns the global position at oracleVersion `oracleVersion`\\n     * @dev Only valid for the version at which a global settlement occurred\\n     * @param oracleVersion Oracle version to return for\\n     * @return Global position at oracle version\\n     */\\n    function positionAtVersion(uint256 oracleVersion) public view returns (Position memory) {\\n        return _position.positionAtVersion(oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Returns the current global pending-settlement position\\n     * @return Global pending-settlement position\\n     */\\n    function pre() external view returns (PrePosition memory) {\\n        return _position.pre;\\n    }\\n\\n    /**\\n     * @notice Returns the global accumulator value at oracleVersion `oracleVersion`\\n     * @dev Only valid for the version at which a global settlement occurred\\n     * @param oracleVersion Oracle version to return for\\n     * @return Global accumulator value at oracle version\\n     */\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory) {\\n        return _accumulator.valueAtVersion(oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Returns the global accumulator share at oracleVersion `oracleVersion`\\n     * @dev Only valid for the version at which a global settlement occurred\\n     * @param oracleVersion Oracle version to return for\\n     * @return Global accumulator share at oracle version\\n     */\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory) {\\n        return _accumulator.shareAtVersion(oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Returns `account`'s latest settled oracle version\\n     * @param account Account to return for\\n     * @return Latest settled oracle version of the account\\n     */\\n    function latestVersion(address account) public view returns (uint256) {\\n        return _accumulators[account].latestVersion;\\n    }\\n\\n    /// @dev Limit total maker for guarded rollouts\\n    modifier makerInvariant {\\n        _;\\n\\n        Position memory next = positionAtVersion(latestVersion()).next(_position.pre);\\n\\n        if (next.maker.gt(productProvider.makerLimit())) revert ProductMakerOverLimitError();\\n    }\\n\\n    /// @dev Limit maker short exposure to the range 0.0-1.0x of their position\\n    modifier takerInvariant {\\n        _;\\n\\n        Position memory next = positionAtVersion(latestVersion()).next(_position.pre);\\n        UFixed18 socializationFactor = next.socializationFactor();\\n\\n        if (socializationFactor.lt(UFixed18Lib.ONE)) revert ProductInsufficientLiquidityError(socializationFactor);\\n    }\\n\\n    /// @dev Ensure that the user has only taken a maker or taker position, but not both\\n    modifier positionInvariant {\\n        _;\\n\\n        if (_positions[msg.sender].isDoubleSided()) revert ProductDoubleSidedError();\\n    }\\n\\n    /// @dev Ensure that the user hasn't closed more than is open\\n    modifier closeInvariant {\\n        _;\\n\\n        if (_positions[msg.sender].isOverClosed()) revert ProductOverClosedError();\\n    }\\n\\n    /// @dev Ensure that the user will have sufficient margin for maintenance after next settlement\\n    modifier maintenanceInvariant {\\n        _;\\n\\n        if (controller().collateral().liquidatableNext(msg.sender, IProduct(this)))\\n            revert ProductInsufficientCollateralError();\\n    }\\n\\n    /// @dev Ensure that the user is not currently being liquidated\\n    modifier liquidationInvariant {\\n        if (_positions[msg.sender].liquidation) revert ProductInLiquidationError();\\n\\n        _;\\n    }\\n\\n    /// @dev Helper to fully settle an account's state\\n    modifier settleForAccount(address account) {\\n        IOracleProvider.OracleVersion memory currentVersion = settleInternal();\\n        settleAccountInternal(account, currentVersion);\\n\\n        _;\\n    }\\n\\n    /// @dev Ensure we have bootstraped the oracle before creating positions\\n    modifier nonZeroVersionInvariant {\\n        if (latestVersion() == 0) revert ProductOracleBootstrappingError();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc15f2d87bef54858807b2cbcdc067ba086989f6cdd2e93401fcf8aad8ba16400\",\"license\":\"Apache-2.0\"},\"contracts/product/types/accumulator/AccountAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"../../../interfaces/types/Accumulator.sol\\\";\\nimport \\\"../position/AccountPosition.sol\\\";\\nimport \\\"./VersionedAccumulator.sol\\\";\\n\\n/// @dev AccountAccumulator type\\nstruct AccountAccumulator {\\n    /// @dev latest version that the account was synced too\\n    uint256 latestVersion;\\n}\\nusing AccountAccumulatorLib for AccountAccumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that manages syncing an account-level accumulator.\\n */\\nlibrary AccountAccumulatorLib {\\n    /**\\n     * @notice Syncs the account to oracle version `versionTo`\\n     * @param self The struct to operate on\\n     * @param global Pointer to global accumulator\\n     * @param position Pointer to global position\\n     * @param versionTo Oracle version to sync account to\\n     * @return value The value accumulated sync last sync\\n     */\\n    function syncTo(\\n        AccountAccumulator storage self,\\n        VersionedAccumulator storage global,\\n        AccountPosition storage position,\\n        uint256 versionTo\\n    ) internal returns (Accumulator memory value) {\\n        Accumulator memory valueAccumulated = global.valueAtVersion(versionTo)\\n            .sub(global.valueAtVersion(self.latestVersion));\\n        value = position.position.mul(valueAccumulated);\\n        self.latestVersion = versionTo;\\n    }\\n}\\n\",\"keccak256\":\"0x61a17aae8c0067e830a5b7adcc777de7b2371c3522e989434b41ea3bd43bee54\",\"license\":\"Apache-2.0\"},\"contracts/product/types/accumulator/VersionedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"../../../interfaces/types/Accumulator.sol\\\";\\nimport \\\"../../../interfaces/types/ProductProvider.sol\\\";\\nimport \\\"../position/VersionedPosition.sol\\\";\\n\\n/// @dev VersionedAccumulator type\\nstruct VersionedAccumulator {\\n    /// @dev Latest synced oracle version\\n    uint256 latestVersion;\\n\\n    /// @dev Mapping of accumulator value at each settled oracle version\\n    mapping(uint256 => PackedAccumulator) _valueAtVersion;\\n\\n    /// @dev Mapping of accumulator share at each settled oracle version\\n    mapping(uint256 => PackedAccumulator) _shareAtVersion;\\n}\\nusing VersionedAccumulatorLib for VersionedAccumulator global;\\n\\n/**\\n * @title VersionedAccumulatorLib\\n * @notice Library that manages global versioned accumulator state.\\n * @dev Manages two accumulators: value and share. The value accumulator measures the change in position value\\n *      over time. The share accumulator measures the change in liquidity ownership over time (for tracking\\n *      incentivization rewards).\\n *\\n *      Both accumulators are stamped for historical lookup anytime there is a global settlement, which services\\n *      the delayed-position accounting. It is not guaranteed that every version will have a value stamped, but\\n *      only versions when a settlement occurred are needed for this historical computation.\\n */\\nlibrary VersionedAccumulatorLib {\\n    using ProductProviderLib for IProductProvider;\\n\\n    /**\\n     * @notice Returns the stamped value accumulator at `oracleVersion`\\n     * @param self The struct to operate on\\n     * @param oracleVersion The oracle version to retrieve the value at\\n     * @return The stamped value accumulator at the requested version\\n     */\\n    function valueAtVersion(VersionedAccumulator storage self, uint256 oracleVersion) internal view returns (Accumulator memory) {\\n        return self._valueAtVersion[oracleVersion].unpack();\\n    }\\n\\n    /**\\n     * @notice Returns the stamped share accumulator at `oracleVersion`\\n     * @param self The struct to operate on\\n     * @param oracleVersion The oracle version to retrieve the share at\\n     * @return The stamped share accumulator at the requested version\\n     */\\n    function shareAtVersion(VersionedAccumulator storage self, uint256 oracleVersion) internal view returns (Accumulator memory) {\\n        return self._shareAtVersion[oracleVersion].unpack();\\n    }\\n\\n    /**\\n     * @notice Globally accumulates all value (position + funding) and share since last oracle update\\n     * @param self The struct to operate on\\n     * @param controller The Controller contract of the protocol\\n     * @param provider The parameter provider of the product\\n     * @param position Pointer to global position\\n     * @param latestOracleVersion The oracle version to accumulate from\\n     * @param toOracleVersion The oracle version to accumulate to\\n     * @return accumulatedFee The total fee accrued from accumulation\\n     */\\n    function accumulate(\\n        VersionedAccumulator storage self,\\n        IController controller,\\n        IProductProvider provider,\\n        VersionedPosition storage position,\\n        IOracleProvider.OracleVersion memory latestOracleVersion,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal returns (UFixed18 accumulatedFee) {\\n        Position memory latestPosition = position.positionAtVersion(latestOracleVersion.version);\\n\\n        // accumulate funding\\n        Accumulator memory accumulatedPosition;\\n        (accumulatedPosition, accumulatedFee) =\\n            _accumulateFunding(controller, provider, latestPosition, latestOracleVersion, toOracleVersion);\\n\\n        // accumulate position\\n        accumulatedPosition = accumulatedPosition.add(\\n            _accumulatePosition(latestPosition, latestOracleVersion, toOracleVersion));\\n\\n        // accumulate share\\n        Accumulator memory accumulatedShare =\\n            _accumulateShare(latestPosition, latestOracleVersion, toOracleVersion);\\n\\n        // save update\\n        self._valueAtVersion[toOracleVersion.version] = valueAtVersion(self, latestOracleVersion.version)\\n            .add(accumulatedPosition)\\n            .pack();\\n        self._shareAtVersion[toOracleVersion.version] = shareAtVersion(self, latestOracleVersion.version)\\n            .add(accumulatedShare)\\n            .pack();\\n        self.latestVersion = toOracleVersion.version;\\n    }\\n\\n    /**\\n     * @notice Globally accumulates all funding since last oracle update\\n     * @dev If an oracle version is skipped due to no pre positions, funding will continue to be\\n     *      pegged to the price of the last snapshotted oracleVersion until a new one is accumulated.\\n     *      This is an acceptable approximation.\\n     * @param controller The Controller contract of the protocol\\n     * @param provider The parameter provider of the product\\n     * @param latestPosition The latest global position\\n     * @param latestOracleVersion The oracle version to accumulate from\\n     * @param toOracleVersion The oracle version to accumulate to\\n     * @return accumulatedFunding The total amount accumulated from funding\\n     * @return accumulatedFee The total fee accrued from funding accumulation\\n     */\\n    function _accumulateFunding(\\n        IController controller,\\n        IProductProvider provider,\\n        Position memory latestPosition,\\n        IOracleProvider.OracleVersion memory latestOracleVersion,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) private view returns (Accumulator memory accumulatedFunding, UFixed18 accumulatedFee) {\\n        if (latestPosition.taker.isZero()) return (Accumulator(Fixed18Lib.ZERO, Fixed18Lib.ZERO), UFixed18Lib.ZERO);\\n        if (latestPosition.maker.isZero()) return (Accumulator(Fixed18Lib.ZERO, Fixed18Lib.ZERO), UFixed18Lib.ZERO);\\n\\n        uint256 elapsed = toOracleVersion.timestamp - latestOracleVersion.timestamp;\\n\\n        UFixed18 takerNotional = Fixed18Lib.from(latestPosition.taker).mul(latestOracleVersion.price).abs();\\n        UFixed18 socializedNotional = takerNotional.mul(latestPosition.socializationFactor());\\n\\n        Fixed18 rateAccumulated = provider.rate(latestPosition).mul(Fixed18Lib.from(UFixed18Lib.from(elapsed)));\\n        Fixed18 fundingAccumulated = rateAccumulated.mul(Fixed18Lib.from(socializedNotional));\\n        accumulatedFee = fundingAccumulated.abs().mul(provider.safeFundingFee(controller));\\n\\n        Fixed18 fundingIncludingFee = Fixed18Lib.from(\\n            fundingAccumulated.sign(),\\n            fundingAccumulated.abs().sub(accumulatedFee)\\n        );\\n\\n        accumulatedFunding.maker = fundingIncludingFee.div(Fixed18Lib.from(latestPosition.maker));\\n        accumulatedFunding.taker = fundingIncludingFee.div(Fixed18Lib.from(latestPosition.taker)).mul(Fixed18Lib.NEG_ONE);\\n    }\\n\\n    /**\\n     * @notice Globally accumulates position PNL since last oracle update\\n     * @param latestPosition The latest global position\\n     * @param latestOracleVersion The oracle version to accumulate from\\n     * @param toOracleVersion The oracle version to accumulate to\\n     * @return accumulatedPosition The total amount accumulated from position PNL\\n     */\\n    function _accumulatePosition(\\n        Position memory latestPosition,\\n        IOracleProvider.OracleVersion memory latestOracleVersion,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) private pure returns (Accumulator memory accumulatedPosition) {\\n        if (latestPosition.taker.isZero()) return Accumulator(Fixed18Lib.ZERO, Fixed18Lib.ZERO);\\n        if (latestPosition.maker.isZero()) return Accumulator(Fixed18Lib.ZERO, Fixed18Lib.ZERO);\\n\\n        Fixed18 oracleDelta = toOracleVersion.price.sub(latestOracleVersion.price);\\n        Fixed18 totalTakerDelta = oracleDelta.mul(Fixed18Lib.from(latestPosition.taker));\\n        Fixed18 socializedTakerDelta = totalTakerDelta.mul(Fixed18Lib.from(latestPosition.socializationFactor()));\\n\\n        accumulatedPosition.maker = socializedTakerDelta.div(Fixed18Lib.from(latestPosition.maker)).mul(Fixed18Lib.NEG_ONE);\\n        accumulatedPosition.taker = socializedTakerDelta.div(Fixed18Lib.from(latestPosition.taker));\\n    }\\n\\n    /**\\n     * @notice Globally accumulates position's share of the total market since last oracle update\\n     * @dev This is used to compute incentivization rewards based on market participation\\n     * @param latestPosition The latest global position\\n     * @param latestOracleVersion The oracle version to accumulate from\\n     * @param toOracleVersion The oracle version to accumulate to\\n     * @return accumulatedShare The total share amount accumulated per position\\n     */\\n    function _accumulateShare(\\n        Position memory latestPosition,\\n        IOracleProvider.OracleVersion memory latestOracleVersion,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) private pure returns (Accumulator memory accumulatedShare) {\\n        uint256 elapsed = toOracleVersion.timestamp - latestOracleVersion.timestamp;\\n\\n        accumulatedShare.maker = latestPosition.maker.isZero() ?\\n            Fixed18Lib.ZERO :\\n            Fixed18Lib.from(UFixed18Lib.from(elapsed).div(latestPosition.maker));\\n        accumulatedShare.taker = latestPosition.taker.isZero() ?\\n            Fixed18Lib.ZERO :\\n            Fixed18Lib.from(UFixed18Lib.from(elapsed).div(latestPosition.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x84a761ad67a3bb7d5674e01e8134789a72261b344ec30e5131ffe4ea663e0dcb\",\"license\":\"Apache-2.0\"},\"contracts/product/types/position/AccountPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"../../../interfaces/types/PrePosition.sol\\\";\\n\\n/// @dev AccountPosition type\\nstruct AccountPosition {\\n    /// @dev The current settled position of the account\\n    Position position;\\n\\n    /// @dev The current position delta pending-settlement\\n    PrePosition pre;\\n\\n    /// @dev Whether the account is currently locked for liquidation\\n    bool liquidation;\\n}\\nusing AccountPositionLib for AccountPosition global;\\n\\n/**\\n * @title AccountPositionLib\\n * @notice Library that manages an account-level position.\\n */\\nlibrary AccountPositionLib {\\n    /**\\n     * @notice Settled the account's position to oracle version `toOracleVersion`\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @param toOracleVersion The oracle version to accumulate to\\n     * @return positionFee The fee accrued from opening or closing a new position\\n     */\\n    function settle(\\n        AccountPosition storage self,\\n        IProductProvider provider,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal returns (UFixed18 positionFee) {\\n        bool settled;\\n        (self.position, positionFee, settled) = self.position.settled(self.pre, provider, toOracleVersion);\\n        if (settled) {\\n            delete self.pre;\\n            self.liquidation = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the current maintenance requirement for the account\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @return Current maintenance requirement for the account\\n     */\\n    function maintenance(AccountPosition storage self, IProductProvider provider) internal view returns (UFixed18) {\\n        if (self.liquidation) return UFixed18Lib.ZERO;\\n        return _maintenance(self.position, provider);\\n    }\\n\\n    /**\\n     * @notice Returns the maintenance requirement after the next oracle version settlement\\n     * @dev Includes the current pending-settlement position delta, assumes no price change\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @return Next maintenance requirement for the account\\n     */\\n    function maintenanceNext(AccountPosition storage self, IProductProvider provider) internal view returns (UFixed18) {\\n        return _maintenance(self.position.next(self.pre), provider);\\n    }\\n\\n    /**\\n     * @notice Returns the maintenance requirement for a given `position`\\n     * @dev Internal helper\\n     * @param position The position to compete the maintenance requirement for\\n     * @param provider The parameter provider of the product\\n     * @return Next maintenance requirement for the account\\n     */\\n    function _maintenance(Position memory position, IProductProvider provider) private view returns (UFixed18) {\\n        Fixed18 oraclePrice = provider.currentVersion().price;\\n        UFixed18 notionalMax = Fixed18Lib.from(position.max()).mul(oraclePrice).abs();\\n        return notionalMax.mul(provider.maintenance());\\n    }\\n\\n    /**\\n     * @notice Returns whether an account is completely closed, i.e. no position or pre-position\\n     * @param self The struct to operate on\\n     * @return Whether the account is closed\\n     */\\n    function isClosed(AccountPosition memory self) internal pure returns (bool) {\\n        return self.pre.isEmpty() && self.position.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Returns whether an account has opened position on both sides of the market (maker vs taker)\\n     * @dev Used to verify the invariant that a single account can only have a position on one side of the\\n     *      market at a time\\n     * @param self The struct to operate on\\n     * @return Whether the account is currently doubled sided\\n     */\\n    function isDoubleSided(AccountPosition storage self) internal view returns (bool) {\\n        bool makerEmpty = self.position.maker.isZero() && self.pre.openPosition.maker.isZero() && self.pre.closePosition.maker.isZero();\\n        bool takerEmpty = self.position.taker.isZero() && self.pre.openPosition.taker.isZero() && self.pre.closePosition.taker.isZero();\\n\\n        return !makerEmpty && !takerEmpty;\\n    }\\n\\n    /**\\n     * @notice Returns whether the account's pending-settlement delta closes more position than is open\\n     * @dev Used to verify the invariant that an account cannot settle into having a negative position\\n     * @param self The struct to operate on\\n     * @return Whether the account is currently over closed\\n     */\\n    function isOverClosed(AccountPosition storage self) internal view returns (bool) {\\n        Position memory nextOpen = self.position.add(self.pre.openPosition);\\n\\n        return  self.pre.closePosition.maker.gt(nextOpen.maker) || self.pre.closePosition.taker.gt(nextOpen.taker);\\n    }\\n}\\n\",\"keccak256\":\"0xc279fc145e5f7fa635bd79eda4d77a8da9bd2f710490274cbf1a90c4dddfd65d\",\"license\":\"Apache-2.0\"},\"contracts/product/types/position/VersionedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.14;\\n\\nimport \\\"../../../interfaces/types/PrePosition.sol\\\";\\nimport \\\"../../../interfaces/types/PackedPosition.sol\\\";\\n\\n//// @dev VersionedPosition type\\nstruct VersionedPosition {\\n    /// @dev Mapping of global position at each version\\n    mapping(uint256 => PackedPosition) _positionAtVersion;\\n\\n    /// @dev Current global pending-settlement position delta\\n    PrePosition pre;\\n}\\nusing VersionedPositionLib for VersionedPosition global;\\n\\n/**\\n * @title VersionedPositionLib\\n * @notice Library that manages global position state.\\n * @dev Global position state is used to compute utilization rate and socialization, and to account for and\\n *      distribute fees globally.\\n *\\n *      Positions are stamped for historical lookup anytime there is a global settlement, which services\\n *      the delayed-position accounting. It is not guaranteed that every version will have a value stamped, but\\n *      only versions when a settlement occurred are needed for this historical computation.\\n */\\nlibrary VersionedPositionLib {\\n    /**\\n     * @notice Returns the current global position\\n     * @return Current global position\\n     */\\n    function positionAtVersion(VersionedPosition storage self, uint256 oracleVersion) internal view returns (Position memory) {\\n        return self._positionAtVersion[oracleVersion].unpack();\\n    }\\n\\n    /**\\n     * @notice Settled the global position to oracle version `toOracleVersion`\\n     * @param self The struct to operate on\\n     * @param provider The parameter provider of the product\\n     * @param latestVersion The latest settled oracle version\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return positionFee The fee accrued from opening or closing a new position\\n     */\\n    function settle(\\n        VersionedPosition storage self,\\n        IProductProvider provider,\\n        uint256 latestVersion,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal returns (UFixed18) {\\n        (Position memory newPosition, UFixed18 positionFee, bool settled) =\\n            positionAtVersion(self, latestVersion).settled(self.pre, provider, toOracleVersion);\\n\\n        self._positionAtVersion[toOracleVersion.version] = newPosition.pack();\\n        if (settled) delete self.pre;\\n\\n        return positionFee;\\n    }\\n}\\n\",\"keccak256\":\"0x49918f100875633b45fcc01f6d368a884cc59a9c3c7e71d32c7271d929c06896\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e6880620000216000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806391689024116100d8578063c07f47d41161008c578063f667f89711610066578063f667f89714610457578063f6b3200814610473578063f77c47911461048f57610182565b8063c07f47d414610401578063c4d66de81461041f578063d7d7d6b81461043b57610182565b80639d8870a7116100bd5780639d8870a714610383578063ab582f29146103a1578063b7648fb9146103d157610182565b806391689024146103235780639a427d031461035357610182565b806359218fe91161013a57806373b88f3b1161011457806373b88f3b146102bb57806376f37001146102d75780638e480b20146102f357610182565b806359218fe91461025157806359ea287d1461026d5780636943b0171461028b57610182565b806320fe9c3c1161016b57806320fe9c3c146101c1578063476fa96d146101f157806358ca6f981461022157610182565b806311da60b4146101875780631e0c6fb914610191575b600080fd5b61018f6104ad565b005b6101ab60048036038101906101a69190615138565b61063c565b6040516101b8919061522a565b60405180910390f35b6101db60048036038101906101d69190615271565b6106f2565b6040516101e89190615308565b60405180910390f35b61020b60048036038101906102069190615271565b610715565b6040516102189190615308565b60405180910390f35b61023b60048036038101906102369190615138565b610738565b604051610248919061533e565b60405180910390f35b61026b60048036038101906102669190615385565b610791565b005b610275610b3b565b604051610282919061522a565b60405180910390f35b6102a560048036038101906102a09190615138565b610bb2565b6040516102b2919061533e565b60405180910390f35b6102d560048036038101906102d09190615385565b610cbe565b005b6102f160048036038101906102ec9190615385565b611252565b005b61030d60048036038101906103089190615138565b611501565b60405161031a91906153c1565b60405180910390f35b61033d60048036038101906103389190615138565b61154d565b60405161034a91906153eb565b60405180910390f35b61036d60048036038101906103689190615271565b6115c7565b60405161037a9190615435565b60405180910390f35b61038b6115ea565b60405161039891906154a5565b60405180910390f35b6103bb60048036038101906103b69190615138565b61160e565b6040516103c891906153eb565b60405180910390f35b6103eb60048036038101906103e69190615138565b611688565b6040516103f89190615435565b60405180910390f35b6104096116f8565b60405161041691906153c1565b60405180910390f35b610439600480360381019061043491906154fe565b611705565b005b61045560048036038101906104509190615385565b61189d565b005b610471600480360381019061046c9190615138565b611ee3565b005b61048d60048036038101906104889190615138565b612081565b005b6104976122d4565b6040516104a4919061554c565b60405180910390f35b60026104d87f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b0361050f576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61054360027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b3061054c6122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016105849190615588565b602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c591906155cf565b156105fc576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610604612316565b505061063a60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b565b610644614feb565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160405180606001604052908160008201548152602001600182016040518060400160405290816000820154815260200160018201548152505081526020016003820160405180604001604052908160008201548152602001600182015481525050815250509050919050565b6106fa615018565b61070e8260096127c890919063ffffffff16565b9050919050565b61071d615018565b61073182600961283a90919063ffffffff16565b9050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff169050919050565b60026107bc7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b036107f3576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082760027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b306108306122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016108689190615588565b602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a991906155cf565b156108e0576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360006108eb612316565b90506108f782826128ac565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161561097e576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109883385612ebe565b6109cf600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f8e565b15610a06576040517f3975ab9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a9360026001016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050610a85610a806116f8565b6115c7565b61303e90919063ffffffff16565b90506000610aa082613069565b9050610abd670de0b6b3a7640000826130be90919063ffffffff16565b15610aff57806040517fd8b8b951000000000000000000000000000000000000000000000000000000008152600401610af691906153eb565b60405180910390fd5b5050505050610b3860017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b610b43614feb565b60026001016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050905090565b6000610cb7600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160405180604001604052908160008201548152602001600182015481525050815260200160028201604051806060016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815260200160038201604051806040016040529081600082015481526020016001820154815250508152505081526020016007820160009054906101000a900460ff1615151515815250506130d4565b9050919050565b6002610ce97f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b03610d20576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5460027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b30610d5d6122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b8152600401610d959190615588565b602060405180830381865afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd691906155cf565b15610e0d576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000610e18612316565b9050610e2482826128ac565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1615610eab576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610eb56116f8565b9050610f0d8186600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016130ff9092919063ffffffff16565b610f26818660026001016130ff9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fb9726781b72c53f23217f424d70445b222951f008aeac7eece8139caed71ed2d8287604051610f6e9291906155fc565b60405180910390a250610f7f6122d4565b73ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190615663565b73ffffffffffffffffffffffffffffffffffffffff1663e411918033306040518363ffffffff1660e01b815260040161102792919061569f565b602060405180830381865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106891906155cf565b1561109f576040517f24a21d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110e6600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061313b565b1561111d576040517f90898fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006111aa6002600101604051806060016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815260200160038201604051806040016040529081600082015481526020016001820154815250508152505061119c6111976116f8565b6115c7565b61303e90919063ffffffff16565b905060006111b782613069565b90506111d4670de0b6b3a7640000826130be90919063ffffffff16565b1561121657806040517fd8b8b95100000000000000000000000000000000000000000000000000000000815260040161120d91906153eb565b60405180910390fd5b505050505061124f60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b600261127d7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b036112b4576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112e860027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b306112f16122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016113299190615588565b602060405180830381865afa158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a91906155cf565b156113a1576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360006113ac612316565b90506113b882826128ac565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161561143f576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61144933856131e5565b611490600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f8e565b156114c7576040517f3975ab9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050506114fe60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60006115c060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206132b590919063ffffffff16565b9050919050565b6115cf615032565b6115e382600261330c90919063ffffffff16565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206133d890919063ffffffff16565b9050919050565b611690615032565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001604051806040016040529081600082015481526020016001820154815250509050919050565b6000600960000154905090565b600160008103611741576040517fb66146bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061176b7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b612304565b106117ad57806040517f1e7a9d950000000000000000000000000000000000000000000000000000000081526004016117a491906153c1565b60405180910390fd5b6117e0817f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b61230f90919063ffffffff16565b61181460017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c61348890919063ffffffff16565b61181d3361348f565b611825613576565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061189960007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c61348890919063ffffffff16565b5050565b60026118c87f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b036118ff576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61193360027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b3061193c6122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016119749190615588565b602060405180830381865afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b591906155cf565b156119ec576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360006119f7612316565b9050611a0382826128ac565b6000611a0d6116f8565b03611a44576040517fc25d67ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1615611acb576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611ad56116f8565b9050611b2d8186600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161361e9092919063ffffffff16565b611b468186600260010161361e9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167ff98b31465ac12e92b5cb136ade913276c267463c4395bb1a3999bc88fb8378068287604051611b8e9291906155fc565b60405180910390a250611b9f6122d4565b73ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d9190615663565b73ffffffffffffffffffffffffffffffffffffffff1663e411918033306040518363ffffffff1660e01b8152600401611c4792919061569f565b602060405180830381865afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8891906155cf565b15611cbf576040517f24a21d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d06600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061313b565b15611d3d576040517f90898fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611dca60026001016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050611dbc611db76116f8565b6115c7565b61303e90919063ffffffff16565b9050611e7160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663193775676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e91906156dd565b826000015161365a90919063ffffffff16565b15611ea8576040517fcefd0e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050611ee060017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b6002611f0e7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b03611f45576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f7960027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b30611f826122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b8152600401611fba9190615588565b602060405180830381865afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb91906155cf565b15612032576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061203c612316565b905061204883826128ac565b505061207e60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b6120896122d4565b73ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f79190615663565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461215b576040517f40cbe9b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000612166612316565b905061217282826128ac565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000612292600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050836000016040518060400160405290816000820154815260200160018201548152505061303e90919063ffffffff16565b90506122a2858260000151612ebe565b6122b08582602001516131e5565b60018260070160006101000a81548160ff0219169083151502179055505050505050565b60006122ff7f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea60533613671565b905090565b600081549050919050565b8082555050565b61231e61504c565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661234a6122d4565b915091508173ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af115801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf9190615840565b925060006123cb6116f8565b9050836000015181036123e0575050506127c5565b60008373ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b815260040161241b91906153c1565b606060405180830381865afa158015612438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245c9190615840565b9050600061247b8660000151600260010161367c90919063ffffffff16565b9050600086600001518214612509578573ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b81526004016124c391906153c1565b606060405180830381865afa1580156124e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125049190615840565b61250b565b865b90508473ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257c91906158ab565b73ffffffffffffffffffffffffffffffffffffffff1663a55ff01d886040518263ffffffff1660e01b81526004016125b4919061591a565b600060405180830381600087803b1580156125ce57600080fd5b505af11580156125e2573d6000803e3d6000fd5b50505050600061261761260887896002888760096136ab9095949392919063ffffffff16565b826138bc90919063ffffffff16565b905061264361263488878560026138d2909392919063ffffffff16565b826138bc90919063ffffffff16565b905087600001518260000151146126a35761268361267487896002868d60096136ab9095949392919063ffffffff16565b826138bc90919063ffffffff16565b90506126a18783600001518a60026138d2909392919063ffffffff16565b505b8573ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127129190615663565b73ffffffffffffffffffffffffffffffffffffffff16637f3dd53b826040518263ffffffff1660e01b815260040161274a91906153eb565b600060405180830381600087803b15801561276457600080fd5b505af1158015612778573d6000803e3d6000fd5b505050507f88a84ea6dd274b386afd27dbbe11b6192b25017f5e60bb8c4053dfddb45c294d826000015189600001516040516127b5929190615935565b60405180910390a1505050505050505b90565b6127d0615018565b6128328360010160008481526020019081526020016000206040518060400160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a9004600f0b600f0b600f0b81525050613a5b565b905092915050565b612842615018565b6128a48360020160008481526020019081526020016000206040518060400160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a9004600f0b600f0b600f0b81525050613a5b565b905092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166128d86122d4565b9150915082600001516128ea85611501565b036128f6575050612eba565b60006129508460000151600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161367c90919063ffffffff16565b90506000846000015182146129de578373ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b815260040161299891906153c1565b606060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190615840565b6129e0565b845b905060008373ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5391906158ab565b73ffffffffffffffffffffffffffffffffffffffff16631830349c88846040518363ffffffff1660e01b8152600401612a8d92919061595e565b600060405180830381600087803b158015612aa757600080fd5b505af1158015612abb573d6000803e3d6000fd5b50505050612b71612b62612b5d6009600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208660000151600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613a9d909392919063ffffffff16565b613b2d565b82613b5190919063ffffffff16565b9050612be0612bd1612bcc8785600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613b679092919063ffffffff16565b613c9d565b82613d1090919063ffffffff16565b90508560000151826000015114612d81578373ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6091906158ab565b73ffffffffffffffffffffffffffffffffffffffff16631830349c88886040518363ffffffff1660e01b8152600401612c9a92919061595e565b600060405180830381600087803b158015612cb457600080fd5b505af1158015612cc8573d6000803e3d6000fd5b50505050612d7e612d6f612d6a6009600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a60000151600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613a9d909392919063ffffffff16565b613b2d565b82613b5190919063ffffffff16565b90505b8373ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df09190615663565b73ffffffffffffffffffffffffffffffffffffffff1663c9cb48de88836040518363ffffffff1660e01b8152600401612e2a929190615996565b600060405180830381600087803b158015612e4457600080fd5b505af1158015612e58573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f9d7055d24918d8c2fd08660a27bf31d4086fa71a51cd07874276470223aa480f83600001518860000151604051612eac929190615935565b60405180910390a250505050505b5050565b6000612ec86116f8565b9050612f208183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201613d269092919063ffffffff16565b612f3981836002600101613d269092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f39854479080fac0b5e7c0ecedb0fb02308a72a43cd102c6b9f918653d34003678284604051612f819291906155fc565b60405180910390a2505050565b600080612feb83600201600101604051806040016040529081600082015481526020016001820154815250508460000160405180604001604052908160008201548152602001600182015481525050613d6290919063ffffffff16565b905061300e8160000151846002016003016000015461365a90919063ffffffff16565b8061303657506130358160200151846002016003016001015461365a90919063ffffffff16565b5b915050919050565b613046615032565b613061613057848460200151613d62565b8360400151613dbb565b905092915050565b60006130788260200151613e14565b6130ad576130a8670de0b6b3a76400006130a384602001518560000151613e2090919063ffffffff16565b613e49565b6130b7565b670de0b6b3a76400005b9050919050565b6000806130cb8484613e5d565b14905092915050565b60006130e38260200151613e9b565b80156130f857506130f78260000151613ec6565b5b9050919050565b6131198184600101600101546138bc90919063ffffffff16565b836001016001018190555081836000018190555061313683613ef1565b505050565b60008061314e8360000160000154613e14565b801561316957506131688360020160010160000154613e14565b5b801561318457506131838360020160030160000154613e14565b5b905060006131988460000160010154613e14565b80156131b357506131b28460020160010160010154613e14565b5b80156131ce57506131cd8460020160030160010154613e14565b5b9050811580156131dc575080155b92505050919050565b60006131ef6116f8565b90506132478183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201613f929092919063ffffffff16565b61326081836002600101613f929092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f63625b85818a29587ee919ee6a968ee0b32f3513f2884b3968001062ba49eb6b82846040516132a89291906155fc565b60405180910390a2505050565b60008260070160009054906101000a900460ff16156132d75760009050613306565b613303836000016040518060400160405290816000820154815260200160018201548152505083613fce565b90505b92915050565b613314615032565b6133d08360000160008481526020019081526020016000206040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050614100565b905092915050565b600061348061347a846002016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050856000016040518060400160405290816000820154815260200160018201548152505061303e90919063ffffffff16565b83613fce565b905092915050565b8082555050565b613497614160565b1580156134ca57506134c87fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c614171565b155b15613501576040517f689f12a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61350a8161417c565b613540576040517f14878b6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613573817f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea6053361419f90919063ffffffff16565b50565b61357e614160565b1580156135b157506135af7fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c614171565b155b156135e8576040517f689f12a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61361c60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b565b6136388184600101600001546138bc90919063ffffffff16565b8360010160000181905550818360000181905550613655836141a6565b505050565b600060026136688484613e5d565b14905092915050565b600081549050919050565b60008083600001549050600081146136a05760018161369b91906159ee565b6136a2565b825b91505092915050565b6000806136c584600001518661330c90919063ffffffff16565b90506136cf615018565b6136dc8888848888614247565b80945081925050506137016136f28387876144f9565b8261466a90919063ffffffff16565b905060006137108387876146c3565b905061373a613735836137278d8a600001516127c8565b61466a90919063ffffffff16565b61477d565b8a60010160008760000151815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff1602179055509050506138026137fd826137ef8d8a6000015161283a565b61466a90919063ffffffff16565b61477d565b8a60020160008760000151815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555090505084600001518a600001819055505050509695505050505050565b600081836138ca91906159ee565b905092915050565b60008060008061396088600101604051806060016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815260200160038201604051806040016040529081600082015481526020016001820154815250508152505088876139508c8b61330c565b6147bf909392919063ffffffff16565b92509250925061396f8361481c565b8860000160008760000151815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050508015613a4d57876001016000808201600090556001820160008082016000905560018201600090555050600382016000808201600090556001820160009055505050505b819350505050949350505050565b613a63615018565b6040518060400160405280613a7e8460000151600f0b61487c565b8152602001613a938460200151600f0b61487c565b8152509050919050565b613aa5615018565b6000613ae2613ac18760000154876127c890919063ffffffff16565b613ad485886127c890919063ffffffff16565b61488990919063ffffffff16565b9050613b198185600001604051806040016040529081600082015481526020016001820154815250506148e290919063ffffffff16565b915082866000018190555050949350505050565b6000613b4a82602001518360000151613b5190919063ffffffff16565b9050919050565b60008183613b5f9190615a44565b905092915050565b600080613c0b856002016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050858588600001604051806040016040529081600082015481526020016001820154815250506147bf909392919063ffffffff16565b87600001600082955083965084919050600082015181600001556020820151816001015550505050508015613c95578460020160008082016000905560018201600080820160009055600182016000905550506003820160008082016000905560018201600090555050505060008560070160006101000a81548160ff0219169083151502179055505b509392505050565b6000808290507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613d0757806040517ea07eb5000000000000000000000000000000000000000000000000000000008152600401613cfe91906153c1565b60405180910390fd5b80915050919050565b60008183613d1e9190615ad8565b905092915050565b613d408184600301600001546138bc90919063ffffffff16565b8360030160000181905550818360000181905550613d5d836141a6565b505050565b613d6a615032565b6040518060400160405280613d90846000015186600001516138bc90919063ffffffff16565b8152602001613db0846020015186602001516138bc90919063ffffffff16565b815250905092915050565b613dc3615032565b6040518060400160405280613de98460000151866000015161494b90919063ffffffff16565b8152602001613e098460200151866020015161494b90919063ffffffff16565b815250905092915050565b60008082149050919050565b600081670de0b6b3a764000084613e379190615b6c565b613e419190615bf5565b905092915050565b6000613e558383614961565b905092915050565b600080600084849150915080821115613e7b57600292505050613e95565b80821015613e8e57600092505050613e95565b6001925050505b92915050565b6000613eaa8260200151613ec6565b8015613ebf5750613ebe8260400151613ec6565b5b9050919050565b6000613ed58260000151613e14565b8015613eea5750613ee98260200151613e14565b5b9050919050565b613f128160030160010154826001016001015461365a90919063ffffffff16565b15613f5557613f388160030160010154826001016001015461494b90919063ffffffff16565b816001016001018190555060008160030160010181905550613f8f565b613f768160010160010154826003016001015461494b90919063ffffffff16565b8160030160010181905550600081600101600101819055505b50565b613fac8184600301600101546138bc90919063ffffffff16565b8360030160010181905550818360000181905550613fc983613ef1565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa15801561401c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140409190615840565b604001519050600061407361406e8361406061405b8961497a565b613c9d565b61499590919063ffffffff16565b6149be565b90506140f68473ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e791906156dd565b826149d090919063ffffffff16565b9250505092915050565b614108615032565b604051806040016040528061413284600001516fffffffffffffffffffffffffffffffff166149f9565b815260200161415684602001516fffffffffffffffffffffffffffffffff166149f9565b8152509050919050565b600061416b3061417c565b15905090565b600081549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8082555050565b6141c78160030160000154826001016000015461365a90919063ffffffff16565b1561420a576141ed8160030160000154826001016000015461494b90919063ffffffff16565b816001016000018190555060008160030160000181905550614244565b61422b8160010160000154826003016000015461494b90919063ffffffff16565b8160030160000181905550600081600101600001819055505b50565b61424f615018565b600061425e8560200151613e14565b156142855760405180604001604052806000815260200160008152506000915091506144ef565b6142928560000151613e14565b156142b95760405180604001604052806000815260200160008152506000915091506144ef565b6000846020015184602001516142cf9190615c26565b905060006142fe6142f987604001516142eb8a60200151613c9d565b61499590919063ffffffff16565b6149be565b9050600061431d61430e89613069565b836149d090919063ffffffff16565b905060006143bd61433561433086614a15565b613c9d565b8b73ffffffffffffffffffffffffffffffffffffffff166360ec91d68c6040518263ffffffff1660e01b815260040161436e9190615435565b602060405180830381865afa15801561438b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143af9190615c5a565b61499590919063ffffffff16565b905060006143dc6143cd84613c9d565b8361499590919063ffffffff16565b905061442161440a8d8d73ffffffffffffffffffffffffffffffffffffffff16614a3290919063ffffffff16565b614413836149be565b6149d090919063ffffffff16565b9550600061445161443183614b45565b61444c8961443e866149be565b61494b90919063ffffffff16565b614b93565b90506144726144638c60000151613c9d565b82614bfc90919063ffffffff16565b8860000181815250506144df670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6144b29190615c87565b6144d16144c28e60200151613c9d565b84614bfc90919063ffffffff16565b61499590919063ffffffff16565b8860200181815250505050505050505b9550959350505050565b614501615018565b61450e8460200151613e14565b156145315760405180604001604052806000815260200160008152509050614663565b61453e8460000151613e14565b156145615760405180604001604052806000815260200160008152509050614663565b600061457e84604001518460400151613d1090919063ffffffff16565b905060006145a16145928760200151613c9d565b8361499590919063ffffffff16565b905060006145c86145b96145b489613069565b613c9d565b8361499590919063ffffffff16565b905061462e670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146019190615c87565b6146206146118a60000151613c9d565b84614bfc90919063ffffffff16565b61499590919063ffffffff16565b8460000181815250506146566146478860200151613c9d565b82614bfc90919063ffffffff16565b8460200181815250505050505b9392505050565b614672615018565b604051806040016040528061469884600001518660000151613b5190919063ffffffff16565b81526020016146b884602001518660200151613b5190919063ffffffff16565b815250905092915050565b6146cb615018565b6000836020015183602001516146e19190615c26565b90506146f08560000151613e14565b6147205761471b614716866000015161470884614a15565b613e2090919063ffffffff16565b613c9d565b614723565b60005b8260000181815250506147398560200151613e14565b6147695761476461475f866020015161475184614a15565b613e2090919063ffffffff16565b613c9d565b61476c565b60005b826020018181525050509392505050565b61478561506d565b604051806040016040528061479d8460000151614c25565b600f0b81526020016147b28460200151614c25565b600f0b8152509050919050565b6147c7615032565b6000806147dd8487614cf490919063ffffffff16565b6147ea578660008061480c565b6147f4878761303e565b614809868689614d1b9092919063ffffffff16565b60015b9250925092509450945094915050565b61482461508d565b604051806040016040528061483c8460000151614e17565b6fffffffffffffffffffffffffffffffff1681526020016148608460200151614e17565b6fffffffffffffffffffffffffffffffff168152509050919050565b600081600f0b9050919050565b614891615018565b60405180604001604052806148b784600001518660000151613d1090919063ffffffff16565b81526020016148d784602001518660200151613d1090919063ffffffff16565b815250905092915050565b6148ea615018565b6040518060400160405280614918846000015161490a8760000151613c9d565b61499590919063ffffffff16565b815260200161494084602001516149328760200151613c9d565b61499590919063ffffffff16565b815250905092915050565b600081836149599190615c26565b905092915050565b60008183106149705781614972565b825b905092915050565b600061498e82600001518360200151614e7d565b9050919050565b6000670de0b6b3a764000082846149ac9190615c87565b6149b69190615d9e565b905092915050565b60006149c982614e91565b9050919050565b6000670de0b6b3a764000082846149e79190615b6c565b6149f19190615bf5565b905092915050565b6000816fffffffffffffffffffffffffffffffff169050919050565b6000670de0b6b3a764000082614a2b9190615b6c565b9050919050565b6000614b3d670de0b6b3a7640000614b2f8473ffffffffffffffffffffffffffffffffffffffff1663e975c0c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab291906156dd565b8673ffffffffffffffffffffffffffffffffffffffff16635d16e1206040518163ffffffff1660e01b8152600401602060405180830381865afa158015614afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2191906156dd565b614e7d90919063ffffffff16565b613e4990919063ffffffff16565b905092915050565b600080821315614b585760019050614b8e565b6000821215614b89577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050614b8e565b600090505b919050565b600080831315614bad57614ba682613c9d565b9050614bf6565b6000831215614bf157614bbf82613c9d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614bea9190615c87565b9050614bf6565b600090505b92915050565b600081670de0b6b3a764000084614c139190615c87565b614c1d9190615d9e565b905092915050565b6000808290506f7fffffffffffffffffffffffffffffff600f0b811315614c8357806040517f59aeb746000000000000000000000000000000000000000000000000000000008152600401614c7a9190615e17565b60405180910390fd5b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000600f0b811215614ceb57806040517f4e02165d000000000000000000000000000000000000000000000000000000008152600401614ce29190615e17565b60405180910390fd5b80915050919050565b6000614cff83613e9b565b158015614d13575082600001518260000151115b905092915050565b600080614d3985604001518660200151613d6290919063ffffffff16565b9050600080614d69614d648660400151614d568660000151613c9d565b61499590919063ffffffff16565b6149be565b614d94614d8f8760400151614d818760200151613c9d565b61499590919063ffffffff16565b6149be565b91509150614e0b614dcc614dbd8873ffffffffffffffffffffffffffffffffffffffff16614ead565b836149d090919063ffffffff16565b614dfd614dee8973ffffffffffffffffffffffffffffffffffffffff16614f3f565b856149d090919063ffffffff16565b6138bc90919063ffffffff16565b93505050509392505050565b6000808290506fffffffffffffffffffffffffffffffff8016811115614e7457806040517f53851291000000000000000000000000000000000000000000000000000000008152600401614e6b91906153c1565b60405180910390fd5b80915050919050565b6000614e898383614fd1565b905092915050565b600080821215614ea45781600003614ea6565b815b9050919050565b6000614f38670de0b6b3a76400008373ffffffffffffffffffffffffffffffffffffffff166343f0179b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f2a91906156dd565b613e4990919063ffffffff16565b9050919050565b6000614fca670de0b6b3a76400008373ffffffffffffffffffffffffffffffffffffffff1663fc741c7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fbc91906156dd565b613e4990919063ffffffff16565b9050919050565b600081831015614fe15781614fe3565b825b905092915050565b604051806060016040528060008152602001615005615032565b8152602001615012615032565b81525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60405180604001604052806000600f0b81526020016000600f0b81525090565b604051806040016040528060006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615105826150da565b9050919050565b615115816150fa565b811461512057600080fd5b50565b6000813590506151328161510c565b92915050565b60006020828403121561514e5761514d6150d5565b5b600061515c84828501615123565b91505092915050565b6000819050919050565b61517881615165565b82525050565b6000819050919050565b60006151a361519e61519984615165565b61517e565b615165565b9050919050565b6151b381615188565b82525050565b6040820160008201516151cf60008501826151aa565b5060208201516151e260208501826151aa565b50505050565b60a0820160008201516151fe600085018261516f565b50602082015161521160208501826151b9565b50604082015161522460608501826151b9565b50505050565b600060a08201905061523f60008301846151e8565b92915050565b61524e81615165565b811461525957600080fd5b50565b60008135905061526b81615245565b92915050565b600060208284031215615287576152866150d5565b5b60006152958482850161525c565b91505092915050565b6000819050919050565b60006152c36152be6152b98461529e565b61517e565b61529e565b9050919050565b6152d3816152a8565b82525050565b6040820160008201516152ef60008501826152ca565b50602082015161530260208501826152ca565b50505050565b600060408201905061531d60008301846152d9565b92915050565b60008115159050919050565b61533881615323565b82525050565b6000602082019050615353600083018461532f565b92915050565b61536281615165565b811461536d57600080fd5b50565b60008135905061537f81615359565b92915050565b60006020828403121561539b5761539a6150d5565b5b60006153a984828501615370565b91505092915050565b6153bb81615165565b82525050565b60006020820190506153d660008301846153b2565b92915050565b6153e581615188565b82525050565b600060208201905061540060008301846153dc565b92915050565b60408201600082015161541c60008501826151aa565b50602082015161542f60208501826151aa565b50505050565b600060408201905061544a6000830184615406565b92915050565b600061546b615466615461846150da565b61517e565b6150da565b9050919050565b600061547d82615450565b9050919050565b600061548f82615472565b9050919050565b61549f81615484565b82525050565b60006020820190506154ba6000830184615496565b92915050565b60006154cb826150fa565b9050919050565b6154db816154c0565b81146154e657600080fd5b50565b6000813590506154f8816154d2565b92915050565b600060208284031215615514576155136150d5565b5b6000615522848285016154e9565b91505092915050565b600061553682615472565b9050919050565b6155468161552b565b82525050565b6000602082019050615561600083018461553d565b92915050565b600061557282615472565b9050919050565b61558281615567565b82525050565b600060208201905061559d6000830184615579565b92915050565b6155ac81615323565b81146155b757600080fd5b50565b6000815190506155c9816155a3565b92915050565b6000602082840312156155e5576155e46150d5565b5b60006155f3848285016155ba565b91505092915050565b600060408201905061561160008301856153b2565b61561e60208301846153dc565b9392505050565b6000615630826150fa565b9050919050565b61564081615625565b811461564b57600080fd5b50565b60008151905061565d81615637565b92915050565b600060208284031215615679576156786150d5565b5b60006156878482850161564e565b91505092915050565b615699816150fa565b82525050565b60006040820190506156b46000830185615690565b6156c16020830184615579565b9392505050565b6000815190506156d781615359565b92915050565b6000602082840312156156f3576156f26150d5565b5b6000615701848285016156c8565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6157588261570f565b810181811067ffffffffffffffff8211171561577757615776615720565b5b80604052505050565b600061578a6150cb565b9050615796828261574f565b919050565b6000815190506157aa81615245565b92915050565b6157b98161529e565b81146157c457600080fd5b50565b6000815190506157d6816157b0565b92915050565b6000606082840312156157f2576157f161570a565b5b6157fc6060615780565b9050600061580c8482850161579b565b60008301525060206158208482850161579b565b6020830152506040615834848285016157c7565b60408301525092915050565b600060608284031215615856576158556150d5565b5b6000615864848285016157dc565b91505092915050565b6000615878826150fa565b9050919050565b6158888161586d565b811461589357600080fd5b50565b6000815190506158a58161587f565b92915050565b6000602082840312156158c1576158c06150d5565b5b60006158cf84828501615896565b91505092915050565b6060820160008201516158ee600085018261516f565b506020820151615901602085018261516f565b50604082015161591460408501826152ca565b50505050565b600060608201905061592f60008301846158d8565b92915050565b600060408201905061594a60008301856153b2565b61595760208301846153b2565b9392505050565b60006080820190506159736000830185615690565b61598060208301846158d8565b9392505050565b615990816152a8565b82525050565b60006040820190506159ab6000830185615690565b6159b86020830184615987565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006159f982615165565b9150615a0483615165565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615a3957615a386159bf565b5b828201905092915050565b6000615a4f8261529e565b9150615a5a8361529e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615615a9557615a946159bf565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615615acd57615acc6159bf565b5b828201905092915050565b6000615ae38261529e565b9150615aee8361529e565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615615b2957615b286159bf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615615b6157615b606159bf565b5b828203905092915050565b6000615b7782615165565b9150615b8283615165565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615bbb57615bba6159bf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615c0082615165565b9150615c0b83615165565b925082615c1b57615c1a615bc6565b5b828204905092915050565b6000615c3182615165565b9150615c3c83615165565b925082821015615c4f57615c4e6159bf565b5b828203905092915050565b600060208284031215615c7057615c6f6150d5565b5b6000615c7e848285016157c7565b91505092915050565b6000615c928261529e565b9150615c9d8361529e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615615cdc57615cdb6159bf565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615615d1957615d186159bf565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615615d5657615d556159bf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615615d9357615d926159bf565b5b828202905092915050565b6000615da98261529e565b9150615db48361529e565b925082615dc457615dc3615bc6565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615615dfd57615dfc6159bf565b5b828205905092915050565b615e118161529e565b82525050565b6000602082019050615e2c6000830184615e08565b9291505056fea2646970667358221220c6fed364c215dec5b3c229cdd5028ed7fa4102fde0cc5ca6724f1db0d04fc0a164736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806391689024116100d8578063c07f47d41161008c578063f667f89711610066578063f667f89714610457578063f6b3200814610473578063f77c47911461048f57610182565b8063c07f47d414610401578063c4d66de81461041f578063d7d7d6b81461043b57610182565b80639d8870a7116100bd5780639d8870a714610383578063ab582f29146103a1578063b7648fb9146103d157610182565b806391689024146103235780639a427d031461035357610182565b806359218fe91161013a57806373b88f3b1161011457806373b88f3b146102bb57806376f37001146102d75780638e480b20146102f357610182565b806359218fe91461025157806359ea287d1461026d5780636943b0171461028b57610182565b806320fe9c3c1161016b57806320fe9c3c146101c1578063476fa96d146101f157806358ca6f981461022157610182565b806311da60b4146101875780631e0c6fb914610191575b600080fd5b61018f6104ad565b005b6101ab60048036038101906101a69190615138565b61063c565b6040516101b8919061522a565b60405180910390f35b6101db60048036038101906101d69190615271565b6106f2565b6040516101e89190615308565b60405180910390f35b61020b60048036038101906102069190615271565b610715565b6040516102189190615308565b60405180910390f35b61023b60048036038101906102369190615138565b610738565b604051610248919061533e565b60405180910390f35b61026b60048036038101906102669190615385565b610791565b005b610275610b3b565b604051610282919061522a565b60405180910390f35b6102a560048036038101906102a09190615138565b610bb2565b6040516102b2919061533e565b60405180910390f35b6102d560048036038101906102d09190615385565b610cbe565b005b6102f160048036038101906102ec9190615385565b611252565b005b61030d60048036038101906103089190615138565b611501565b60405161031a91906153c1565b60405180910390f35b61033d60048036038101906103389190615138565b61154d565b60405161034a91906153eb565b60405180910390f35b61036d60048036038101906103689190615271565b6115c7565b60405161037a9190615435565b60405180910390f35b61038b6115ea565b60405161039891906154a5565b60405180910390f35b6103bb60048036038101906103b69190615138565b61160e565b6040516103c891906153eb565b60405180910390f35b6103eb60048036038101906103e69190615138565b611688565b6040516103f89190615435565b60405180910390f35b6104096116f8565b60405161041691906153c1565b60405180910390f35b610439600480360381019061043491906154fe565b611705565b005b61045560048036038101906104509190615385565b61189d565b005b610471600480360381019061046c9190615138565b611ee3565b005b61048d60048036038101906104889190615138565b612081565b005b6104976122d4565b6040516104a4919061554c565b60405180910390f35b60026104d87f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b0361050f576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61054360027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b3061054c6122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016105849190615588565b602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c591906155cf565b156105fc576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610604612316565b505061063a60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b565b610644614feb565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160405180606001604052908160008201548152602001600182016040518060400160405290816000820154815260200160018201548152505081526020016003820160405180604001604052908160008201548152602001600182015481525050815250509050919050565b6106fa615018565b61070e8260096127c890919063ffffffff16565b9050919050565b61071d615018565b61073182600961283a90919063ffffffff16565b9050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff169050919050565b60026107bc7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b036107f3576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082760027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b306108306122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016108689190615588565b602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a991906155cf565b156108e0576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360006108eb612316565b90506108f782826128ac565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161561097e576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109883385612ebe565b6109cf600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f8e565b15610a06576040517f3975ab9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a9360026001016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050610a85610a806116f8565b6115c7565b61303e90919063ffffffff16565b90506000610aa082613069565b9050610abd670de0b6b3a7640000826130be90919063ffffffff16565b15610aff57806040517fd8b8b951000000000000000000000000000000000000000000000000000000008152600401610af691906153eb565b60405180910390fd5b5050505050610b3860017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b610b43614feb565b60026001016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050905090565b6000610cb7600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160405180604001604052908160008201548152602001600182015481525050815260200160028201604051806060016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815260200160038201604051806040016040529081600082015481526020016001820154815250508152505081526020016007820160009054906101000a900460ff1615151515815250506130d4565b9050919050565b6002610ce97f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b03610d20576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5460027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b30610d5d6122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b8152600401610d959190615588565b602060405180830381865afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd691906155cf565b15610e0d576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000610e18612316565b9050610e2482826128ac565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1615610eab576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610eb56116f8565b9050610f0d8186600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016130ff9092919063ffffffff16565b610f26818660026001016130ff9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fb9726781b72c53f23217f424d70445b222951f008aeac7eece8139caed71ed2d8287604051610f6e9291906155fc565b60405180910390a250610f7f6122d4565b73ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190615663565b73ffffffffffffffffffffffffffffffffffffffff1663e411918033306040518363ffffffff1660e01b815260040161102792919061569f565b602060405180830381865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106891906155cf565b1561109f576040517f24a21d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110e6600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061313b565b1561111d576040517f90898fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006111aa6002600101604051806060016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815260200160038201604051806040016040529081600082015481526020016001820154815250508152505061119c6111976116f8565b6115c7565b61303e90919063ffffffff16565b905060006111b782613069565b90506111d4670de0b6b3a7640000826130be90919063ffffffff16565b1561121657806040517fd8b8b95100000000000000000000000000000000000000000000000000000000815260040161120d91906153eb565b60405180910390fd5b505050505061124f60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b600261127d7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b036112b4576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112e860027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b306112f16122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016113299190615588565b602060405180830381865afa158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a91906155cf565b156113a1576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360006113ac612316565b90506113b882826128ac565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161561143f576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61144933856131e5565b611490600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f8e565b156114c7576040517f3975ab9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050506114fe60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60006115c060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206132b590919063ffffffff16565b9050919050565b6115cf615032565b6115e382600261330c90919063ffffffff16565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206133d890919063ffffffff16565b9050919050565b611690615032565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001604051806040016040529081600082015481526020016001820154815250509050919050565b6000600960000154905090565b600160008103611741576040517fb66146bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061176b7f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b612304565b106117ad57806040517f1e7a9d950000000000000000000000000000000000000000000000000000000081526004016117a491906153c1565b60405180910390fd5b6117e0817f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b61230f90919063ffffffff16565b61181460017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c61348890919063ffffffff16565b61181d3361348f565b611825613576565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061189960007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c61348890919063ffffffff16565b5050565b60026118c87f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b036118ff576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61193360027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b3061193c6122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b81526004016119749190615588565b602060405180830381865afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b591906155cf565b156119ec576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360006119f7612316565b9050611a0382826128ac565b6000611a0d6116f8565b03611a44576040517fc25d67ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1615611acb576040517f6830d4d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611ad56116f8565b9050611b2d8186600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161361e9092919063ffffffff16565b611b468186600260010161361e9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167ff98b31465ac12e92b5cb136ade913276c267463c4395bb1a3999bc88fb8378068287604051611b8e9291906155fc565b60405180910390a250611b9f6122d4565b73ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d9190615663565b73ffffffffffffffffffffffffffffffffffffffff1663e411918033306040518363ffffffff1660e01b8152600401611c4792919061569f565b602060405180830381865afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8891906155cf565b15611cbf576040517f24a21d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d06600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061313b565b15611d3d576040517f90898fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611dca60026001016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050611dbc611db76116f8565b6115c7565b61303e90919063ffffffff16565b9050611e7160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663193775676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e91906156dd565b826000015161365a90919063ffffffff16565b15611ea8576040517fcefd0e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050611ee060017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b6002611f0e7f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d7612304565b03611f45576040517ff320323600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f7960027f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b30611f826122d4565b73ffffffffffffffffffffffffffffffffffffffff16632e48152c826040518263ffffffff1660e01b8152600401611fba9190615588565b602060405180830381865afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb91906155cf565b15612032576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061203c612316565b905061204883826128ac565b505061207e60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b50565b6120896122d4565b73ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f79190615663565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461215b576040517f40cbe9b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000612166612316565b905061217282826128ac565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000612292600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050836000016040518060400160405290816000820154815260200160018201548152505061303e90919063ffffffff16565b90506122a2858260000151612ebe565b6122b08582602001516131e5565b60018260070160006101000a81548160ff0219169083151502179055505050505050565b60006122ff7f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea60533613671565b905090565b600081549050919050565b8082555050565b61231e61504c565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661234a6122d4565b915091508173ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af115801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf9190615840565b925060006123cb6116f8565b9050836000015181036123e0575050506127c5565b60008373ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b815260040161241b91906153c1565b606060405180830381865afa158015612438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245c9190615840565b9050600061247b8660000151600260010161367c90919063ffffffff16565b9050600086600001518214612509578573ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b81526004016124c391906153c1565b606060405180830381865afa1580156124e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125049190615840565b61250b565b865b90508473ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257c91906158ab565b73ffffffffffffffffffffffffffffffffffffffff1663a55ff01d886040518263ffffffff1660e01b81526004016125b4919061591a565b600060405180830381600087803b1580156125ce57600080fd5b505af11580156125e2573d6000803e3d6000fd5b50505050600061261761260887896002888760096136ab9095949392919063ffffffff16565b826138bc90919063ffffffff16565b905061264361263488878560026138d2909392919063ffffffff16565b826138bc90919063ffffffff16565b905087600001518260000151146126a35761268361267487896002868d60096136ab9095949392919063ffffffff16565b826138bc90919063ffffffff16565b90506126a18783600001518a60026138d2909392919063ffffffff16565b505b8573ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127129190615663565b73ffffffffffffffffffffffffffffffffffffffff16637f3dd53b826040518263ffffffff1660e01b815260040161274a91906153eb565b600060405180830381600087803b15801561276457600080fd5b505af1158015612778573d6000803e3d6000fd5b505050507f88a84ea6dd274b386afd27dbbe11b6192b25017f5e60bb8c4053dfddb45c294d826000015189600001516040516127b5929190615935565b60405180910390a1505050505050505b90565b6127d0615018565b6128328360010160008481526020019081526020016000206040518060400160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a9004600f0b600f0b600f0b81525050613a5b565b905092915050565b612842615018565b6128a48360020160008481526020019081526020016000206040518060400160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a9004600f0b600f0b600f0b81525050613a5b565b905092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166128d86122d4565b9150915082600001516128ea85611501565b036128f6575050612eba565b60006129508460000151600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161367c90919063ffffffff16565b90506000846000015182146129de578373ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b815260040161299891906153c1565b606060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190615840565b6129e0565b845b905060008373ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5391906158ab565b73ffffffffffffffffffffffffffffffffffffffff16631830349c88846040518363ffffffff1660e01b8152600401612a8d92919061595e565b600060405180830381600087803b158015612aa757600080fd5b505af1158015612abb573d6000803e3d6000fd5b50505050612b71612b62612b5d6009600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208660000151600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613a9d909392919063ffffffff16565b613b2d565b82613b5190919063ffffffff16565b9050612be0612bd1612bcc8785600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613b679092919063ffffffff16565b613c9d565b82613d1090919063ffffffff16565b90508560000151826000015114612d81578373ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6091906158ab565b73ffffffffffffffffffffffffffffffffffffffff16631830349c88886040518363ffffffff1660e01b8152600401612c9a92919061595e565b600060405180830381600087803b158015612cb457600080fd5b505af1158015612cc8573d6000803e3d6000fd5b50505050612d7e612d6f612d6a6009600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a60000151600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613a9d909392919063ffffffff16565b613b2d565b82613b5190919063ffffffff16565b90505b8373ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df09190615663565b73ffffffffffffffffffffffffffffffffffffffff1663c9cb48de88836040518363ffffffff1660e01b8152600401612e2a929190615996565b600060405180830381600087803b158015612e4457600080fd5b505af1158015612e58573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f9d7055d24918d8c2fd08660a27bf31d4086fa71a51cd07874276470223aa480f83600001518860000151604051612eac929190615935565b60405180910390a250505050505b5050565b6000612ec86116f8565b9050612f208183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201613d269092919063ffffffff16565b612f3981836002600101613d269092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f39854479080fac0b5e7c0ecedb0fb02308a72a43cd102c6b9f918653d34003678284604051612f819291906155fc565b60405180910390a2505050565b600080612feb83600201600101604051806040016040529081600082015481526020016001820154815250508460000160405180604001604052908160008201548152602001600182015481525050613d6290919063ffffffff16565b905061300e8160000151846002016003016000015461365a90919063ffffffff16565b8061303657506130358160200151846002016003016001015461365a90919063ffffffff16565b5b915050919050565b613046615032565b613061613057848460200151613d62565b8360400151613dbb565b905092915050565b60006130788260200151613e14565b6130ad576130a8670de0b6b3a76400006130a384602001518560000151613e2090919063ffffffff16565b613e49565b6130b7565b670de0b6b3a76400005b9050919050565b6000806130cb8484613e5d565b14905092915050565b60006130e38260200151613e9b565b80156130f857506130f78260000151613ec6565b5b9050919050565b6131198184600101600101546138bc90919063ffffffff16565b836001016001018190555081836000018190555061313683613ef1565b505050565b60008061314e8360000160000154613e14565b801561316957506131688360020160010160000154613e14565b5b801561318457506131838360020160030160000154613e14565b5b905060006131988460000160010154613e14565b80156131b357506131b28460020160010160010154613e14565b5b80156131ce57506131cd8460020160030160010154613e14565b5b9050811580156131dc575080155b92505050919050565b60006131ef6116f8565b90506132478183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201613f929092919063ffffffff16565b61326081836002600101613f929092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f63625b85818a29587ee919ee6a968ee0b32f3513f2884b3968001062ba49eb6b82846040516132a89291906155fc565b60405180910390a2505050565b60008260070160009054906101000a900460ff16156132d75760009050613306565b613303836000016040518060400160405290816000820154815260200160018201548152505083613fce565b90505b92915050565b613314615032565b6133d08360000160008481526020019081526020016000206040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050614100565b905092915050565b600061348061347a846002016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050856000016040518060400160405290816000820154815260200160018201548152505061303e90919063ffffffff16565b83613fce565b905092915050565b8082555050565b613497614160565b1580156134ca57506134c87fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c614171565b155b15613501576040517f689f12a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61350a8161417c565b613540576040517f14878b6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613573817f0e555410d8128dff796eab5d29b97dd593ce9cab44a71b64c08244579ea6053361419f90919063ffffffff16565b50565b61357e614160565b1580156135b157506135af7fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c614171565b155b156135e8576040517f689f12a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61361c60017f1b30fe15febd596dffd21d4da0657732eea42b4b5a9789e3e6daab3d570999d761230f90919063ffffffff16565b565b6136388184600101600001546138bc90919063ffffffff16565b8360010160000181905550818360000181905550613655836141a6565b505050565b600060026136688484613e5d565b14905092915050565b600081549050919050565b60008083600001549050600081146136a05760018161369b91906159ee565b6136a2565b825b91505092915050565b6000806136c584600001518661330c90919063ffffffff16565b90506136cf615018565b6136dc8888848888614247565b80945081925050506137016136f28387876144f9565b8261466a90919063ffffffff16565b905060006137108387876146c3565b905061373a613735836137278d8a600001516127c8565b61466a90919063ffffffff16565b61477d565b8a60010160008760000151815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff1602179055509050506138026137fd826137ef8d8a6000015161283a565b61466a90919063ffffffff16565b61477d565b8a60020160008760000151815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555090505084600001518a600001819055505050509695505050505050565b600081836138ca91906159ee565b905092915050565b60008060008061396088600101604051806060016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815260200160038201604051806040016040529081600082015481526020016001820154815250508152505088876139508c8b61330c565b6147bf909392919063ffffffff16565b92509250925061396f8361481c565b8860000160008760000151815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050508015613a4d57876001016000808201600090556001820160008082016000905560018201600090555050600382016000808201600090556001820160009055505050505b819350505050949350505050565b613a63615018565b6040518060400160405280613a7e8460000151600f0b61487c565b8152602001613a938460200151600f0b61487c565b8152509050919050565b613aa5615018565b6000613ae2613ac18760000154876127c890919063ffffffff16565b613ad485886127c890919063ffffffff16565b61488990919063ffffffff16565b9050613b198185600001604051806040016040529081600082015481526020016001820154815250506148e290919063ffffffff16565b915082866000018190555050949350505050565b6000613b4a82602001518360000151613b5190919063ffffffff16565b9050919050565b60008183613b5f9190615a44565b905092915050565b600080613c0b856002016040518060600160405290816000820154815260200160018201604051806040016040529081600082015481526020016001820154815250508152602001600382016040518060400160405290816000820154815260200160018201548152505081525050858588600001604051806040016040529081600082015481526020016001820154815250506147bf909392919063ffffffff16565b87600001600082955083965084919050600082015181600001556020820151816001015550505050508015613c95578460020160008082016000905560018201600080820160009055600182016000905550506003820160008082016000905560018201600090555050505060008560070160006101000a81548160ff0219169083151502179055505b509392505050565b6000808290507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613d0757806040517ea07eb5000000000000000000000000000000000000000000000000000000008152600401613cfe91906153c1565b60405180910390fd5b80915050919050565b60008183613d1e9190615ad8565b905092915050565b613d408184600301600001546138bc90919063ffffffff16565b8360030160000181905550818360000181905550613d5d836141a6565b505050565b613d6a615032565b6040518060400160405280613d90846000015186600001516138bc90919063ffffffff16565b8152602001613db0846020015186602001516138bc90919063ffffffff16565b815250905092915050565b613dc3615032565b6040518060400160405280613de98460000151866000015161494b90919063ffffffff16565b8152602001613e098460200151866020015161494b90919063ffffffff16565b815250905092915050565b60008082149050919050565b600081670de0b6b3a764000084613e379190615b6c565b613e419190615bf5565b905092915050565b6000613e558383614961565b905092915050565b600080600084849150915080821115613e7b57600292505050613e95565b80821015613e8e57600092505050613e95565b6001925050505b92915050565b6000613eaa8260200151613ec6565b8015613ebf5750613ebe8260400151613ec6565b5b9050919050565b6000613ed58260000151613e14565b8015613eea5750613ee98260200151613e14565b5b9050919050565b613f128160030160010154826001016001015461365a90919063ffffffff16565b15613f5557613f388160030160010154826001016001015461494b90919063ffffffff16565b816001016001018190555060008160030160010181905550613f8f565b613f768160010160010154826003016001015461494b90919063ffffffff16565b8160030160010181905550600081600101600101819055505b50565b613fac8184600301600101546138bc90919063ffffffff16565b8360030160010181905550818360000181905550613fc983613ef1565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa15801561401c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140409190615840565b604001519050600061407361406e8361406061405b8961497a565b613c9d565b61499590919063ffffffff16565b6149be565b90506140f68473ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e791906156dd565b826149d090919063ffffffff16565b9250505092915050565b614108615032565b604051806040016040528061413284600001516fffffffffffffffffffffffffffffffff166149f9565b815260200161415684602001516fffffffffffffffffffffffffffffffff166149f9565b8152509050919050565b600061416b3061417c565b15905090565b600081549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8082555050565b6141c78160030160000154826001016000015461365a90919063ffffffff16565b1561420a576141ed8160030160000154826001016000015461494b90919063ffffffff16565b816001016000018190555060008160030160000181905550614244565b61422b8160010160000154826003016000015461494b90919063ffffffff16565b8160030160000181905550600081600101600001819055505b50565b61424f615018565b600061425e8560200151613e14565b156142855760405180604001604052806000815260200160008152506000915091506144ef565b6142928560000151613e14565b156142b95760405180604001604052806000815260200160008152506000915091506144ef565b6000846020015184602001516142cf9190615c26565b905060006142fe6142f987604001516142eb8a60200151613c9d565b61499590919063ffffffff16565b6149be565b9050600061431d61430e89613069565b836149d090919063ffffffff16565b905060006143bd61433561433086614a15565b613c9d565b8b73ffffffffffffffffffffffffffffffffffffffff166360ec91d68c6040518263ffffffff1660e01b815260040161436e9190615435565b602060405180830381865afa15801561438b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143af9190615c5a565b61499590919063ffffffff16565b905060006143dc6143cd84613c9d565b8361499590919063ffffffff16565b905061442161440a8d8d73ffffffffffffffffffffffffffffffffffffffff16614a3290919063ffffffff16565b614413836149be565b6149d090919063ffffffff16565b9550600061445161443183614b45565b61444c8961443e866149be565b61494b90919063ffffffff16565b614b93565b90506144726144638c60000151613c9d565b82614bfc90919063ffffffff16565b8860000181815250506144df670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6144b29190615c87565b6144d16144c28e60200151613c9d565b84614bfc90919063ffffffff16565b61499590919063ffffffff16565b8860200181815250505050505050505b9550959350505050565b614501615018565b61450e8460200151613e14565b156145315760405180604001604052806000815260200160008152509050614663565b61453e8460000151613e14565b156145615760405180604001604052806000815260200160008152509050614663565b600061457e84604001518460400151613d1090919063ffffffff16565b905060006145a16145928760200151613c9d565b8361499590919063ffffffff16565b905060006145c86145b96145b489613069565b613c9d565b8361499590919063ffffffff16565b905061462e670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146019190615c87565b6146206146118a60000151613c9d565b84614bfc90919063ffffffff16565b61499590919063ffffffff16565b8460000181815250506146566146478860200151613c9d565b82614bfc90919063ffffffff16565b8460200181815250505050505b9392505050565b614672615018565b604051806040016040528061469884600001518660000151613b5190919063ffffffff16565b81526020016146b884602001518660200151613b5190919063ffffffff16565b815250905092915050565b6146cb615018565b6000836020015183602001516146e19190615c26565b90506146f08560000151613e14565b6147205761471b614716866000015161470884614a15565b613e2090919063ffffffff16565b613c9d565b614723565b60005b8260000181815250506147398560200151613e14565b6147695761476461475f866020015161475184614a15565b613e2090919063ffffffff16565b613c9d565b61476c565b60005b826020018181525050509392505050565b61478561506d565b604051806040016040528061479d8460000151614c25565b600f0b81526020016147b28460200151614c25565b600f0b8152509050919050565b6147c7615032565b6000806147dd8487614cf490919063ffffffff16565b6147ea578660008061480c565b6147f4878761303e565b614809868689614d1b9092919063ffffffff16565b60015b9250925092509450945094915050565b61482461508d565b604051806040016040528061483c8460000151614e17565b6fffffffffffffffffffffffffffffffff1681526020016148608460200151614e17565b6fffffffffffffffffffffffffffffffff168152509050919050565b600081600f0b9050919050565b614891615018565b60405180604001604052806148b784600001518660000151613d1090919063ffffffff16565b81526020016148d784602001518660200151613d1090919063ffffffff16565b815250905092915050565b6148ea615018565b6040518060400160405280614918846000015161490a8760000151613c9d565b61499590919063ffffffff16565b815260200161494084602001516149328760200151613c9d565b61499590919063ffffffff16565b815250905092915050565b600081836149599190615c26565b905092915050565b60008183106149705781614972565b825b905092915050565b600061498e82600001518360200151614e7d565b9050919050565b6000670de0b6b3a764000082846149ac9190615c87565b6149b69190615d9e565b905092915050565b60006149c982614e91565b9050919050565b6000670de0b6b3a764000082846149e79190615b6c565b6149f19190615bf5565b905092915050565b6000816fffffffffffffffffffffffffffffffff169050919050565b6000670de0b6b3a764000082614a2b9190615b6c565b9050919050565b6000614b3d670de0b6b3a7640000614b2f8473ffffffffffffffffffffffffffffffffffffffff1663e975c0c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab291906156dd565b8673ffffffffffffffffffffffffffffffffffffffff16635d16e1206040518163ffffffff1660e01b8152600401602060405180830381865afa158015614afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2191906156dd565b614e7d90919063ffffffff16565b613e4990919063ffffffff16565b905092915050565b600080821315614b585760019050614b8e565b6000821215614b89577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050614b8e565b600090505b919050565b600080831315614bad57614ba682613c9d565b9050614bf6565b6000831215614bf157614bbf82613c9d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614bea9190615c87565b9050614bf6565b600090505b92915050565b600081670de0b6b3a764000084614c139190615c87565b614c1d9190615d9e565b905092915050565b6000808290506f7fffffffffffffffffffffffffffffff600f0b811315614c8357806040517f59aeb746000000000000000000000000000000000000000000000000000000008152600401614c7a9190615e17565b60405180910390fd5b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000600f0b811215614ceb57806040517f4e02165d000000000000000000000000000000000000000000000000000000008152600401614ce29190615e17565b60405180910390fd5b80915050919050565b6000614cff83613e9b565b158015614d13575082600001518260000151115b905092915050565b600080614d3985604001518660200151613d6290919063ffffffff16565b9050600080614d69614d648660400151614d568660000151613c9d565b61499590919063ffffffff16565b6149be565b614d94614d8f8760400151614d818760200151613c9d565b61499590919063ffffffff16565b6149be565b91509150614e0b614dcc614dbd8873ffffffffffffffffffffffffffffffffffffffff16614ead565b836149d090919063ffffffff16565b614dfd614dee8973ffffffffffffffffffffffffffffffffffffffff16614f3f565b856149d090919063ffffffff16565b6138bc90919063ffffffff16565b93505050509392505050565b6000808290506fffffffffffffffffffffffffffffffff8016811115614e7457806040517f53851291000000000000000000000000000000000000000000000000000000008152600401614e6b91906153c1565b60405180910390fd5b80915050919050565b6000614e898383614fd1565b905092915050565b600080821215614ea45781600003614ea6565b815b9050919050565b6000614f38670de0b6b3a76400008373ffffffffffffffffffffffffffffffffffffffff166343f0179b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f2a91906156dd565b613e4990919063ffffffff16565b9050919050565b6000614fca670de0b6b3a76400008373ffffffffffffffffffffffffffffffffffffffff1663fc741c7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fbc91906156dd565b613e4990919063ffffffff16565b9050919050565b600081831015614fe15781614fe3565b825b905092915050565b604051806060016040528060008152602001615005615032565b8152602001615012615032565b81525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60405180604001604052806000600f0b81526020016000600f0b81525090565b604051806040016040528060006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615105826150da565b9050919050565b615115816150fa565b811461512057600080fd5b50565b6000813590506151328161510c565b92915050565b60006020828403121561514e5761514d6150d5565b5b600061515c84828501615123565b91505092915050565b6000819050919050565b61517881615165565b82525050565b6000819050919050565b60006151a361519e61519984615165565b61517e565b615165565b9050919050565b6151b381615188565b82525050565b6040820160008201516151cf60008501826151aa565b5060208201516151e260208501826151aa565b50505050565b60a0820160008201516151fe600085018261516f565b50602082015161521160208501826151b9565b50604082015161522460608501826151b9565b50505050565b600060a08201905061523f60008301846151e8565b92915050565b61524e81615165565b811461525957600080fd5b50565b60008135905061526b81615245565b92915050565b600060208284031215615287576152866150d5565b5b60006152958482850161525c565b91505092915050565b6000819050919050565b60006152c36152be6152b98461529e565b61517e565b61529e565b9050919050565b6152d3816152a8565b82525050565b6040820160008201516152ef60008501826152ca565b50602082015161530260208501826152ca565b50505050565b600060408201905061531d60008301846152d9565b92915050565b60008115159050919050565b61533881615323565b82525050565b6000602082019050615353600083018461532f565b92915050565b61536281615165565b811461536d57600080fd5b50565b60008135905061537f81615359565b92915050565b60006020828403121561539b5761539a6150d5565b5b60006153a984828501615370565b91505092915050565b6153bb81615165565b82525050565b60006020820190506153d660008301846153b2565b92915050565b6153e581615188565b82525050565b600060208201905061540060008301846153dc565b92915050565b60408201600082015161541c60008501826151aa565b50602082015161542f60208501826151aa565b50505050565b600060408201905061544a6000830184615406565b92915050565b600061546b615466615461846150da565b61517e565b6150da565b9050919050565b600061547d82615450565b9050919050565b600061548f82615472565b9050919050565b61549f81615484565b82525050565b60006020820190506154ba6000830184615496565b92915050565b60006154cb826150fa565b9050919050565b6154db816154c0565b81146154e657600080fd5b50565b6000813590506154f8816154d2565b92915050565b600060208284031215615514576155136150d5565b5b6000615522848285016154e9565b91505092915050565b600061553682615472565b9050919050565b6155468161552b565b82525050565b6000602082019050615561600083018461553d565b92915050565b600061557282615472565b9050919050565b61558281615567565b82525050565b600060208201905061559d6000830184615579565b92915050565b6155ac81615323565b81146155b757600080fd5b50565b6000815190506155c9816155a3565b92915050565b6000602082840312156155e5576155e46150d5565b5b60006155f3848285016155ba565b91505092915050565b600060408201905061561160008301856153b2565b61561e60208301846153dc565b9392505050565b6000615630826150fa565b9050919050565b61564081615625565b811461564b57600080fd5b50565b60008151905061565d81615637565b92915050565b600060208284031215615679576156786150d5565b5b60006156878482850161564e565b91505092915050565b615699816150fa565b82525050565b60006040820190506156b46000830185615690565b6156c16020830184615579565b9392505050565b6000815190506156d781615359565b92915050565b6000602082840312156156f3576156f26150d5565b5b6000615701848285016156c8565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6157588261570f565b810181811067ffffffffffffffff8211171561577757615776615720565b5b80604052505050565b600061578a6150cb565b9050615796828261574f565b919050565b6000815190506157aa81615245565b92915050565b6157b98161529e565b81146157c457600080fd5b50565b6000815190506157d6816157b0565b92915050565b6000606082840312156157f2576157f161570a565b5b6157fc6060615780565b9050600061580c8482850161579b565b60008301525060206158208482850161579b565b6020830152506040615834848285016157c7565b60408301525092915050565b600060608284031215615856576158556150d5565b5b6000615864848285016157dc565b91505092915050565b6000615878826150fa565b9050919050565b6158888161586d565b811461589357600080fd5b50565b6000815190506158a58161587f565b92915050565b6000602082840312156158c1576158c06150d5565b5b60006158cf84828501615896565b91505092915050565b6060820160008201516158ee600085018261516f565b506020820151615901602085018261516f565b50604082015161591460408501826152ca565b50505050565b600060608201905061592f60008301846158d8565b92915050565b600060408201905061594a60008301856153b2565b61595760208301846153b2565b9392505050565b60006080820190506159736000830185615690565b61598060208301846158d8565b9392505050565b615990816152a8565b82525050565b60006040820190506159ab6000830185615690565b6159b86020830184615987565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006159f982615165565b9150615a0483615165565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615a3957615a386159bf565b5b828201905092915050565b6000615a4f8261529e565b9150615a5a8361529e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615615a9557615a946159bf565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615615acd57615acc6159bf565b5b828201905092915050565b6000615ae38261529e565b9150615aee8361529e565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615615b2957615b286159bf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615615b6157615b606159bf565b5b828203905092915050565b6000615b7782615165565b9150615b8283615165565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615bbb57615bba6159bf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615c0082615165565b9150615c0b83615165565b925082615c1b57615c1a615bc6565b5b828204905092915050565b6000615c3182615165565b9150615c3c83615165565b925082821015615c4f57615c4e6159bf565b5b828203905092915050565b600060208284031215615c7057615c6f6150d5565b5b6000615c7e848285016157c7565b91505092915050565b6000615c928261529e565b9150615c9d8361529e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615615cdc57615cdb6159bf565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615615d1957615d186159bf565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615615d5657615d556159bf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615615d9357615d926159bf565b5b828202905092915050565b6000615da98261529e565b9150615db48361529e565b925082615dc457615dc3615bc6565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615615dfd57615dfc6159bf565b5b828205905092915050565b615e118161529e565b82525050565b6000602082019050615e2c6000830184615e08565b9291505056fea2646970667358221220c6fed364c215dec5b3c229cdd5028ed7fa4102fde0cc5ca6724f1db0d04fc0a164736f6c634300080e0033",
  "devdoc": {
    "details": "Cloned by the Controller contract to launch new product markets.",
    "kind": "dev",
    "methods": {
      "closeAll(address)": {
        "details": "Only callable by the Collateral contract as part of the liquidation flow",
        "params": {
          "account": "Account to close out"
        }
      },
      "closeMake(uint256)": {
        "params": {
          "amount": "Amount of the position to close"
        }
      },
      "closeTake(uint256)": {
        "params": {
          "amount": "Amount of the position to close"
        }
      },
      "initialize(address)": {
        "params": {
          "productProvider_": "Product provider contract address"
        }
      },
      "isClosed(address)": {
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "The the account is closed"
        }
      },
      "isLiquidating(address)": {
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "Whether the account is in liquidation"
        }
      },
      "latestVersion()": {
        "returns": {
          "_0": "Latest settled oracle version of the product"
        }
      },
      "latestVersion(address)": {
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "Latest settled oracle version of the account"
        }
      },
      "maintenance(address)": {
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "The current maintenance requirement"
        }
      },
      "maintenanceNext(address)": {
        "details": "Assumes no price change and no funding, used to protect user from over-opening",
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "The next maintenance requirement"
        }
      },
      "openMake(uint256)": {
        "params": {
          "amount": "Amount of the position to open"
        }
      },
      "openTake(uint256)": {
        "params": {
          "amount": "Amount of the position to open"
        }
      },
      "position(address)": {
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "Current position of the account"
        }
      },
      "positionAtVersion(uint256)": {
        "details": "Only valid for the version at which a global settlement occurred",
        "params": {
          "oracleVersion": "Oracle version to return for"
        },
        "returns": {
          "_0": "Global position at oracle version"
        }
      },
      "pre()": {
        "returns": {
          "_0": "Global pending-settlement position"
        }
      },
      "pre(address)": {
        "params": {
          "account": "Account to return for"
        },
        "returns": {
          "_0": "Current pre-position of the account"
        }
      },
      "settleAccount(address)": {
        "params": {
          "account": "Account to settle"
        }
      },
      "shareAtVersion(uint256)": {
        "details": "Only valid for the version at which a global settlement occurred",
        "params": {
          "oracleVersion": "Oracle version to return for"
        },
        "returns": {
          "_0": "Global accumulator share at oracle version"
        }
      },
      "valueAtVersion(uint256)": {
        "details": "Only valid for the version at which a global settlement occurred",
        "params": {
          "oracleVersion": "Oracle version to return for"
        },
        "returns": {
          "_0": "Global accumulator value at oracle version"
        }
      }
    },
    "stateVariables": {
      "_accumulator": {
        "details": "The global accumulator state for the product"
      },
      "_accumulators": {
        "details": "The individual accumulator state for each account"
      },
      "_position": {
        "details": "The global position state for the product"
      },
      "_positions": {
        "details": "The individual position state for each account"
      },
      "productProvider": {
        "details": "The parameter provider of the product market"
      }
    },
    "title": "Product",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeAll(address)": {
        "notice": "Closes all open and pending positions, locking for liquidation"
      },
      "closeMake(uint256)": {
        "notice": "Closes a maker position for `msg.sender`"
      },
      "closeTake(uint256)": {
        "notice": "Closes a taker position for `msg.sender`"
      },
      "initialize(address)": {
        "notice": "Initializes the contract state"
      },
      "isClosed(address)": {
        "notice": "Returns whether `account` has a completely zero'd position"
      },
      "isLiquidating(address)": {
        "notice": "Returns whether `account` is currently locked for an in-progress liquidation"
      },
      "latestVersion()": {
        "notice": "Returns the global latest settled oracle version"
      },
      "latestVersion(address)": {
        "notice": "Returns `account`'s latest settled oracle version"
      },
      "maintenance(address)": {
        "notice": "Returns the maintenance requirement for `account`"
      },
      "maintenanceNext(address)": {
        "notice": "Returns the maintenance requirement for `account` after next settlement"
      },
      "openMake(uint256)": {
        "notice": "Opens a maker position for `msg.sender`"
      },
      "openTake(uint256)": {
        "notice": "Opens a taker position for `msg.sender`"
      },
      "position(address)": {
        "notice": "Returns `account`'s current position"
      },
      "positionAtVersion(uint256)": {
        "notice": "Returns the global position at oracleVersion `oracleVersion`"
      },
      "pre()": {
        "notice": "Returns the current global pending-settlement position"
      },
      "pre(address)": {
        "notice": "Returns `account`'s current pending-settlement position"
      },
      "settle()": {
        "notice": "Surfaces global settlement externally"
      },
      "settleAccount(address)": {
        "notice": "Surfaces account settlement externally"
      },
      "shareAtVersion(uint256)": {
        "notice": "Returns the global accumulator share at oracleVersion `oracleVersion`"
      },
      "valueAtVersion(uint256)": {
        "notice": "Returns the global accumulator value at oracleVersion `oracleVersion`"
      }
    },
    "notice": "Manages logic and state for a single product market.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5698,
        "contract": "contracts/product/Product.sol:Product",
        "label": "productProvider",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IProductProvider)4387"
      },
      {
        "astId": 5704,
        "contract": "contracts/product/Product.sol:Product",
        "label": "_positions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AccountPosition)7347_storage)"
      },
      {
        "astId": 5708,
        "contract": "contracts/product/Product.sol:Product",
        "label": "_position",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(VersionedPosition)7630_storage"
      },
      {
        "astId": 5714,
        "contract": "contracts/product/Product.sol:Product",
        "label": "_accumulators",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(AccountAccumulator)6741_storage)"
      },
      {
        "astId": 5718,
        "contract": "contracts/product/Product.sol:Product",
        "label": "_accumulator",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(VersionedAccumulator)6816_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IProductProvider)4387": {
        "encoding": "inplace",
        "label": "contract IProductProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AccountAccumulator)6741_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AccountAccumulator)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountAccumulator)6741_storage"
      },
      "t_mapping(t_address,t_struct(AccountPosition)7347_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AccountPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountPosition)7347_storage"
      },
      "t_mapping(t_uint256,t_struct(PackedAccumulator)4546_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PackedAccumulator)",
        "numberOfBytes": "32",
        "value": "t_struct(PackedAccumulator)4546_storage"
      },
      "t_mapping(t_uint256,t_struct(PackedPosition)4587_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PackedPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(PackedPosition)4587_storage"
      },
      "t_struct(AccountAccumulator)6741_storage": {
        "encoding": "inplace",
        "label": "struct AccountAccumulator",
        "members": [
          {
            "astId": 6740,
            "contract": "contracts/product/Product.sol:Product",
            "label": "latestVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(AccountPosition)7347_storage": {
        "encoding": "inplace",
        "label": "struct AccountPosition",
        "members": [
          {
            "astId": 7339,
            "contract": "contracts/product/Product.sol:Product",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)4631_storage"
          },
          {
            "astId": 7343,
            "contract": "contracts/product/Product.sol:Product",
            "label": "pre",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(PrePosition)4997_storage"
          },
          {
            "astId": 7346,
            "contract": "contracts/product/Product.sol:Product",
            "label": "liquidation",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(PackedAccumulator)4546_storage": {
        "encoding": "inplace",
        "label": "struct PackedAccumulator",
        "members": [
          {
            "astId": 4541,
            "contract": "contracts/product/Product.sol:Product",
            "label": "maker",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(PackedFixed18)957"
          },
          {
            "astId": 4545,
            "contract": "contracts/product/Product.sol:Product",
            "label": "taker",
            "offset": 16,
            "slot": "0",
            "type": "t_userDefinedValueType(PackedFixed18)957"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PackedPosition)4587_storage": {
        "encoding": "inplace",
        "label": "struct PackedPosition",
        "members": [
          {
            "astId": 4582,
            "contract": "contracts/product/Product.sol:Product",
            "label": "maker",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(PackedUFixed18)1012"
          },
          {
            "astId": 4586,
            "contract": "contracts/product/Product.sol:Product",
            "label": "taker",
            "offset": 16,
            "slot": "0",
            "type": "t_userDefinedValueType(PackedUFixed18)1012"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Position)4631_storage": {
        "encoding": "inplace",
        "label": "struct Position",
        "members": [
          {
            "astId": 4626,
            "contract": "contracts/product/Product.sol:Product",
            "label": "maker",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(UFixed18)1058"
          },
          {
            "astId": 4630,
            "contract": "contracts/product/Product.sol:Product",
            "label": "taker",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(UFixed18)1058"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PrePosition)4997_storage": {
        "encoding": "inplace",
        "label": "struct PrePosition",
        "members": [
          {
            "astId": 4988,
            "contract": "contracts/product/Product.sol:Product",
            "label": "oracleVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4992,
            "contract": "contracts/product/Product.sol:Product",
            "label": "openPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Position)4631_storage"
          },
          {
            "astId": 4996,
            "contract": "contracts/product/Product.sol:Product",
            "label": "closePosition",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Position)4631_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(VersionedAccumulator)6816_storage": {
        "encoding": "inplace",
        "label": "struct VersionedAccumulator",
        "members": [
          {
            "astId": 6803,
            "contract": "contracts/product/Product.sol:Product",
            "label": "latestVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6809,
            "contract": "contracts/product/Product.sol:Product",
            "label": "_valueAtVersion",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(PackedAccumulator)4546_storage)"
          },
          {
            "astId": 6815,
            "contract": "contracts/product/Product.sol:Product",
            "label": "_shareAtVersion",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(PackedAccumulator)4546_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VersionedPosition)7630_storage": {
        "encoding": "inplace",
        "label": "struct VersionedPosition",
        "members": [
          {
            "astId": 7625,
            "contract": "contracts/product/Product.sol:Product",
            "label": "_positionAtVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(PackedPosition)4587_storage)"
          },
          {
            "astId": 7629,
            "contract": "contracts/product/Product.sol:Product",
            "label": "pre",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PrePosition)4997_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(PackedFixed18)957": {
        "encoding": "inplace",
        "label": "PackedFixed18",
        "numberOfBytes": "16"
      },
      "t_userDefinedValueType(PackedUFixed18)1012": {
        "encoding": "inplace",
        "label": "PackedUFixed18",
        "numberOfBytes": "16"
      },
      "t_userDefinedValueType(UFixed18)1058": {
        "encoding": "inplace",
        "label": "UFixed18",
        "numberOfBytes": "32"
      }
    }
  }
}
