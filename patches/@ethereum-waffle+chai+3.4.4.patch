diff --git a/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/emit.js b/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/emit.js
index f424398..87dc436 100644
--- a/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/emit.js
+++ b/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/emit.js
@@ -55,6 +55,12 @@ function supportEmit(Assertion) {
                     new Assertion(actualArgs[index].hash).to.be.oneOf([expectedArgs[index], ethers_1.utils.keccak256(expectedArgBytes)]);
                 }
                 else {
+                    if (isStruct(actualArgs[index])) {
+                        new Assertion(
+                            convertStructToPlainObject(actualArgs[index])
+                        ).to.deep.equal(expectedArgs[index]);
+                        return;
+                    }
                     new Assertion(actualArgs[index]).equal(expectedArgs[index]);
                 }
             }
@@ -72,6 +78,26 @@ function supportEmit(Assertion) {
         }
         context.assert(false, `Specified args not emitted in any of ${context.logs.length} emitted "${context.eventName}" events`, 'Do not combine .not. with .withArgs()');
     };
+    const isStruct = (arr) => {
+        if (!Array.isArray(arr)) return false;
+        const keys = Object.keys(arr);
+        const hasAlphaNumericKeys = keys.some((key) => key.match(/^[a-zA-Z0-9]*[a-zA-Z]+[a-zA-Z0-9]*$/));
+        const hasNumericKeys = keys.some((key) => key.match(/^\d+$/));
+        return hasAlphaNumericKeys && hasNumericKeys;
+    };
+
+    const convertStructToPlainObject = (struct) => {
+        const keys = Object.keys(struct).filter((key) => isNaN(key));
+        return keys.reduce(
+            (acc, key) => ({
+            ...acc,
+            [key]: isStruct(struct[key])
+                ? convertStructToPlainObject(struct[key])
+                : struct[key]
+            }),
+            {}
+        );
+    };
     Assertion.addMethod('withArgs', function (...expectedArgs) {
         const derivedPromise = this.promise.then(() => {
             tryAssertArgsArraysEqual(this, expectedArgs, this.logs);
